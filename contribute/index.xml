<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Community Health Toolkit – Contributing to the Community Health Toolkit</title><link>https://docs.communityhealthtoolkit.org/contribute/</link><description>Recent content in Contributing to the Community Health Toolkit on Community Health Toolkit</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.communityhealthtoolkit.org/contribute/index.xml" rel="self" type="application/rss+xml"/><item><title>Contribute: Documentation Workflow</title><link>https://docs.communityhealthtoolkit.org/contribute/docs/workflow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/docs/workflow/</guid><description>
&lt;h2 id="getting-started">Getting Started&lt;/h2>
&lt;p>Anyone can contribute to CHT documentation by opening an issue in the &lt;a href="https://github.com/medic/cht-docs/issues">&lt;code>cht-docs&lt;/code>&lt;/a> repo or by using the “Edit this page” or “Create documentation issue” links in the upper right corner of your window.&lt;/p>
&lt;h3 id="basics">Basics&lt;/h3>
&lt;ul>
&lt;li>It is helpful to be comfortable with &lt;a href="https://git-scm.com/doc/ext">git&lt;/a> and &lt;a href="https://lab.github.com/">GitHub&lt;/a> to contribute to the CHT community.&lt;/li>
&lt;li>The documentation source is in &lt;a href="https://github.com/medic/cht-docs">GitHub&lt;/a>. The content pages are in the &lt;code>/content/en/&lt;/code> directory.&lt;/li>
&lt;li>Documentation is written in &lt;a href="https://www.markdownguide.org/">Markdown&lt;/a>.&lt;/li>
&lt;li>The CHT site build uses &lt;a href="https://gohugo.io/">Hugo&lt;/a>. You can also setup a &lt;a href="https://github.com/medic/cht-docs/blob/main/README.md">local clone&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="writing-documentation">Writing Documentation&lt;/h2>
&lt;p>A high degree of importance is put on consistency and usability of CHT documentation so that it is accessible and understood by a wide audience. The CHT &lt;a href="https://docs.communityhealthtoolkit.org/contribute/docs/style-guide/">documentation style guide&lt;/a> will help to write documentation in the most consistent and useful way.&lt;/p>
&lt;h2 id="commits-to-github">Commits to GitHub&lt;/h2>
&lt;p>The main branch is &lt;code>main&lt;/code> which must be kept stable since it is deployed to the doc site. All documentation changes should be done in a branch with a Pull Request when ready for review. This means that a maintainer has signed off on the change before it hits the main branch.&lt;/p>
&lt;p>Format your commit messages according to the Git convention where the first line should be a short title/summary (50 characters or so) with more details in a separate paragraph (if needed).&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Every commit message should be able to complete the following sentence:
When applied, this commit will: {YOUR COMMIT MESSAGE}
&lt;/div>
&lt;h2 id="creating-a-pull-request">Creating a Pull Request&lt;/h2>
&lt;p>When your branch is ready for review, create a &lt;a href="https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request">Pull Request&lt;/a>. If you know who you&amp;rsquo;d like to review the PR, you can assign them directly. If you are unsure, you can leave it to the maintainers to handle the PR.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
If the PR is part of an open issue in cht-core, add the &lt;a href="https://github.com/medic/cht-docs/labels/Blocked%3A%20waiting%20on%20AT">&lt;code>Blocked: waiting on AT&lt;/code>&lt;/a> label so that the PR isn’t accidentally merged prematurely, before the issue is acceptance tested and complete.
&lt;/div>
&lt;h2 id="reviewing-pull-requests">Reviewing Pull Requests&lt;/h2>
&lt;p>In general, reviewers should:&lt;/p>
&lt;ol>
&lt;li>Read the PR description to understand the changes made, as well as any linked issues&lt;/li>
&lt;li>Review any comments by other reviewers&lt;/li>
&lt;li>Select the &lt;strong>Files changed&lt;/strong> tab to see the files and lines changed&lt;/li>
&lt;li>Click the &lt;strong>+&lt;/strong> beside the line you want to comment on. To select multiple lines at once, click the &lt;strong>+&lt;/strong> of the top line of the selection, drag down to the bottom line, and release.&lt;/li>
&lt;li>Add any comments you have about the line and click either &lt;strong>Add single comment&lt;/strong> (if you want to post the comment without a review) or &lt;strong>Start a review&lt;/strong> (if you have multiple comments to make).&lt;/li>
&lt;li>When finished, click &lt;strong>Review changes&lt;/strong> at the top of the page. Here, you can add a summary of your review, approve the PR, comment or request changes as needed.&lt;/li>
&lt;li>Once all comments have been resolved, or changes are satisfactory, &lt;strong>Merge pull request&lt;/strong> to complete the updates, and delete the branch.&lt;/li>
&lt;/ol>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
&lt;p>Additional Tips for Reviewers:&lt;/p>
&lt;ul>
&lt;li>Use the &lt;a href="https://docs.communityhealthtoolkit.org/contribute/docs/style-guide/">Style Guide&lt;/a> to maintain documentation quality&lt;/li>
&lt;li>Compare content to pages within the same section and encourage consistency&lt;/li>
&lt;li>Be empathetic to the author, commenting on positive aspects of PRs as well as changes&lt;/li>
&lt;li>Ask clarifying questions where needed to avoid further confusion&lt;/li>
&lt;/ul>
&lt;/div></description></item><item><title>Contribute: Development Workflow</title><link>https://docs.communityhealthtoolkit.org/contribute/code/workflow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/code/workflow/</guid><description>
&lt;h2 id="code">Code&lt;/h2>
&lt;h3 id="writing">Writing&lt;/h3>
&lt;p>Where possible, follow our &lt;a href="https://docs.communityhealthtoolkit.org/contribute/code/style-guide/">coding style guide&lt;/a>.&lt;/p>
&lt;p>Aim for self-documenting code. Where code cannot be made self-documenting add commenting. Usually comments are useful when they explain why some code exists, and should not be explaining what some code is doing.&lt;/p>
&lt;h3 id="pushing-code--opening-pull-requests">Pushing Code &amp;amp; Opening Pull Requests&lt;/h3>
&lt;ul>
&lt;li>If your code is in a regular pull request, it is assumed to be done and only needing a review and testing as checks before merging. It is best to request a reviewer, but otherwise anyone may freely review your PR.&lt;/li>
&lt;li>If your code is in a draft PR, it is assumed to be a work-in-progress where collaboration is welcome, but best to communicate about specifics before assuming anything is complete.&lt;/li>
&lt;li>If you have pushed code to a remote branch without a pull request, it is assumed to be a work-in-progress where collaboration is unexpected.&lt;/li>
&lt;/ul>
&lt;p>A good workflow would be to work locally, pushing to a remote branch as you make progress, possibly open a draft PR for some initial collaboration on tricky parts, and once everything is done, convert the draft PR to a regular PR to be reviewed.&lt;/p>
&lt;h3 id="reviewing">Reviewing&lt;/h3>
&lt;p>The author and reviewer should use this &lt;a href="https://google.github.io/eng-practices/review/developer/">guide to code reviewing&lt;/a>.&lt;/p>
&lt;h3 id="updating-the-issue-with-what-you-actually-did">Updating The Issue With What You Actually Did&lt;/h3>
&lt;p>Add &lt;a href="https://github.com/medic/cht-core/labels">labels&lt;/a> to the GitHub issue as needed. At this stage, the two to look out for are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Breaking change&lt;/code>&lt;/li>
&lt;li>&lt;code>UI/UX&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Add a comment to the GitHub issue with what the final change actually was. This is important for multiple cases including:&lt;/p>
&lt;ul>
&lt;li>Non-technical people may not understand the conversation thread on the issue. GitHub is a place that developers work, but it is also common to send non-technical people links to issues in GitHub.&lt;/li>
&lt;li>The QA team should have a quick way to know where to start testing.&lt;/li>
&lt;li>Issues with a lot of discussion of alternative solutions need a clear resolution and indication of which route was taken.&lt;/li>
&lt;/ul>
&lt;p>Options for doing this:&lt;/p>
&lt;ul>
&lt;li>Attach a short video - these are usually very well received and can often help people understand what happened much more clearly than a text description.&lt;/li>
&lt;li>Screenshots - pictures with big arrows on them can quickly convey important things to look at. If you start to need multiple screenshots consider the video option instead.&lt;/li>
&lt;li>Write up a few sentences - be sure to consider a non-technical audience when writing this.&lt;/li>
&lt;/ul>
&lt;p>An example of a good thorough comment/template is as follows:&lt;/p>
&lt;pre>&lt;code>### Acceptance testing
1. Install branch `81-do-great-things`
2. [a specific thing to be sure it has been set up correctly]
3. ...
### What was actually built
[video|screenshots|text]
### Documentation
- [link](url)
&lt;/code>&lt;/pre>&lt;h3 id="testing">Testing&lt;/h3>
&lt;p>All features and bug fixes must have at least one unit test. All features must have at least one end-to-end test.&lt;/p>
&lt;p>Those are minimums. Our ultimate goal is to have fully-automated release testing, allowing for fast, confident delivery of completed code. If your work would be included in a release/regression test, create an e2e test for it. QA engineers will use that as a template of sorts to create additional automated tests at their discretion.&lt;/p>
&lt;h3 id="release-testing">Release Testing&lt;/h3>
&lt;p>The release testing suite covers a range of tests to check for any regressions, performance tests, and scalability tests. We have a &lt;a href="https://github.com/medic/cht-release-testing">release testing repository&lt;/a> with major workflows. Most issues have a step-by-step description or a link to some details for execution. At release testing time, create a &lt;a href="https://github.com/medic/cht-release-testing#generating-a-project-board-for-testing-a-release">project board&lt;/a> with all issues labelled &amp;lsquo;release&amp;rsquo;.
Start testing following instructions on the ticket. If the test passes move it to &lt;code>pass&lt;/code>. If it fails move it to &lt;code>fail&lt;/code>, raise an issue and notify the team. A decision will be made whether to halt the release (blocker) or schedule the fix for the next release. &lt;a href="https://github.com/medic/cht-release-testing/projects/101">Here&lt;/a> is a typical release test project with results in the &lt;a href="https://github.com/medic/cht-release-testing/issues/190#issuecomment-1032646259">comment section&lt;/a> on individual tickets.
As part of release testing, there is a &lt;a href="https://github.com/medic/cht-core/tree/master/tests/scalability">scalability test suite&lt;/a> to test the scalability of the CHT server so we can check what our limits are and ensure we don&amp;rsquo;t regress on performance. Initially it only tests replication but should be extended to test other APIs. The JMeter tests are run on an &lt;a href="https://github.com/medic/cht-core/tree/master/tests/scalability#running-tests-on-aws">AWS&lt;/a> install and a report is saved in an S3 bucket. We then compare results from previous runs and save a JTL file containing the results of the test run in the &lt;a href="https://github.com/medic/cht-core/tree/master/tests/scalability/previous_results">cht-core repository&lt;/a>.
We also do some &lt;a href="https://github.com/medic/cht-release-testing/issues/2">performance timing tests&lt;/a> in the browser and on devices, to monitor client side performance. Tests scenarios are outlined in a &lt;a href="https://docs.google.com/spreadsheets/d/13GW_gpZElcmW9AOs5r1EXwKligCDECdHVP_3aNcwqhw/edit#gid=1134415907">spreadsheet&lt;/a> and results are compared with previous releases.&lt;/p>
&lt;h3 id="migrating">Migrating&lt;/h3>
&lt;p>When the schema is changed you must also provide a migration so when instances are upgraded existing data is compatible with the new code.&lt;/p>
&lt;h2 id="commits">Commits&lt;/h2>
&lt;p>The main branch is &lt;code>master&lt;/code> which must be kept stable so as not to impact other developers and so we can take a release branch as needed. To achieve this we do (almost) all development in a branch and submit a PR for code review. This means the CI runs and another developer has signed off on the change before it hits the &lt;code>master&lt;/code> branch.&lt;/p>
&lt;p>Format your commit messages according to Git standards. First line should be a short title/summary (50 characters or so) with more details in a separate paragraph, respecting 79 character line widths. Using &lt;code>git commit -v&lt;/code> is recommended to review your diff while you write your commit message.&lt;/p>
&lt;p>See tips on &lt;a href="https://chris.beams.io/posts/git-commit/">How to Write a Git Commit Message&lt;/a> and add your favorites here.&lt;/p>
&lt;blockquote>
&lt;p>Every good commit message should be able to complete the following sentence:&lt;/p>
&lt;p>When applied, this commit will: {{YOUR COMMIT MESSAGE}}&lt;/p>
&lt;/blockquote>
&lt;p>Never force push remote. Prefer rebasing over merging as it makes for a cleaner history.&lt;/p>
&lt;p>Commit reformats and refactors separately from actual code changes to make reviewing easier.&lt;/p>
&lt;p>For more help with Git see: &lt;a href="https://git-scm.com/doc/ext">Using Git&lt;/a>.&lt;/p>
&lt;h2 id="branches">Branches&lt;/h2>
&lt;ul>
&lt;li>The main branch is &lt;code>master&lt;/code> and is the github default branch and contains the latest code.&lt;/li>
&lt;li>Release branches have the form &lt;code>&amp;lt;major&amp;gt;.&amp;lt;minor&amp;gt;.x&lt;/code> and should be stable.&lt;/li>
&lt;li>Feature branches have the form &lt;code>&amp;lt;issue-number&amp;gt;-&amp;lt;issue-description&amp;gt;&lt;/code> and are work in progress.&lt;/li>
&lt;/ul>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
When backporting changes to an earlier release branch you should &lt;code>git cherry-pick&lt;/code> the appropriate commit(s) from &lt;code>master&lt;/code> into the release branch. Then use a pull request to make sure tests pass on Travis before merging (you do not need to get the pull request approved if there were no conflicts when cherry-picking).
&lt;/div>
&lt;h2 id="issues">Issues&lt;/h2>
&lt;p>Issues are managed in Github. Issues should be created in the repository where the changes need to be made. If it is not clear in which repo to open an issue the default should be the &lt;code>cht-core&lt;/code> repository. If it is a security or sensitive issue it should be opened in the private &lt;code>medic-projects&lt;/code> repository.&lt;/p>
&lt;p>When creating issues add the appropriate &lt;a href="https://github.com/medic/medic/labels?utf8=%E2%9C%93&amp;amp;q=Priority%3A+">Priority&lt;/a> and &lt;a href="https://github.com/medic/medic/labels?utf8=%E2%9C%93&amp;amp;q=Type%3A+">Type&lt;/a> labels.&lt;/p>
&lt;h2 id="project-states">Project States&lt;/h2>
&lt;p>When the issue is scheduled for development it will be added to the appropriate &lt;a href="https://github.com/orgs/medic/projects?query=is%3Aopen+sort%3Aname-asc">organisation project&lt;/a> named after the webapp version it will be released with. Each column in the project represents the state the issue is in.&lt;/p>
&lt;h3 id="in-design">In design&lt;/h3>
&lt;p>The issue is scheduled for release in this version but it needs some investigation, scoping, or design work before it&amp;rsquo;s ready for a developer to pick up. Issues can be picked up by product owners and designers by assigning it to themselves. Once design is complete, move the issue to &amp;ldquo;Ready for dev&amp;rdquo;.&lt;/p>
&lt;h3 id="ready-for-dev">Ready for dev&lt;/h3>
&lt;p>Issues in this column have been scheduled to be released with this webapp version and are ready for development. The issue has all the detail needed to begin development and it is free for anyone to start work on. If you start work on an issue, assign it to yourself and move it to &amp;ldquo;Dev in progress&amp;rdquo;.&lt;/p>
&lt;h3 id="dev-in-progress">Dev in progress&lt;/h3>
&lt;p>Issues in this column are being actively worked on, which includes development, design, and code reviews.&lt;/p>
&lt;p>Any code should be in a feature branch in each of the repositories you update. The name of the feature branch should be in the form &lt;code>&amp;lt;issue-number&amp;gt;-&amp;lt;readable-name&amp;gt;&lt;/code>, for example &lt;code>1104-inclusive-export&lt;/code>. Once you&amp;rsquo;re satisfied with your changes:&lt;/p>
&lt;ol>
&lt;li>Submit a PR for each of the repositories. Each PR message and description will become the commit message and description so keep the message concise, describe what and why rather than how, and link to the issue in the description (eg: &amp;ldquo;medic/cht-core#123&amp;rdquo;).&lt;/li>
&lt;li>If AT is required update the issue with AT instructions.&lt;/li>
&lt;li>Wait for the builds to succeed and ensure there are no conflicts with the &lt;code>master&lt;/code> branch so the PR can be merged.&lt;/li>
&lt;li>Pick one Reviewer for the PR and work with them until the code passes review. In some special cases more than one Reviewer may be necessary, but be specific about additional Reviewers and ensure you really need each of their additional reviews for a good reason. Remember, anyone can always collaborate on PRs even if they aren&amp;rsquo;t an official Reviewer.&lt;/li>
&lt;li>If the issue requires AT then move the issue to &amp;ldquo;Ready for AT&amp;rdquo; for QA to test. Otherwise merge the PR, delete the branch, and close the issue.&lt;/li>
&lt;/ol>
&lt;h3 id="ready-for-at">Ready for AT&lt;/h3>
&lt;p>Issues in this column are ready to be acceptance tested by a Quality Assurance engineer. When picking up an issue for AT:&lt;/p>
&lt;ol>
&lt;li>Check that the PR has no merge conflicts with &lt;code>master&lt;/code> and all required builds have passed. If not, notify the original developer to fix the branch and find another issue to AT.&lt;/li>
&lt;li>Assign it to yourself.&lt;/li>
&lt;li>Move it to the &amp;ldquo;AT in progress&amp;rdquo; column&lt;/li>
&lt;/ol>
&lt;h3 id="at-in-progress">AT in progress&lt;/h3>
&lt;p>Issues in this column are in the process of being acceptance tested by a Quality Assurance engineer. To complete AT:&lt;/p>
&lt;ol>
&lt;li>Add or verify steps used to reproduce or execute the bug, feature, or improvement described in the ticket.&lt;/li>
&lt;li>Install the PR branch to test against.&lt;/li>
&lt;li>If the issue fails AT then notify the original developer and move the issue back to &amp;ldquo;Dev in progress&amp;rdquo;.&lt;/li>
&lt;li>Once the issue passes AT
&lt;ol>
&lt;li>Document Data used. EX: Seed Data, cloned data, no data&lt;/li>
&lt;li>Document Config used or changes to existing config. Add to ticket for use later if need be.&lt;/li>
&lt;li>How was the issue verified? Console logs, page source, errors anywhere, execution steps. LGTM should begin to be rarely used.&lt;/li>
&lt;li>move the issue to &amp;ldquo;Ready to merge&amp;rdquo; the notify the original developer to merge the PR.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="ready-to-merge">Ready to merge&lt;/h3>
&lt;p>Issues in this column have passed AT and can be merged as soon as possible. The original developer will then:&lt;/p>
&lt;ol>
&lt;li>Write a useful commit message in the PR.&lt;/li>
&lt;li>Click the button to &amp;ldquo;Squash and Merge&amp;rdquo; the PR.&lt;/li>
&lt;li>Delete the PR branch.&lt;/li>
&lt;li>If a backport is required cherry-pick the merged commit back to the release branches it&amp;rsquo;s required in.&lt;/li>
&lt;li>Close the issue. This will automatically move it to &amp;ldquo;Done&amp;rdquo;.&lt;/li>
&lt;/ol>
&lt;h3 id="done">Done&lt;/h3>
&lt;p>Issues in this column have passed acceptance testing and been merged into &lt;code>master&lt;/code> and/or release branches ready for release.&lt;/p>
&lt;h2 id="triaging-old-issues">Triaging old issues&lt;/h2>
&lt;p>We periodically run a &lt;a href="https://github.com/medic/github-issue-roulette">script&lt;/a> against medic issues. We do this to catch two situations:&lt;/p>
&lt;ul>
&lt;li>Issues that do not have the three labels they need (Type, Priority and Status)&lt;/li>
&lt;li>Issues that have not been touched in 90 days&lt;/li>
&lt;/ul>
&lt;p>The plan is to keep cruft in our issue DB to a minimum, and have them curated into a colletion of detailed clear issues that can and should be actionable in the near to mid future.&lt;/p>
&lt;p>You will occasionally get assigned issues and asked to deal with one or both of the above problems.&lt;/p>
&lt;h3 id="what-do-i-do-when-i-get-one-of-these-issues">What do I do when I get one of these issues?&lt;/h3>
&lt;p>Use your judgement (or someone else&amp;rsquo;s, feel free to pull in others either directly on the issue or via Slack etc) to decide:&lt;/p>
&lt;ul>
&lt;li>Is its description too vague? Is it detailed enough to be actionable?&lt;/li>
&lt;li>Is this something we want to do &lt;strong>in the near future&lt;/strong>? Does it fit with our product etc?&lt;/li>
&lt;li>If this is an older issue, do you think it is still relevant? Is there still interest? (If there is no interest it can be closed: it can always be re-opened or re-written in the future)&lt;/li>
&lt;li>Is this covered by existing issues, or existing plans?&lt;/li>
&lt;li>If it&amp;rsquo;s a bug, does it have: steps to reproduce; expected behaviour; actual behaviour; server info, browser info, screenshots etc where applicable?&lt;/li>
&lt;/ul>
&lt;p>From this decide if you need to go back to the issue creator for more information, or close the issue (using one of the &lt;code>Won't Fix&lt;/code> labels), or keep it.&lt;/p>
&lt;p>Additionally, if there are missing labels:&lt;/p>
&lt;ul>
&lt;li>Type should be reasonably obvious: which of those labels most fits the issue&lt;/li>
&lt;li>Status should almost certainly be &lt;code>Status: 1 - Triaged&lt;/code>&lt;/li>
&lt;li>Priority is dependent on the severity of the problem: if it&amp;rsquo;s a production issue it&amp;rsquo;s probably high, if it&amp;rsquo;s a minor thing it&amp;rsquo;s probably low, medium for everything else (but use your judgement)&lt;/li>
&lt;/ul>
&lt;h3 id="anything-else">Anything else?&lt;/h3>
&lt;p>Regardless of what you do with the issue, please:&lt;/p>
&lt;ul>
&lt;li>Remove the &lt;code>Needs Triage&lt;/code> label once triage is complete&lt;/li>
&lt;li>Document the reasoning by commenting in the issue. This will help reduce mistakes, as the reasoning will be available for everyone to read, and any mistakes there can be rectified.&lt;/li>
&lt;/ul></description></item><item><title>Contribute: Code of Conduct</title><link>https://docs.communityhealthtoolkit.org/contribute/code-of-conduct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/code-of-conduct/</guid><description>
&lt;p>All maintainers and contributors in this community are required to act according to the following Code of Conduct. These guidelines help steer our interactions and help us provide and ensure a safe environment for everyone.&lt;/p>
&lt;h2 id="our-standards">Our Standards&lt;/h2>
&lt;p>Examples of behavior that contributes to creating a positive environment
include:&lt;/p>
&lt;ul>
&lt;li>Using welcoming and inclusive language&lt;/li>
&lt;li>Being respectful of differing viewpoints and experiences&lt;/li>
&lt;li>Gracefully accepting constructive criticism&lt;/li>
&lt;li>Focusing on what is best for the community&lt;/li>
&lt;li>Showing empathy towards other community members&lt;/li>
&lt;/ul>
&lt;p>Examples of unacceptable behavior by participants include:&lt;/p>
&lt;ul>
&lt;li>The use of sexualized language or imagery and unwelcome sexual attention or
advances&lt;/li>
&lt;li>Trolling, insulting/derogatory comments, and personal or political attacks&lt;/li>
&lt;li>Public or private harassment&lt;/li>
&lt;li>Publishing others&amp;rsquo; private information, such as a physical or electronic
address, without explicit permission&lt;/li>
&lt;li>Other conduct which could reasonably be considered inappropriate in a
professional setting&lt;/li>
&lt;/ul>
&lt;h2 id="our-responsibilities">Our Responsibilities&lt;/h2>
&lt;p>Project maintainers are responsible for clarifying the standards of acceptable
behavior and are expected to take appropriate and fair corrective action in
response to any instances of unacceptable behavior.&lt;/p>
&lt;p>Project maintainers have the right and responsibility to remove, edit, or
reject comments, commits, code, wiki edits, issues, and other contributions
that are not aligned to this Code of Conduct, or to ban temporarily or
permanently any contributor for other behaviors that they deem inappropriate,
threatening, offensive, or harmful.&lt;/p>
&lt;h2 id="enforcement">Enforcement&lt;/h2>
&lt;p>Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported by contacting the community manager at &lt;a href="mailto:hello@medic.org">hello@medic.org&lt;/a>. All
complaints will be reviewed and investigated and will result in a response that
is deemed necessary and appropriate to the circumstances. The project team is
obligated to maintain confidentiality with regard to the reporter of an incident.
Further details of specific enforcement policies may be posted separately.&lt;/p>
&lt;p>Project maintainers who do not follow or enforce the Code of Conduct in good
faith may face temporary or permanent repercussions as determined by other
members of the project&amp;rsquo;s leadership.&lt;/p>
&lt;h2 id="attribution">Attribution&lt;/h2>
&lt;p>This Code of Conduct is adapted from the Contributor Covenant, &lt;a href="https://www.contributor-covenant.org/version/1/4/code-of-conduct.html">version 1.4&lt;/a>. For answers to common questions about this code of conduct, see &lt;a href="https://www.contributor-covenant.org/faq">https://www.contributor-covenant.org/faq&lt;/a>&lt;/p></description></item><item><title>Contribute: Coding Style Guide</title><link>https://docs.communityhealthtoolkit.org/contribute/code/style-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/code/style-guide/</guid><description>
&lt;p>This is a guide, not a law - use your discretion. Mostly based on &lt;a href="https://github.com/felixge/node-style-guide">Felix Geisendörfer&amp;rsquo;s&lt;/a> guide with our own tweaks.&lt;/p>
&lt;h2 id="indention">Indention&lt;/h2>
&lt;p>Use 2 spaces for indenting your code and swear an oath to never mix tabs and
spaces - a special kind of hell is awaiting you otherwise.&lt;/p>
&lt;h2 id="newlines">Newlines&lt;/h2>
&lt;p>Use UNIX-style newlines (&lt;code>\n&lt;/code>), and a newline character as the last character
of a file. Windows-style newlines (&lt;code>\r\n&lt;/code>) are forbidden inside any repository.&lt;/p>
&lt;h2 id="no-trailing-whitespace">No trailing whitespace&lt;/h2>
&lt;p>Just like you brush your teeth after every meal, you clean up any trailing
whitespace in your JS files before committing. Otherwise the rotten smell of
careless neglect will eventually drive away contributors and/or co-workers.&lt;/p>
&lt;h2 id="use-semicolons">Use Semicolons&lt;/h2>
&lt;p>According to &lt;a href="http://news.ycombinator.com/item?id=1547647">scientific research&lt;/a>, the usage of semicolons is
a core value of our community. Consider the points of &lt;a href="http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding">the opposition&lt;/a>, but
be a traditionalist when it comes to abusing error correction mechanisms for
cheap syntactic pleasures.&lt;/p>
&lt;h2 id="use-single-quotes">Use single quotes&lt;/h2>
&lt;p>Use single quotes, unless you are writing JSON.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;bar&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;bar&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="opening-braces-go-on-the-same-line">Opening braces go on the same line&lt;/h2>
&lt;p>Your opening braces go on the same line as the statement, with whitespace before and after the condition, followed by a new line.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;winning&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;losing&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;losing&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
&lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;winning&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="method-chaining">Method chaining&lt;/h2>
&lt;p>One method per line should be used if you want to chain methods.&lt;/p>
&lt;p>You should also indent these methods so it&amp;rsquo;s easier to tell they are part of the same chain.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#000">User&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">findOne&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span> &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;foo&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">populate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;bar&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">exec&lt;/span>&lt;span style="color:#000;font-weight:bold">(()&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#000">User&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">findOne&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span> &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;foo&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">populate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;bar&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">exec&lt;/span>&lt;span style="color:#000;font-weight:bold">(()&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">User&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">findOne&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span> &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;foo&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">populate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;bar&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">exec&lt;/span>&lt;span style="color:#000;font-weight:bold">(()&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">User&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">findOne&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span> &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;foo&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">}).&lt;/span>&lt;span style="color:#000">populate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;bar&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">exec&lt;/span>&lt;span style="color:#000;font-weight:bold">(()&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">User&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">findOne&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span> &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;foo&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">}).&lt;/span>&lt;span style="color:#000">populate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;bar&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">exec&lt;/span>&lt;span style="color:#000;font-weight:bold">(()&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="use-lowercamelcase-for-variables-properties-and-function-names">Use lowerCamelCase for variables, properties, and function names&lt;/h2>
&lt;p>Variables, properties and function names should use &lt;code>lowerCamelCase&lt;/code>. They
should also be descriptive. Single character variables and uncommon
abbreviations should generally be avoided.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">adminUser&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">query&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">admin_user&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">query&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="use-uppercamelcase-for-class-names">Use UpperCamelCase for class names&lt;/h2>
&lt;p>Class names should be capitalized using &lt;code>UpperCamelCase&lt;/code>.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">BankAccount&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">bank_Account&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="use-snake_case-for-couchdb-document-property-names">Use snake_case for CouchDB document property names&lt;/h2>
&lt;p>All property names in CouchDB documents use lowercase underscore-separated formatting.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;word&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;values can have spaces and CAPS&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;multiple_words&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;UPPER_CASE_NAME&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;lowercasename&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;camelCaseName&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;kebab-case-name&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;Title_case_name&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;sTuDlYcAsEnAmE&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="use-const-and-let">Use &lt;code>const&lt;/code> and &lt;code>let&lt;/code>&lt;/h2>
&lt;p>There is no longer a good reason to use &lt;code>var&lt;/code>. Use &lt;code>const&lt;/code> whenever you can,
and &lt;code>let&lt;/code> when you must. Hardcoded constants should be named in all UPPERCASE.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">DELAY&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">output&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">input&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">let&lt;/span> &lt;span style="color:#000">temp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">50&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">let&lt;/span> &lt;span style="color:#000">unknown&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">DELAY&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="use-arrow-functions">Use arrow functions&lt;/h2>
&lt;p>Use arrow functions as much as possible for cleaner code and better scoping. Omit the
return keyword when the entire function definition fits on one line. Omit the parens
when taking a single parameter.&lt;/p>
&lt;p>There are exceptions to this rule including when you want to access &lt;code>arguments&lt;/code> or
&lt;code>this&lt;/code>, or when you want to be able to debug browserified code.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">let&lt;/span> &lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">append&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">combine&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">getResult&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000">result&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">let&lt;/span> &lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">append&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">combine&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">function&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">getResult&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span>
&lt;span style="color:#000">result&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="object--array-creation">Object / Array creation&lt;/h2>
&lt;p>Put short declarations on a single line. For long declarations put a line
break after each comma.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;hello&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;world&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">good&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;code&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;is generally&amp;#39;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;pretty&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;hello&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;world&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;good&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;code&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">is&lt;/span> &lt;span style="color:#000">generally&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;pretty&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;one&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;two&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;three&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;four&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="use-the--operator">Use the === operator&lt;/h2>
&lt;p>Programming is not about remembering &lt;a href="https://developer.mozilla.org/en/JavaScript/Reference/Operators/Comparison_Operators">stupid rules&lt;/a>. Use
the triple equality operator as it will work just as expected.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!==&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;winning&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;losing&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="do-not-extend-built-in-prototypes">Do not extend built-in prototypes&lt;/h2>
&lt;p>Do not extend the prototype of native JavaScript objects. Your future self will be forever grateful.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[];&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">length&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;winning&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87">Array&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">prototype&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">empty&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">function&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">length&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[];&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">empty&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;losing&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="use-descriptive-conditions">Use descriptive conditions&lt;/h2>
&lt;p>Any non-trivial conditions should be assigned to a descriptively named variable or function:&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">isValidPassword&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">password&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">length&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#4e9a06">/^(?=.*\d).{4,}$/&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">test&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">password&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">isValidPassword&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;winning&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">password&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">length&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#4e9a06">/^(?=.*\d).{4,}$/&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">test&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">password&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;losing&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="write-small-functions">Write small functions&lt;/h2>
&lt;p>Keep your functions short. A good function fits on a slide that the people in
the last row of a big room can comfortably read. So don&amp;rsquo;t count on them having
perfect vision and limit yourself to ~15 lines of code per function.&lt;/p>
&lt;h2 id="return-early-from-functions">Return early from functions&lt;/h2>
&lt;p>To avoid deep nesting of if-statements, always return a function&amp;rsquo;s value as early
as possible.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">isPercentage&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">val&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">val&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">val&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">isPercentage&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">val&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">val&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">val&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or for this particular example it may also be fine to shorten things even
further:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">isPercentage&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">val&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">isInRange&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">val&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">val&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">isInRange&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="avoid-reduce">Avoid reduce&lt;/h2>
&lt;p>Most uses of reduce have more readable alternatives.&lt;/p>
&lt;p>When supporting older browsers and node versions where some features aren&amp;rsquo;t available &lt;code>reduce&lt;/code> can still be useful but its use should be hidden behind a utility function or polyfill to help readability and make it easier to replace later.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">properties&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[];&lt;/span>
&lt;span style="color:#000">elements&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">forEach&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">elem&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">properties&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">push&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">elem&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">elem&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">properties&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">elements&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">reduce&lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#000">properties&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">elem&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">properties&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">concat&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">elem&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">elem&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span> &lt;span style="color:#000;font-weight:bold">[]);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Refer to &lt;a href="https://youtu.be/qaGjS7-qWzg">this YouTube video&lt;/a> for more examples.&lt;/p>
&lt;h2 id="adding-documentation-comments">Adding documentation comments&lt;/h2>
&lt;p>To add documentation comments that will be built using jsdocs, use
&lt;a href="https://jsdoc.app/">jsdoc block tags&lt;/a>. For angular code use the
&lt;a href="https://www.npmjs.com/package/angular-jsdoc#tags-available">angular tags&lt;/a>, see
&lt;a href="https://www.npmjs.com/package/angular-jsdoc#example">examples&lt;/a>.&lt;/p>
&lt;p>Try to write comments that explain higher level mechanisms or clarify
difficult segments of your code. Don&amp;rsquo;t use comments to restate trivial
things.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * &amp;#39;ID_SOMETHING=VALUE&amp;#39; -&amp;gt; [&amp;#39;ID_SOMETHING=VALUE&amp;#39;, &amp;#39;SOMETHING&amp;#39;, &amp;#39;VALUE&amp;#39;]
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * @type {boolean}
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">matches&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">item&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">match&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">/ID_([^\n]+)=([^\n]+)/&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * Loads a user. This function has a nasty side effect where a failure to increment a
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * redis counter used for statistics will cause an exception. This needs
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * to be fixed in a later iteration.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * @param {string} id the user id
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * @param {function} cb a callback function that applied to the user
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">loadUser&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">cb&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000;font-weight:bold">...&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * Execute a regex
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">matches&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">item&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">match&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">/ID_([^\n]+)=([^\n]+)/&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * Usage: loadUser(5, function() { ... })
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">loadUser&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">cb&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000;font-weight:bold">...&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * Check if the session is valid
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">isSessionValid&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">session&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">expires&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#204a87">Date&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">now&lt;/span>&lt;span style="color:#000;font-weight:bold">());&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/** If the session is valid */&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">isSessionValid&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000;font-weight:bold">...&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="objectfreeze-objectpreventextensions-objectseal-with-eval">Object.freeze, Object.preventExtensions, Object.seal, with, eval&lt;/h2>
&lt;p>Crazy stuff that you will probably never need. Stay away from it.&lt;/p>
&lt;h2 id="getters-and-setters">Getters and setters&lt;/h2>
&lt;p>Do not use setters, they cause more problems for people who try to use your
software than they can solve.&lt;/p>
&lt;p>Feel free to use getters that are free from &lt;a href="http://en.wikipedia.org/wiki/Side_effect_(computer_science)">side effects&lt;/a>, like
providing a length property for a collection class.&lt;/p>
&lt;h2 id="npm-dependencies">NPM Dependencies&lt;/h2>
&lt;p>When picking version ranges we set an exact minimum version and an upper limit of the next major. This makes it easy to update dependencies without hitting breaking changes. In NPM this is done by using the &lt;code>^&lt;/code> character which is the default setting for NPM.&lt;/p>
&lt;p>Occasionally it is required to set an exact version to avoid an undeclared breaking change or some other issue, in this case the dependency can be specified exactly.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;quot;^6.5.3&amp;quot;&lt;/code> - preferred&lt;/li>
&lt;li>&lt;code>&amp;quot;6.5.3&amp;quot;&lt;/code> - if required&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;quot;&amp;gt;6.5.3&amp;quot;&lt;/code> - risks picking up breaking changes in the next major&lt;/li>
&lt;li>&lt;code>&amp;quot;*&amp;quot;&lt;/code> - as above but also doesn&amp;rsquo;t specify a minimum&lt;/li>
&lt;li>&lt;code>&amp;quot;~6.5.3&amp;quot;&lt;/code> - too restrictive on the upper limit&lt;/li>
&lt;/ul>
&lt;h2 id="github-actions">Github Actions&lt;/h2>
&lt;h3 id="managing-secrets">Managing Secrets&lt;/h3>
&lt;p>Secrets are encrypted for use for things like passwords or API keys and can be added at the org or repository level. They must be added by an admin.&lt;/p>
&lt;p>To access a secret you can use this format in your yml.&lt;/p>
&lt;pre>&lt;code>steps:
- name: My first action
env:
GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
FIRST_NAME: Mona
LAST_NAME: Octocat
&lt;/code>&lt;/pre>&lt;p>See the full &lt;a href="https://docs.github.com/en/actions/reference/encrypted-secrets">documentation&lt;/a> on Github&amp;rsquo;s site.&lt;/p>
&lt;h3 id="third-party-actions">Third Party Actions&lt;/h3>
&lt;p>Actions allow us to leverage code written by others to do tasks at build time. The concept is similar to NPM and packages.&lt;/p>
&lt;p>Follow the github actions best practices for security purposes. The main points in the security best &lt;a href="https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#using-third-party-actions">practices documents&lt;/a> are&lt;/p>
&lt;ol>
&lt;li>Pin actions to a full length commit SHA so any malicious or buggy updates are not silently included&lt;/li>
&lt;li>Audit the source code of the action&lt;/li>
&lt;li>Pin actions to a tag only if you trust the creator&lt;/li>
&lt;/ol></description></item><item><title>Contribute: Documentation Style Guide</title><link>https://docs.communityhealthtoolkit.org/contribute/docs/style-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/contribute/docs/style-guide/</guid><description>
&lt;p>This style guide provides a set of editorial guidelines for anyone writing documentation for Community Health Toolkit projects. These are guidelines, not rules. Use your best judgment.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
This documentation site does not involve release management and acceptance testing. Help us maintain the quality of our documentation by submiting a pull request (PR) with any suggested changes. One of the repository&amp;rsquo;s maintainers will review the PR, request additional changes as needed, and merge the PR when it is ready.
&lt;/div>
&lt;h2 id="table-of-contents">Table of Contents&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#table-of-contents">Table of Contents&lt;/a>&lt;/li>
&lt;li>&lt;a href="#language">Language&lt;/a>&lt;/li>
&lt;li>&lt;a href="#general-guidelines-and-best-practices">General guidelines and best practices&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#present-tense">Present tense&lt;/a>&lt;/li>
&lt;li>&lt;a href="#active-voice">Active voice&lt;/a>&lt;/li>
&lt;li>&lt;a href="#simple-and-direct-language">Simple and direct language&lt;/a>&lt;/li>
&lt;li>&lt;a href="#address-the-reader-as-you">Address the reader as &amp;ldquo;you&amp;rdquo;&lt;/a>&lt;/li>
&lt;li>&lt;a href="#latin-phrases">Latin phrases&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#practices-to-avoid">Practices to avoid&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#using-we">Using &amp;ldquo;we&amp;rdquo;&lt;/a>&lt;/li>
&lt;li>&lt;a href="#using-jargon-and-idioms">Using jargon and idioms&lt;/a>&lt;/li>
&lt;li>&lt;a href="#using-statements-about-the-future">Using statements about the future&lt;/a>&lt;/li>
&lt;li>&lt;a href="#using-statements-that-will-soon-be-out-of-date">Using statements that will soon be out of date&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#cross-referencing-content">Cross-referencing content&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#avoid-broken-links">Avoid broken links&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#formatting-standards">Formatting standards&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#use-markdown-notation">Use Markdown Notation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#grammar-and-punctuation-in-headers">Grammar and punctuation in headers&lt;/a>&lt;/li>
&lt;li>&lt;a href="#angle-brackets-for-placeholders">Angle brackets for placeholders&lt;/a>&lt;/li>
&lt;li>&lt;a href="#bold-for-user-interface-elements">Bold for user interface elements&lt;/a>&lt;/li>
&lt;li>&lt;a href="#italics-to-define-or-introduce-new-terms">Italics to define or introduce new terms&lt;/a>&lt;/li>
&lt;li>&lt;a href="#code-style-for-filenames-directories-and-paths">Code style for filenames, directories, and paths&lt;/a>&lt;/li>
&lt;li>&lt;a href="#british-standard-for-punctuation-inside-quotes">British standard for punctuation inside quotes&lt;/a>&lt;/li>
&lt;li>&lt;a href="#notes-and-tips">Notes and tips&lt;/a>&lt;/li>
&lt;li>&lt;a href="#images">Images&lt;/a>&lt;/li>
&lt;li>&lt;a href="#videos">Videos&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#inline-code-formatting">Inline code formatting&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#code-style-for-inline-code-and-commands">Code style for inline code and commands&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#code-snippet-formatting">Code snippet formatting&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#dont-include-the-command-prompt">Don&amp;rsquo;t include the command prompt&lt;/a>&lt;/li>
&lt;li>&lt;a href="#separate-commands-from-output">Separate commands from output&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#community-health-toolkit-word-list">Community Health Toolkit word list&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="language">Language&lt;/h2>
&lt;p>Documentation for the Community Health Toolkit is written is American English.&lt;/p>
&lt;h2 id="general-guidelines-and-best-practices">General guidelines and best practices&lt;/h2>
&lt;p>This section contains suggested best practices for clear, concise, and consistent content.&lt;/p>
&lt;h3 id="present-tense">Present tense&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Do&lt;/th>
&lt;th>Don&amp;rsquo;t&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>CouchDB converts this to a properly hashed password when you save.&lt;/td>
&lt;td>CouchDB will convert this to a properly hashed password on save.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Exception: Use future or past tense if it is required to convey the correct meaning.&lt;/p>
&lt;h3 id="active-voice">Active voice&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Do&lt;/th>
&lt;th>Don&amp;rsquo;t&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Stop everything and delete the medic DB to clear your database.&lt;/td>
&lt;td>Clear your db by stopping everything and deleting the medic DB.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Replicate your local production database into a new medic database to bootstrap your data.&lt;/td>
&lt;td>Bootstrap your data by replicating your local PROD DB into a new medic database.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Exception: Use passive voice if active voice leads to an awkward construction.&lt;/p>
&lt;h3 id="simple-and-direct-language">Simple and direct language&lt;/h3>
&lt;p>Use simple and direct language. Avoid using unnecessary phrases, such as saying &amp;ldquo;please.&amp;rdquo;&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Do&lt;/th>
&lt;th>Don&amp;rsquo;t&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>To create a database, &amp;hellip;&lt;/td>
&lt;td>In order to create a database, &amp;hellip;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>See the configuration file.&lt;/td>
&lt;td>Please see the configuration file.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>View the logs.&lt;/td>
&lt;td>With this next command, we&amp;rsquo;ll view the logs.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="address-the-reader-as-you">Address the reader as &amp;ldquo;you&amp;rdquo;&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Do&lt;/th>
&lt;th>Don&amp;rsquo;t&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>You can create a database by &amp;hellip;&lt;/td>
&lt;td>We&amp;rsquo;ll create a database by &amp;hellip;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>In the preceding output, you can see&amp;hellip;&lt;/td>
&lt;td>In the preceding output, we can see &amp;hellip;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="latin-phrases">Latin phrases&lt;/h3>
&lt;p>Prefer English terms over Latin abbreviations.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Do&lt;/th>
&lt;th>Don&amp;rsquo;t&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>For example, &amp;hellip;&lt;/td>
&lt;td>e.g., &amp;hellip;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>That is, &amp;hellip;&lt;/td>
&lt;td>i.e., &amp;hellip;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Exception: Use &amp;ldquo;etc.&amp;rdquo; for et cetera.&lt;/p>
&lt;h2 id="practices-to-avoid">Practices to avoid&lt;/h2>
&lt;h3 id="using-we">Using &amp;ldquo;we&amp;rdquo;&lt;/h3>
&lt;p>Using &amp;ldquo;we&amp;rdquo; in a sentence can be confusing, because the reader might not know
whether they&amp;rsquo;re part of the &amp;ldquo;we&amp;rdquo; you&amp;rsquo;re describing.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Do&lt;/th>
&lt;th>Don&amp;rsquo;t&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Version 3.0 includes &amp;hellip;&lt;/td>
&lt;td>In version 3.0, we have added &amp;hellip;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Medic provides a new feature to reduce the time to load contacts.&lt;/td>
&lt;td>We made several changes to reduce the time to load contacts.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>This page teaches you how to use cht-gateway.&lt;/td>
&lt;td>In this page, we are going to learn about cht-gateway.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="using-jargon-and-idioms">Using jargon and idioms&lt;/h3>
&lt;p>Some readers speak English as a second language. Avoid jargon and idioms to help them understand better.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Do&lt;/th>
&lt;th>Don&amp;rsquo;t&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>To get started, &amp;hellip;&lt;/td>
&lt;td>To get up and running with no fuss, &amp;hellip;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Internally, &amp;hellip;&lt;/td>
&lt;td>Under the hood, &amp;hellip;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Create a new database.&lt;/td>
&lt;td>Turn up a new database.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="using-statements-about-the-future">Using statements about the future&lt;/h3>
&lt;p>Avoid giving hints about the future. If you need to talk about
an alpha or beta feature, put the text under a heading that identifies it as alpha or beta
information.&lt;/p>
&lt;h3 id="using-statements-that-will-soon-be-out-of-date">Using statements that will soon be out of date&lt;/h3>
&lt;p>Avoid words like &amp;ldquo;currently&amp;rdquo; and &amp;ldquo;new.&amp;rdquo; A feature that is new today might not be
considered new in a few months.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Do&lt;/th>
&lt;th>Don&amp;rsquo;t&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>In version 3.4, &amp;hellip;&lt;/td>
&lt;td>In the current version, &amp;hellip;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>The Log user statistics feature provides &amp;hellip;&lt;/td>
&lt;td>The new Log user statistics feature provides &amp;hellip;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="cross-referencing-content">Cross-referencing content&lt;/h2>
&lt;p>Connecting readers to related content in different pages is an important aspect of documentation. There are three ways this can be done in the doc site:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Inline links&lt;/strong>: a portion of any narrative text can link to another page. This should done using the markdown link notation.&lt;/p>
&lt;p>For example, the text &lt;code>linking documents is a [foundational reason for the web existing in the first place](https://en.wikipedia.org/wiki/Hypertext)!&lt;/code> yields: &amp;ldquo;linking documents is a &lt;a href="https://en.wikipedia.org/wiki/Hypertext">foundational reason for the web existing in the first place&lt;/a>!&amp;rdquo;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>See Also&lt;/strong>: the &lt;code>see-also&lt;/code> shortcode is available to connect to an important concept within the documentation site. The link will be more prominent to the reader by having a common prefix and shown on a separate line.&lt;/p>
&lt;p>For example, &lt;code>{{&amp;lt; see-also page=&amp;quot;design/icons&amp;quot; &amp;gt;}}&lt;/code> will show as seen here:
&lt;p>&lt;em>See Also&lt;/em>: &lt;a href="https://docs.communityhealthtoolkit.org/design/icons/">Icon Library&lt;/a>&lt;/p>
&lt;/p>
&lt;p>You can also make the callout say &amp;ldquo;Read More&amp;rdquo; with the &lt;code>prefix&lt;/code> tag: &lt;code>{{&amp;lt; see-also prefix=&amp;quot;Read More&amp;quot; page=&amp;quot;design/icons&amp;quot; &amp;gt;}}&lt;/code>. This will show as seen here:
&lt;p>&lt;em>Read More&lt;/em>: &lt;a href="https://docs.communityhealthtoolkit.org/design/icons/">Icon Library&lt;/a>&lt;/p>
&lt;/p>
&lt;p>A custom title and anchor can be provided as well. For example, &lt;code>{{&amp;lt; see-also page=&amp;quot;design/icons&amp;quot; title=&amp;quot;Learn about the Icon Library&amp;quot; anchor=&amp;quot;about-the-icon-library&amp;quot; &amp;gt;}}&lt;/code>, will show as:
&lt;p>&lt;em>See Also&lt;/em>: &lt;a href="https://docs.communityhealthtoolkit.org/design/icons/#about-the-icon-library">Learn about the Icon Library&lt;/a>&lt;/p>
&lt;/p>
&lt;p>Please use &lt;code>see-also&lt;/code> when referencing &lt;em>related topics&lt;/em> , as seen in &lt;a href="https://docs.communityhealthtoolkit.org/apps/concepts/workflows/">Workflows&lt;/a>, and use &lt;code>read-more&lt;/code> when referencing the &lt;em>same topic&lt;/em> in more depth, as in the &lt;a href="https://docs.communityhealthtoolkit.org/">Home Page&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Related Content&lt;/strong>: Pages within the documentation site are often closely related, but are separated by the type of content. For instance, a topic may be described in the features, have an implementation guide, and have best practices in the design system. To make this linkage easier for documentation writers and readers, a &amp;ldquo;Related Content&amp;rdquo; section can be shown at the bottom of the page. Each page defines it&amp;rsquo;s own related content as &lt;code>relatedContent&lt;/code> in its front matter. For example, a page with the following front matter would have two pages shown as &lt;em>Related Content&lt;/em>.&lt;/p>
&lt;pre>&lt;code>---
title: Messaging
relatedContent: &amp;gt;
apps/guides/messaging/
design/apps/
---
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;h3 id="avoid-broken-links">Avoid broken links&lt;/h3>
&lt;p>To avoid broken links always use &lt;code>ref&lt;/code> or &lt;code>relref&lt;/code> shortcodes for internal references with the full path for the page. Check out the &lt;a href="https://gohugo.io/content-management/cross-references/">Hugo documentation for cross-references&lt;/a> for more details.&lt;/p>
&lt;p>For example, &lt;code>[Icon Library]({{&amp;lt; relref &amp;quot;design/icons&amp;quot; &amp;gt;}})&lt;/code> yields &amp;ldquo;&lt;a href="https://docs.communityhealthtoolkit.org/design/icons/">Icon Library&lt;/a>&amp;quot;. Using the full path will avoid ambiguous references if a new page of the same is created.&lt;/p>
&lt;h3 id="link-paragraphs-not-titles">Link paragraphs, not titles&lt;/h3>
&lt;p>Whether using &lt;code>ref&lt;/code> ,&lt;code>relref&lt;/code> or inline links, do not link a title:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Do&lt;/th>
&lt;th>Don&amp;rsquo;t&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code> Read more about [InnoDB here](https://en.wikipedia.org/wiki/InnoDB).&lt;/code>&lt;/td>
&lt;td>&lt;code>## [InnoDB here](https://en.wikipedia.org/wiki/InnoDB)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>The [Icon Library]({{&amp;lt; relref &amp;quot;design/icons&amp;quot; &amp;gt;}}) has many great icons.&lt;/code>&lt;/td>
&lt;td>&lt;code>## [Icon Library]({{&amp;lt; relref &amp;quot;design/icons&amp;quot; &amp;gt;}})&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="formatting-standards">Formatting standards&lt;/h2>
&lt;h3 id="use-markdown-notation">Use Markdown Notation&lt;/h3>
&lt;p>Documentation pages should be written in &lt;a href="https://www.markdownguide.org/">Markdown notation&lt;/a>, and not contain HTML tags whenever possible.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Style&lt;/th>
&lt;th>Do&lt;/th>
&lt;th>Don&amp;rsquo;t&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;em>italic&lt;/em>&lt;/td>
&lt;td>&lt;code>_italic_&lt;/code> or &lt;code>*italic*&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;i&amp;gt;italic&amp;lt;/i&amp;gt;&lt;/code> or &lt;code>&amp;lt;em&amp;gt;bold&amp;lt;/em&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>bold&lt;/strong>&lt;/td>
&lt;td>&lt;code>**bold**&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt;&lt;/code> or &lt;code>&amp;lt;strong&amp;gt;bold&amp;lt;/strong&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>table&lt;/td>
&lt;td>&lt;code>|...|&lt;/code> using &lt;a href="https://www.markdownguide.org/extended-syntax/#tables">markdown tables&lt;/a>&lt;/td>
&lt;td>&lt;code>&amp;lt;table&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;...&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="tabular-schedules">Tabular schedules&lt;/h3>
&lt;p>Displaying the occurrence of events over time in a workflow is often done using a table. To keep these consistent we recommend using the tabular schedule format.&lt;/p>
&lt;p>For example, here is a sample vaccination schedules:&lt;/p>
&lt;div class="schedule">&lt;/div>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>6m&lt;/th>
&lt;th>12m&lt;/th>
&lt;th>18m&lt;/th>
&lt;th>2y&lt;/th>
&lt;th>2.5y&lt;/th>
&lt;th>3y&lt;/th>
&lt;th>3.5y&lt;/th>
&lt;th>4y&lt;/th>
&lt;th>4.5y&lt;/th>
&lt;th>5y&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Deworming&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Vitamin A&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;td>X&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>To achieve this use a markdown table with the letter X (&lt;code>X&lt;/code>) to mark events, leaving cells empty when no action is needed. The shortcode &lt;code>{{% schedule %}}&lt;/code> is used before and after the markdown table so that built-in styling can be applied. Here is the code for the above example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-markdown" data-lang="markdown">{{% schedule %}}
|| 6m | 12m | 18m | 2y | 2.5y | 3y | 3.5y | 4y | 4.5y | 5y |
|------------|--|--|--|--|--|--|--|--|--|--|
| Deworming | | | X | X | X | X | | X | X | X |
| Vitamin A | X | X | X | X | X | X | X | X | X | X |
{{% /schedule %}}
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
The opening &lt;code>{{% schedule %}}&lt;/code> and closing &lt;code>{{% /schedule %}}&lt;/code> shortcode must come before and after the markdown table respectively in order for it to correctly style the table
&lt;/div>
&lt;h3 id="grammar-and-punctuation-in-headers">Grammar and punctuation in headers&lt;/h3>
&lt;p>Use title case for page &lt;code>title&lt;/code>, and sentence case for &lt;code>linkTitle&lt;/code> description. Do not end titles with periods.&lt;/p>
&lt;h3 id="angle-brackets-for-placeholders">Angle brackets for placeholders&lt;/h3>
&lt;p>Use angle brackets for placeholders. Tell the reader what a placeholder
represents.&lt;/p>
&lt;ol>
&lt;li>Create a file named &lt;code>&amp;lt;project_name&amp;gt;-medic-os-compose.yml&lt;/code>. Where &lt;code>&amp;lt;project_name&amp;gt;&lt;/code> is the name of one of your project.&lt;/li>
&lt;/ol>
&lt;h3 id="bold-for-user-interface-elements">Bold for user interface elements&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Do&lt;/th>
&lt;th>Don&amp;rsquo;t&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Click &lt;strong>Fork&lt;/strong>.&lt;/td>
&lt;td>Click &amp;ldquo;Fork&amp;rdquo;.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Select &lt;strong>Other&lt;/strong>.&lt;/td>
&lt;td>Select &amp;lsquo;Other&amp;rsquo;.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="italics-to-define-or-introduce-new-terms">Italics to define or introduce new terms&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Do&lt;/th>
&lt;th>Don&amp;rsquo;t&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>By default CouchDB runs in &lt;em>admin party&lt;/em> mode, which means you do not need users to read or edit any data.&lt;/td>
&lt;td>By default CouchDB runs in &amp;ldquo;admin party&amp;rdquo; mode, which means you do not need users to read or edit any data.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>The &lt;em>keys&lt;/em> in &lt;code>.properties&lt;/code> files are referred to as &lt;em>terms&lt;/em> in POEditor.&lt;/td>
&lt;td>The &amp;ldquo;keys&amp;rdquo; in .properties files are referred to as &lt;strong>terms&lt;/strong> in POEditor.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="code-style-for-filenames-directories-and-paths">Code style for filenames, directories, and paths&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Do&lt;/th>
&lt;th>Don&amp;rsquo;t&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Open &lt;code>messages-en.properties&lt;/code> file.&lt;/td>
&lt;td>Open messages-en.properties file.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>The file is located in &lt;code>/config/standard&lt;/code> directory.&lt;/td>
&lt;td>The file is located in /config/standard directory.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Create &lt;code>medic/translations/messages-en.properties&lt;/code> file.&lt;/td>
&lt;td>Create medic/translations/messages-en.properties file.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="british-standard-for-punctuation-inside-quotes">British standard for punctuation inside quotes&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Do&lt;/th>
&lt;th>Don&amp;rsquo;t&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>The doc in the database is a &amp;ldquo;record&amp;rdquo;.&lt;/td>
&lt;td>The doc in the database is a &amp;ldquo;record.&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>The copy is called a &amp;ldquo;fork&amp;rdquo;.&lt;/td>
&lt;td>The copy is called a &amp;ldquo;fork.&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="notes-and-tips">Notes and tips&lt;/h3>
&lt;p>Make notes and tips stand out by using blockquote styling.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
This is a sample note.
&lt;/div>
&lt;p>&lt;code>{{% alert title=&amp;quot;Note&amp;quot; %}} This is a sample note. {{% /alert %}}&lt;/code>&lt;/p>
&lt;h3 id="images">Images&lt;/h3>
&lt;p>The &lt;a href="https://www.markdownguide.org/basic-syntax/#images-1">image markdown syntax&lt;/a> can be used for images, but if any styling is required use the built-in &lt;code>figure&lt;/code> shortcode. With the &lt;code>figure&lt;/code> shortcode &lt;a href="https://gohugo.io/content-management/shortcodes/#figure">many fields are configurable&lt;/a>, and the position and size can be responsive with &lt;a href="https://getbootstrap.com/docs/4.0/layout/grid/#responsive-classes">Bootstrap grid classes&lt;/a>. You should avoid using the HTML &lt;code>img&lt;/code> tag in the documentation.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Do&lt;/th>
&lt;th>Don&amp;rsquo;t&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>{{&amp;lt; figure src=&amp;quot;image.png&amp;quot; class=&amp;quot;right col-6 col-lg-3&amp;quot; &amp;gt;}}&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;img src=&amp;quot;image.png&amp;quot; width=&amp;quot;30%&amp;quot; align=&amp;quot;right&amp;quot;&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>{{&amp;lt; figure src=&amp;quot;image.png&amp;quot; class=&amp;quot;right col-6 col-lg-3&amp;quot; &amp;gt;}}&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;img src=&amp;quot;image.png&amp;quot; style=&amp;quot;width:30%; align:right;&amp;quot;&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>It is good practice for the image to link to the image file so that a larger version can be viewed easily. This can be done using the &lt;code>link&lt;/code> attribute with the &lt;code>figure&lt;/code> shortcode, which is less error prone than adding a link to the markdown image notation.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Do&lt;/th>
&lt;th>Don&amp;rsquo;t&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>{{&amp;lt; figure src=&amp;quot;image.png&amp;quot; link=&amp;quot;image.png&amp;quot; alt=&amp;quot;Alt text&amp;quot; title=&amp;quot;Image Title&amp;quot; &amp;gt;}}&lt;/code>&lt;/td>
&lt;td>&lt;code>[![Alt text](image.png &amp;quot;Image Title&amp;quot;)](image.png)&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="indicating-location-of-items-on-the-screen">Indicating location of items on the screen&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Do&lt;/th>
&lt;th>Don&amp;rsquo;t&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>right-hand side&lt;/td>
&lt;td>right hand side&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>left-hand&lt;/td>
&lt;td>left hand&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="videos">Videos&lt;/h3>
&lt;p>When embedding videos, use the &lt;code>youtube&lt;/code> shortcode to embed a responsive YouTube video player.&lt;/p>
&lt;p>Copy the YouTube video ID that follows &lt;code>v=&lt;/code> in the video’s URL and pass it to the &lt;code>youtube&lt;/code> shortcode. For instance, with &lt;code>https://www.youtube.com/watch?v=pFEFIY_SA7M&lt;/code> the shortcode would be:&lt;/p>
&lt;p>&lt;code>{{&amp;lt; youtube pFEFIY_SA7M &amp;gt;}}&lt;/code>&lt;/p>
&lt;p>And would display as seen here:&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/pFEFIY_SA7M" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="inline-code-formatting">Inline code formatting&lt;/h2>
&lt;h3 id="code-style-for-inline-code-and-commands">Code style for inline code and commands&lt;/h3>
&lt;p>For inline code in an HTML document, use the ``` tag. In a Markdown
document, use the backtick (`).&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Do&lt;/th>
&lt;th>Don&amp;rsquo;t&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>The &lt;code>grunt dev-webapp&lt;/code> command builds and deploys the webapp.&lt;/td>
&lt;td>The &amp;ldquo;grunt dev-webapp&amp;rdquo; command creates a Deployment.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>To upload the configuration from your current directory, use &lt;code>cht --local&lt;/code>.&lt;/td>
&lt;td>To upload the configuration from your current directory, use &amp;ldquo;cht &amp;ndash;local&amp;rdquo;.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Enclose code samples with triple backticks. &lt;code>(```)&lt;/code>&lt;/td>
&lt;td>Enclose code samples with any other syntax.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="code-snippet-formatting">Code snippet formatting&lt;/h2>
&lt;h3 id="dont-include-the-command-prompt">Don&amp;rsquo;t include the command prompt&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Do&lt;/th>
&lt;th>Don&amp;rsquo;t&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>export COUCH_NODE_NAME=couchdb@127.0.0.1&lt;/code>&lt;/td>
&lt;td>&lt;code>$ export COUCH_NODE_NAME=couchdb@127.0.0.1&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="separate-commands-from-output">Separate commands from output&lt;/h3>
&lt;p>Verify the security settings on CouchDB:&lt;/p>
&lt;pre>&lt;code>curl http://localhost:5984
&lt;/code>&lt;/pre>&lt;p>The output is similar to this:&lt;/p>
&lt;pre>&lt;code>{&amp;quot;error&amp;quot;:&amp;quot;unauthorized&amp;quot;,&amp;quot;reason&amp;quot;:&amp;quot;Authentication required.&amp;quot;}
&lt;/code>&lt;/pre>&lt;h2 id="community-health-toolkit-word-list">Community Health Toolkit word list&lt;/h2>
&lt;p>A list of terms and words to be used consistently across the site.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Term&lt;/th>
&lt;th>Usage&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Docker&lt;/td>
&lt;td>Docker should always be capitalized.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Community Health Toolkit&lt;/td>
&lt;td>Community Health Toolkit should always be capitalized.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CHT&lt;/td>
&lt;td>Acronym for &amp;ldquo;Community Health Toolkit&amp;rdquo;.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CouchDB&lt;/td>
&lt;td>No space between Couch and DB. Do not use Couchdb, Couch DB or other variations.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item></channel></rss>