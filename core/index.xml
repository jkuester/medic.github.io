<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Community Health Toolkit â€“ CHT Core Framework</title><link>https://docs.communityhealthtoolkit.org/beta/core/</link><description>Recent content in CHT Core Framework on Community Health Toolkit</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.communityhealthtoolkit.org/beta/core/index.xml" rel="self" type="application/rss+xml"/><item><title>Core: Architecture of CHT Instances</title><link>https://docs.communityhealthtoolkit.org/beta/core/overview/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/beta/core/overview/architecture/</guid><description>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>&lt;img src="../../img/architecture.png" alt="Architecture of a CHT project">&lt;/p>
&lt;h2 id="server-side">Server side&lt;/h2>
&lt;h3 id="couchdbhttpcouchdbapacheorg">&lt;a href="http://couchdb.apache.org">CouchDB&lt;/a>&lt;/h3>
&lt;p>A free and open source NoSQL database we use to store all our data, configuration, and even the application code. CouchDB is really good at replication which is the process of sending the data to another database and back again.&lt;/p>
&lt;h3 id="apihttpsgithubcommedicmedictreemasterapi">&lt;a href="https://github.com/medic/medic/tree/master/api">api&lt;/a>&lt;/h3>
&lt;p>A NodeJS service which runs on the server as a wrapper around CouchDB. It provides some security, auditing, and integration APIs. It also includes a custom implementation of filtered replication to allow it to support more concurrent users.&lt;/p>
&lt;h3 id="sentinelhttpsgithubcommedicmedictreemastersentinel">&lt;a href="https://github.com/medic/medic/tree/master/sentinel">sentinel&lt;/a>&lt;/h3>
&lt;p>Another NodeJS service running on the server, sentinel performs actions called transitions every time a document in CouchDB is added or modified. Some examples are validations, generating scheduled messages, automatic responses, creating patients, and sending alerts.&lt;/p>
&lt;h3 id="postgresqlhttpswwwpostgresqlorg">&lt;a href="https://www.postgresql.org">PostgreSQL&lt;/a>&lt;/h3>
&lt;p>A free and open source SQL database that we use for analytics queries for display in tools like klipfolio. We created a library called &lt;a href="https://github.com/medic/couch2pg">couch2pg&lt;/a> to replicate data from CouchDB into PostgreSQL.&lt;/p>
&lt;h2 id="client-side">Client side&lt;/h2>
&lt;h3 id="cht-corehttpsgithubcommediccht-core">&lt;a href="https://github.com/medic/cht-core">cht-core&lt;/a>&lt;/h3>
&lt;p>This is the application that most users interact with. It&amp;rsquo;s an &lt;a href="https://angularjs.org">AngularJS&lt;/a> single page responsive web application.&lt;/p>
&lt;p>We use an offline first strategy which means the data is stored on the client and all pages can load immediately regardless of whether you have a fast connection, slow connection, or no connection at all. The data is stored in &lt;a href="https://pouchdb.com">PouchDB&lt;/a> which replicates changes back and forth in the background with the server CouchDB.&lt;/p>
&lt;p>We use &lt;a href="https://enketo.org">Enketo&lt;/a> to render configured xforms and help with styling and dynamic elements such as show/hide and validation rules.&lt;/p>
&lt;p>We use the &lt;a href="https://github.com/C2FO/nools">nools&lt;/a> rules engine to compute the upcoming tasks and monthly targets of the users.&lt;/p>
&lt;h3 id="medic-androidhttpsgithubcommedicmedic-android">&lt;a href="https://github.com/medic/medic-android">medic-android&lt;/a>&lt;/h3>
&lt;p>The application works in the browser or wrapped in the medic-android app which allows for project branding, sets the project URL, and hides browser elements like the URL bar.&lt;/p>
&lt;h2 id="other-applications">Other applications&lt;/h2>
&lt;h3 id="medic-gatewayhttpsgithubcommedicmedic-gateway">&lt;a href="https://github.com/medic/medic-gateway">medic-gateway&lt;/a>&lt;/h3>
&lt;p>Medic Gateway is an android app for sending and receiving SMS messages. Each SMS enabled project has one gateway running. It polls an api endpoint to write incoming SMS into the CouchDB and retrieve outgoing SMS to send.&lt;/p>
&lt;h3 id="medic-collecthttpsgithubcommedicmedic-collect">&lt;a href="https://github.com/medic/medic-collect">medic-collect&lt;/a>&lt;/h3>
&lt;p>An android app based on &lt;a href="https://opendatakit.org">Open Data Kit&lt;/a> to render xforms on the phone and send reports in to medic-gateway over SMS or directly to api over mobile data.&lt;/p>
&lt;h3 id="medic-confhttpsgithubcommedicmedic-conf">&lt;a href="https://github.com/medic/medic-conf">medic-conf&lt;/a>&lt;/h3>
&lt;p>A command line utility for uploading configuration and bulk importing of records.&lt;/p></description></item><item><title>Core: Database schema conventions</title><link>https://docs.communityhealthtoolkit.org/beta/core/overview/db-schema/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/beta/core/overview/db-schema/</guid><description>
&lt;p>CouchDB (and PouchDB in the browser) is a JSON-based NoSQL datastore that we use to store our data. While unlike SQL databases there is no enforced schema, code still follows conventions, and this document aims to describe the schema as defined by how our code operates.&lt;/p>
&lt;p>In this document &amp;ldquo;record&amp;rdquo; means a JSON object that resides in CouchDB or PouchDB.&lt;/p>
&lt;h2 id="general-record-data-structure">General record data structure&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Property&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Required by&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>_id&lt;/code>&lt;/td>
&lt;td>CouchDB&amp;rsquo;s unique identifier of the record&lt;/td>
&lt;td>all records&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>_rev&lt;/code>&lt;/td>
&lt;td>CouchDB&amp;rsquo;s revision marker&lt;/td>
&lt;td>all records&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>type&lt;/code>&lt;/td>
&lt;td>The general type of the document, see below&lt;/td>
&lt;td>all user-created* documents&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>reported_date&lt;/code>&lt;/td>
&lt;td>Numerical timestamp of when the document is first created&lt;/td>
&lt;td>all user-created documents&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>User-created documents here generally means contacts and reports, but may extend further.&lt;/li>
&lt;/ul>
&lt;h2 id="contacts-persons-and-places">Contacts (Persons and Places)&lt;/h2>
&lt;p>Contacts are either places (e.g. clinic), groupings (e.g. family) or people (e.g. a patient or CHW).&lt;/p>
&lt;p>The &lt;code>type&lt;/code> property of contact records depends on the version of Medic you are running:&lt;/p>
&lt;ul>
&lt;li>If you are running 3.7 or later you get to &lt;a href="https://docs.communityhealthtoolkit.org/beta/apps/reference/app-settings/hierarchy/#app_settingsjson-contact_types">configure your contact hierarchy&lt;/a>, and the &lt;code>type&lt;/code> of contacts is &lt;code>contact&lt;/code>, and the configured type is in the &lt;code>contact_type&lt;/code> property.&lt;/li>
&lt;li>In earlier versions the type depended on hierarchical location of the contact. There are 3 hard coded place types: &lt;code>district_hospital&lt;/code>, &lt;code>health_centre&lt;/code> and &lt;code>clinic&lt;/code> and one people type &lt;code>person&lt;/code>. These place names are often meaningless (hence the configurable contact hierarchy in later versions) to the configured project, and are textually (ie in the UI not in data structures) renamed to mean other things. For example, as &lt;code>clinic&lt;/code> is the lowest level it is often used to represent a family.&lt;/li>
&lt;/ul>
&lt;h3 id="places">Places&lt;/h3>
&lt;p>Represent either an actual physical location such as a clinic, or a grouping such as a family or region.&lt;/p>
&lt;p>Unless a place is at the top of the hierarchy it has a &lt;code>parent&lt;/code> place.&lt;/p>
&lt;p>Each location has a primary contact, which is a &lt;code>person&lt;/code> contact stored in the &lt;code>contact&lt;/code> property.&lt;/p>
&lt;h3 id="people">People&lt;/h3>
&lt;p>People are both patients in the system and users of the system, such as CHWs or Nurses. Users have additional records marking them as users of the system (see &lt;a href="#users">User&lt;/a> below).&lt;/p>
&lt;p>People always have a &lt;code>parent&lt;/code> place.&lt;/p>
&lt;h3 id="parent-hierachy-representation">Parent hierachy representation&lt;/h3>
&lt;p>Contacts &lt;strong>store&lt;/strong> their parent hierarchy as a minified hierarchical structure, which records the &lt;code>_id&lt;/code> of each parent up until the top of the hierarchy:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;person&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;A patient&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">parent&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">_id&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;clinic-id&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">parent&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">_id&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;health_centre-id&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">parent&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">_id&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;district_hospital-id&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Generally when contacts are &lt;strong>used&lt;/strong> in the app they are first &amp;ldquo;hydrated&amp;rdquo;, with the rest of the information filled in from their parent&amp;rsquo;s place documents:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;person&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;A patient&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">parent&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">_id&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;clinic-id&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;A clinic&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">reported_date&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1234&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">...&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// etc
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">parent&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">_id&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;health_centre-id&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;A Health Centre&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">reported_date&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1134&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">...&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// etc
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">parent&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">_id&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;district_hospital-id&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;THE District Hospital&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">reported_date&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1034&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">...&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// etc
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reports">Reports&lt;/h2>
&lt;p>Reports are created by users filling out and submitting forms, as well as sending in SMS.&lt;/p>
&lt;p>All reports:&lt;/p>
&lt;ul>
&lt;li>Use the &lt;code>data_record&lt;/code> type&lt;/li>
&lt;li>Have their fields stored in the &lt;code>fields&lt;/code> property&lt;/li>
&lt;li>Have the report author&amp;rsquo;s phone number (if it exists) stored in the &lt;code>from&lt;/code> field&lt;/li>
&lt;li>Store the form&amp;rsquo;s identifier in the &lt;code>form&lt;/code> field&lt;/li>
&lt;li>May have a &lt;code>contact&lt;/code> property, which is a minified version of the report author&amp;rsquo;s contact and its hierarchy (see above)&lt;/li>
&lt;/ul>
&lt;p>Reports can be about people or places.&lt;/p>
&lt;p>Reports about people should have one or more of:&lt;/p>
&lt;ul>
&lt;li>A patient shortcode, found at &lt;code>doc.patient_id&lt;/code> or &lt;code>doc.fields.patient_id&lt;/code>&lt;/li>
&lt;li>A patient record&amp;rsquo;s &lt;code>_id&lt;/code>, found at &lt;code>doc.patient_uuid&lt;/code> or &lt;code>doc.fields.patient_uuid&lt;/code>, as well as potientially in the same locations as the shortcode&lt;/li>
&lt;/ul>
&lt;p>Reports about places should have a &lt;code>doc.place_id&lt;/code>.&lt;/p>
&lt;p>Additionally, SMS reports:&lt;/p>
&lt;ul>
&lt;li>Have an &lt;code>sms_message&lt;/code> property which contains, among other things, the raw SMS&lt;/li>
&lt;li>May not have a &lt;code>contact&lt;/code> property if the SMS comes from a phone number that does not have an associated contact&lt;/li>
&lt;/ul>
&lt;p>Additionally, XML reports:&lt;/p>
&lt;ul>
&lt;li>Have the XML file that Enketo (the XForm renderer used) generates as an attachment&lt;/li>
&lt;li>Have a &lt;code>content_type&lt;/code> property of &lt;code>xml&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="forms">Forms&lt;/h2>
&lt;p>SMS forms are defined in &lt;a href="https://docs.communityhealthtoolkit.org/beta/apps/reference/app-settings/patient_reports/#app_settingsjson-patient_reports">application config&lt;/a>.&lt;/p>
&lt;p>XML forms are stored in the database and have:&lt;/p>
&lt;ul>
&lt;li>An &lt;code>_id&lt;/code> of &lt;code>form:&amp;lt;formname&amp;gt;&lt;/code>&lt;/li>
&lt;li>The &lt;code>type&lt;/code> of &lt;code>form&lt;/code>&lt;/li>
&lt;li>The actual XML Xforms definition attached&lt;/li>
&lt;/ul>
&lt;p>XML forms are defined as XForm XML files&lt;/p>
&lt;h2 id="users">Users&lt;/h2>
&lt;p>Users represent credentials and roles / permissions for accessing the application. This can either be:&lt;/p>
&lt;ul>
&lt;li>people who can log into the application, such as CHWs or Nurses&lt;/li>
&lt;li>or credentials granting external software restricted permissions to perform certain tasks, such as allowing an external service permission to write reports via the api.&lt;/li>
&lt;/ul>
&lt;p>User records have at least:&lt;/p>
&lt;ul>
&lt;li>An &lt;code>_id&lt;/code> of &lt;code>org.couchdb.user:&amp;lt;username&amp;gt;&lt;/code>&lt;/li>
&lt;li>A &lt;code>name&lt;/code> which is the same as &lt;code>&amp;lt;username&amp;gt;&lt;/code> above&lt;/li>
&lt;li>A &lt;code>roles&lt;/code> array&lt;/li>
&lt;/ul>
&lt;p>There are two slightly different copies of this record stored.&lt;/p>
&lt;p>The record in the &lt;code>_users&lt;/code> database includes:&lt;/p>
&lt;ul>
&lt;li>The &lt;code>type&lt;/code> of &lt;code>user&lt;/code>&lt;/li>
&lt;li>The password hash and associated data&lt;/li>
&lt;/ul>
&lt;p>The &lt;code>_users&lt;/code> database is what CouchDB uses for authentication and is only editable by administrative users, so is authoritive when it comes to roles and the like.&lt;/p>
&lt;p>The &lt;code>medic&lt;/code> database stores a copy of roles and permissions along with:&lt;/p>
&lt;ul>
&lt;li>The &lt;code>type&lt;/code> of &lt;code>user-settings&lt;/code>&lt;/li>
&lt;li>They may have a &lt;code>contact_id&lt;/code> field that is the &lt;code>_id&lt;/code> of the &lt;em>person&lt;/em> that the user is attached to&lt;/li>
&lt;li>They may also have a &lt;code>facility_id&lt;/code> field that is the &lt;code>_id&lt;/code> of the &lt;em>place&lt;/em> that the user is attached to&lt;/li>
&lt;li>They may also have a &lt;code>known&lt;/code> field. If this field is &lt;code>true&lt;/code>, it means the user has logged in once and will no longer be shown the tour by default. Otherwise, it will be &lt;code>undefined&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>Note that SMS users do not have a users record: their phone number will be attached to a &lt;code>person&lt;/code> record, but they do not have a user because they do not access the application.&lt;/p>
&lt;p>Users then, can be represented by up to 3 docs:&lt;/p>
&lt;ul>
&lt;li>a &lt;code>person&lt;/code> document that represents a physical human being in our hierarchy of places and people&lt;/li>
&lt;li>a &lt;code>users&lt;/code> document that represents authorisation and authentication information for physical people or authenticated external services&lt;/li>
&lt;li>a &lt;code>user-settings&lt;/code> document that ties the &lt;code>user&lt;/code> and &lt;code>person&lt;/code> documents together&lt;/li>
&lt;/ul>
&lt;h2 id="tasks">Tasks&lt;/h2>
&lt;p>&lt;a href="https://docs.communityhealthtoolkit.org/beta/apps/reference/tasks/#tasksjs">Partner configuration code&lt;/a> running inside the Core Framework can cause tasks to appear within the Tasks tab. Each task in the tab is powered by a task document. Task documents are:&lt;/p>
&lt;ul>
&lt;li>updated only after the data for their emitting contact changes or every 7 days&lt;/li>
&lt;li>created in the database for any task due within the last 60 days&lt;/li>
&lt;li>immutable once their state is &amp;ldquo;terminal&amp;rdquo; (Cancelled, Completed, Failed)&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>State&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Draft&lt;/td>
&lt;td>Task has been calculated but it is scheduled in the future&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ready&lt;/td>
&lt;td>Task is currently showing to the user&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Cancelled&lt;/td>
&lt;td>Task was not emitted when refreshing the requester&amp;rsquo;s data. Task has invalid partner emission.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Completed&lt;/td>
&lt;td>Task was emitted with { resolved: true }&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Failed&lt;/td>
&lt;td>Task was never terminated and the endDate has past&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Attribute&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>user&lt;/td>
&lt;td>The user settings id of the user who calculated and created the document. Used for controlling replication. (eg. &lt;code>org.couchdb.user:agatha&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>requester&lt;/td>
&lt;td>The guid of the contact whose data brought about the creation of the document. Used for controlling cancellation.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>owner&lt;/td>
&lt;td>The guid of the contact whose profile this task will appear on in the contact&amp;rsquo;s tab.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>forId&lt;/td>
&lt;td>If completing a task&amp;rsquo;s action opens a form. Completing the form creates a report. &lt;code>forId&lt;/code> is the guid of the contact information that will be passed into the form. For most forms, the resulting report will be associated with this contact.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>emission&lt;/td>
&lt;td>Minified task data emitted from the partner code.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stateHistory&lt;/td>
&lt;td>Each time the state attribute changes, the time of the change is recorded in the state history.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;_id&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;task~org.couchdb.user:agatha~pregReport~pregnancy-facility-visit-reminder~2~523435132468&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;task&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;authoredOn&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">523435132468&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;user&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;org.couchdb.user:agatha&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;requester&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;requester-contact-guid&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;owner&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;owner-contact-guid&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;state&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Ready&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;emission&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;_id&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;pregReport~pregnancy-facility-visit-reminder~2&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;forId&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;for-contact-guid&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;dueDate&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;2000-01-01&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;startDate&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;1999-12-29&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;endDate&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;2000-01-08&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#a40000">...&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;stateHistory&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;state&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Ready&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;timestamp&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">523435132468&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">}],&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="targets">Targets&lt;/h2>
&lt;p>&lt;a href="https://docs.communityhealthtoolkit.org/beta/apps/reference/targets/#targetsjs">Partner configuration code&lt;/a> can configure targets to appear within the Targets/Analytics tab. Target documents are:&lt;/p>
&lt;ul>
&lt;li>one per analytics reporting period&lt;/li>
&lt;li>updated when the user loads the application or when they view the targets tab&lt;/li>
&lt;li>updated a maximum of once per day&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;_id&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;target~2000-01~user-contact-guid~org.couchdb.user:agatha&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;target&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;user&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;org.couchdb.user:agatha&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;owner&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;user-contact-guid&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;updated_date&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">523435132468&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;targets&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;id&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;deaths-this-month&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#a40000">...&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;pass&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;total&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#a40000">...&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Core: Data Flows for Analytics</title><link>https://docs.communityhealthtoolkit.org/beta/core/overview/data-flows-for-analytics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/beta/core/overview/data-flows-for-analytics/</guid><description>
&lt;p>In this section we focus on how data flows through the various components of the Community Health Toolkit. The CHT is built to support the delivery of quality community health care in the hardest to reach areas. The CHT is designed to work in areas with low connectivity, which means it is an offline-first toolkit. The architectural and technology choices in the stack are mostly guided by this principle, which will be evident in the discussion of the data management pipeline.&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>&lt;img src="data-flows.png" alt="Data Flows">&lt;/p>
&lt;p>At a high level:&lt;/p>
&lt;ul>
&lt;li>Data are collected from the device of a health worker;&lt;/li>
&lt;li>Data are pushed to an online instance from where data are available to other health workers, supervisors and decision makers;&lt;/li>
&lt;li>Data are transferred to a relational database (PostgreSQL) using &lt;a href="https://github.com/medic/medic-couch2pg">couch2pg&lt;/a> and made available for impact monitoring, data science projects and visualizations;&lt;/li>
&lt;li>Access to PostreSQL is given to relevant parties at this level, for example Research &amp;amp; Learning team members for impact monitoring and data science;&lt;/li>
&lt;li>Visualization platforms, such as &lt;a href="https://www.klipfolio.com/">Klipfolio&lt;/a>, are then connected to PostgreSQL from where program managers and other partner representatives can access visualizations of their data for decision-making&lt;/li>
&lt;/ul>
&lt;h2 id="details-of-the-data-flow">Details of the data flow&lt;/h2>
&lt;p>The layout detailed here is specific to how Medic Mobile supports its CHT partners at the moment. It is replicable and can be deployed as is or tweaked independent of Medic Mobile either by modifying or replacing pieces of it with other options.&lt;/p>
&lt;h3 id="current-infrastructure">Current infrastructure&lt;/h3>
&lt;p>We look at this in three general phases.&lt;/p>
&lt;h4 id="1-data-collection">1. Data Collection&lt;/h4>
&lt;p>Data is collected in the community at the point of care, i.e. the community health worker interacting with the toolkit. These tools and their corresponding data stores are::-&lt;/p>
&lt;ul>
&lt;li>Mobile app -&amp;gt; PouchDB&lt;/li>
&lt;li>Webapp -&amp;gt; PouchDB / CouchDB&lt;/li>
&lt;li>Text forms / sms -&amp;gt; SMS gateway / SMS aggregator -&amp;gt; CouchDB&lt;/li>
&lt;/ul>
&lt;p>The mobile app and webapp, when deployed for offline first use, use a local database namely PouchDB. Similar to CouchDB, it is a document-oriented database. The data collected in PouchDB is synced to an online CouchDB upon the user connecting to the internet. Local storage is not applicable to SMS; instead, an &lt;a href="https://github.com/medic/medic-gateway">SMS gateway&lt;/a> or an &lt;a href="https://africastalking.com">SMS aggregator&lt;/a> is used to help get the data to an online CouchDB instance.&lt;/p>
&lt;p>Ultimately all the data ends up in a CouchDB instance deployed in the cloud whether through data synchronization with PouchDB local to the health workers devices, use of SMS aggregators or gateway. It should be mentioned that you can have a deployment supported by all of webapp, mobile app and SMS and have all the data end up in the same CouchDB instance.&lt;/p>
&lt;h4 id="2-data-transformation">2. Data Transformation&lt;/h4>
&lt;p>We use &lt;a href="https://github.com/medic/medic-couch2pg">couch2pg&lt;/a> to move data from CouchDB to a relational database, PostgreSQL in this case. The choice of PostgreSQL for analytics dashboard data sources is to allow use of the more familiar SQL querying. It is an open source tool that can be &lt;a href="https://github.com/medic/medic-couch2pg#installation-steps-if-applicable">easily deployed&lt;/a>. When deployed the service uses &lt;a href="https://docs.couchdb.org/en/2.2.0/api/database/changes.html">CouchDB&amp;rsquo;s changes feed&lt;/a> which allows capturing of everything happening in CouchDB in incremental updates. It is run and monitored by the operating system where it is configured to fetch data at a configurable interval.&lt;/p>
&lt;p>Data copied over to PostgreSQL is first stored as raw json (document) making use of PostgreSQL&amp;rsquo;s jsonb data type to create an exact replica of a CouchDB database. From this, default views are created at deployment of the service and refreshed during every subsequent run. Additional custom materialized views created later are also refreshed at this time.&lt;/p>
&lt;p>Custom materialized views and functions are added specific to a deployment&amp;rsquo;s needs. Generally the following naming convention is recommended:&lt;/p>
&lt;ul>
&lt;li>&lt;em>formview&lt;/em> as a view of raw forms&lt;/li>
&lt;li>&lt;em>useview&lt;/em> as a view of form data supporting a use case as defined by design&lt;/li>
&lt;li>&lt;em>contactview&lt;/em> as a view of people and places&lt;/li>
&lt;li>Database functions are used as a way to join as much relevant data as possible for easier querying in analytics or dashboard visualizations.&lt;/li>
&lt;/ul>
&lt;p>Data in the views and functions mentioned in this section is as accurate as the accuracy of the SQL queries. Best practice is to begin the process of defining these objects at design in order to align analytics and dashboards requirements with workflows being deployed.&lt;/p>
&lt;h4 id="3-data-use">3. Data Use&lt;/h4>
&lt;p>The data in PostgreSQL is mostly either used by direct querying or via dashboard visualizations for impact monitoring and data driven-decision making. Database visualizations are built scoped to the requirements of supporting a successful deployment. The work of our Research &amp;amp; Learning team, specifically data science, is supported at the PostgreSQL level through updated contactviews, formviews, useviews and functions with access to these provided to relevant parties as and when needed. Our use of data follows our Privacy &amp;amp; Data Protection policy and is in accordance to agreements with our CHT partners.&lt;/p>
&lt;p>As mentioned previously, formviews are built to present data in a structure similar to the data collection tool (form) used. Useviews are tailored to align with a use case, mostly using the formviews as the data sources. These are fundamentally guided by design of the workflows and should be interpreted in the context of the design materials including a document explaining the definitions of variables used.&lt;/p>
&lt;p>The objects present here are not limited to views and functions. Additional tables can be added, for example providing mappings or supporting operations external to the functions available in the toolkit. In short, there is no limitation to the utility that can be added this level to support analytics and dashboards. That said, measures are taken to ensure controlled access, reliability and timely access of the data by the various parties. Some of these measures are:&lt;/p>
&lt;ul>
&lt;li>Roles and users allocation and deallocation done by specific roles within partner technical teams with support from Medic Mobile as needed;&lt;/li>
&lt;li>Access control management is left to the partner technical teams where possible;&lt;/li>
&lt;li>Dashboard data source refresh intervals set to align with project needs;&lt;/li>
&lt;li>Update of the data sources monitored to ensure updating works as expected;&lt;/li>
&lt;li>Review of the dashboards as part of the design process;&lt;/li>
&lt;li>Qualitative design activities to interrogate trends observed in the dashboards and iterate on them if need be;&lt;/li>
&lt;/ul>
&lt;h3 id="beyond-our-current-pipeline">Beyond Our Current Pipeline&lt;/h3>
&lt;p>The &lt;a href="https://github.com/medic/cht-core">cht-core&lt;/a> is mostly data collection tools and is the first component of the data management pipeline. It is the core part of a deployment but the rest of the tools can be easily replaced with other preferred options. It also helps that couch2pg is an open source tool which provides the opportunity for collaboration to extend its functionality to support other implementations. Klipfolio, the tool that we currently use for visualizations, is a proprietary tool but there are many open source options, such as &lt;a href="https://superset.incubator.apache.org/">Apache Superset&lt;/a> that are worth exploring and building into future iterations of our impact monitoring and analytics support for the CHT.&lt;/p>
&lt;h2 id="backup">Backup&lt;/h2>
&lt;p>The machines running each of CouchDB and PostgreSQL instances are backed up daily.&lt;/p></description></item><item><title>Core: Transitions API</title><link>https://docs.communityhealthtoolkit.org/beta/core/overview/transitions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/beta/core/overview/transitions/</guid><description>
&lt;p>A transition is javascript code that runs when a document is changed. A
transition can edit the changed doc or do anything server side code can do for
that matter.&lt;/p>
&lt;p>Transitions are run in series, not in parallel:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>For a given change, you can expect one transition to be finished before the
next runs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You can expected one change to be fully processed by all transitions before
the next starts being processed.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Transitions obey the following rules:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>has a &lt;code>filter(doc)&lt;/code> function that accepts the changed document as an argument and
returns &lt;code>true&lt;/code> if it needs to run/be applied.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>a &lt;code>onMatch(change, db, auditDb, callback)&lt;/code> function than will run on changes
that pass the filter.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>can have an &lt;code>init()&lt;/code> function to do any required setup and throw Errors on invalid
configuration.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>has an &lt;code>onChange(change, db, audit, callback)&lt;/code> function that makes changes to
the &lt;code>change.doc&lt;/code> reference (copying is discouraged). &lt;code>db&lt;/code> and &lt;code>audit&lt;/code> are
handles to let you query those DBs. More about &lt;code>callback&lt;/code> below.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It is not necessary for an individual transition to save the changes to &lt;code>change.doc&lt;/code> to the db: the doc will be saved once, after all the transitions have edited it.
If an individual transition saves the document provided at &lt;code>change.doc&lt;/code>, it takes responsibility re-attaching the newly saved document (with new seq etc) at &lt;code>change.doc&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>guarantees the consistency of a document.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>runs serially and in any order. A transition is free to make async calls but
the next transition will only run after the previous transitions&amp;rsquo;s callback
is called. If your transition is dependent on another transition then it will
run on the next change. Code your transition to support two changes rather
than require a specific ordering. You can optimize your ordering but don&amp;rsquo;t
require it. This keeps configuration simpler.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>is repeatable, it can run multiple times on the same document without
negative effect. You can use the &lt;code>transitions&lt;/code> property on a document to
determine if a transition has run.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Callback arguments:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>callback(err, needsSaving)&lt;/p>
&lt;p>&lt;code>needsSaving&lt;/code> is true if the &lt;code>change.doc&lt;/code> needs to be saved to db by the transition runner. For instance the transition has edited the &lt;code>change.doc&lt;/code> in memory.
&lt;code>err&lt;/code> if truthy, the error will be added to the &lt;code>changes.doc&lt;/code> in memory. (Note that if &lt;code>needsSaving&lt;/code> is falsy, the doc will not be saved, so that error will not be persisted).&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Regardless whether the doc is saved or not, the transitions will all be run (unless one crashes!).&lt;/p>
&lt;p>When your transition encounters an error, there are different ways to deal with it. You can :&lt;/p>
&lt;ul>
&lt;li>finish your transition with &lt;code>callback(someError, true)&lt;/code>. This will save the error to &lt;code>change.doc&lt;/code>.&lt;/li>
&lt;li>finish your transition with &lt;code>callback(someError, false)&lt;/code>. The error will be logged to the sentinel log. This will not save the error on the &lt;code>change.doc&lt;/code>, so there will be no record that this transition ran. That particular &lt;code>change&lt;/code> will not go through transitions again, but if the same doc has another change in the future, since there is no record of the erroring transition having run, it will be rerun.&lt;/li>
&lt;li>crash sentinel. When sentinel restarts, since that &lt;code>change&lt;/code> did not record a successful processing, it will be reprocessed. Transitions that did not save anything to the &lt;code>change.doc&lt;/code> will be rerun.&lt;/li>
&lt;/ul></description></item><item><title>Core: How To Manage Translations</title><link>https://docs.communityhealthtoolkit.org/beta/core/overview/translations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/beta/core/overview/translations/</guid><description>
&lt;p>Apps built with CHT Core are localized so that users can use it in the language of their choice. It is currently available in English, French, Hindi, Nepali, Spanish, and Swahili. The goal of this doc is to help our team manage these and future translations.&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>Like the rest of our code, the translation files live in our GitHub repo. These translation files are &lt;a href="https://en.wikipedia.org/wiki/.properties">properties&lt;/a> files, which are a series of keys and their corresponding values. We use the English file as our default, and as such contains the entire set of keys. If any key is missing from another language file the English value is used.&lt;/p>
&lt;p>In order to collaboratively edit the translations we use POEditor.com. Translators can be given access to specific languages so that we can more effectively edit language text to be included in Medic Mobile. Once the text is ready it can be exported from POEditor to GitHub and included in the next release of our app.&lt;/p>
&lt;p>Note that &amp;ldquo;keys&amp;rdquo; in .properties files are referred to as &lt;code>terms&lt;/code> in POEditor.&lt;/p>
&lt;h2 id="adding-new-languages">Adding new languages&lt;/h2>
&lt;p>New languages must be added and configured in several places:&lt;/p>
&lt;ul>
&lt;li>&lt;em>In GitHub&lt;/em>
&lt;ul>
&lt;li>Create a new &lt;a href="https://github.com/medic/medic/blob/master/translations/">medic/translations/messages-XX.properties&lt;/a> file, replacing XX with the 2 or 3 letter language code.&lt;/li>
&lt;li>Add the language to the &lt;a href="https://github.com/medic/medic-api/blob/master/translations.js#L10">LOCAL_NAME_MAP in api&lt;/a>. Use the language code for the key, and the local name followed by the English name for the language in brackets, eg: &amp;ldquo;fr: &amp;lsquo;FranÃ§ais (French)'&amp;quot;.&lt;/li>
&lt;li>Import the moment language pack in the &lt;a href="https://github.com/medic/medic/blob/master/static/js/app.js#L25">root app.js file&lt;/a>. If moment doesn&amp;rsquo;t provide the required language pack you may need to contribute it upstream to the moment library.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;em>In POEditor&lt;/em>
&lt;ul>
&lt;li>In the &lt;a href="https://poeditor.com/projects/view?id=33025">Medic Mobile project&lt;/a>, add the language&lt;/li>
&lt;li>Add translations for a new language in the POEditor app&lt;/li>
&lt;li>Export file from POEditor to GitHub, as described below&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="adding-new-keys">Adding new keys&lt;/h2>
&lt;p>In order to trace the addition of new terms and also updates to existing translations,
the default translation file (messages-en.properties) must be updated directly.
Our GitHub repo provides with a &lt;a href="https://github.com/medic/medic/tree/master/scripts/poe">command line tool (CLI)&lt;/a> to
import updates into the POEditor app.
If you don&amp;rsquo;t have an API token, please contact a Medic Mobile developer, product manager, or CTO. Please do not disclose this API token to anyone else.&lt;/p>
&lt;h3 id="translating-static-text">Translating static text&lt;/h3>
&lt;p>All text in the app is internationalised.&lt;/p>
&lt;ul>
&lt;li>Pick a key.
&lt;ul>
&lt;li>First check if an appropriate key already exists in messages-en.properties (medic/config/standard/translations).&lt;/li>
&lt;li>Otherwise create a new key and default English value. Keys must be all lower case, dot separated, and descriptive but not verbose. The values should include as much text as possible (eg: trailing punctuation), and must not contain any markup. Don&amp;rsquo;t add any values for other languages as this will be done later in the POEditor app.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Use the translation. In angular this is done using angular-translate, and ideally using the &lt;a href="http://angular-translate.github.io/docs/#/guide/05_using-translate-directive">translate directive&lt;/a> to reduce the number of watchers, eg: &lt;code>&amp;lt;h3 translate&amp;gt;date.incorrect.title&amp;lt;/h3&amp;gt;&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h3 id="translating-help-pages">Translating help pages&lt;/h3>
&lt;p>Because help pages are too large to manage easily through the standard translation mechanism, and we want to include lots of markup, help pages are translated by providing md documents for each language. This isn&amp;rsquo;t yet up and running so ask for help.&lt;/p>
&lt;h3 id="translating-configurations">Translating configurations&lt;/h3>
&lt;p>Much of the app is configurable (eg: forms and schedules). Because the specifics of the configuration aren&amp;rsquo;t known during development time these can&amp;rsquo;t be provided via messages. Instead we allow configurers to provide a map of locale to value for each translated property. Then use the &lt;code>translateFrom&lt;/code> filter to translate from the configured map using the user&amp;rsquo;s language.&lt;/p>
&lt;h2 id="modifying-any-existing-translation-values">Modifying any existing translation values&lt;/h2>
&lt;p>To be done &lt;em>only&lt;/em> by updating messages-en.properties, importing to POEditor through the CLI tool and updating the other language translations through the POEditor app.&lt;/p>
&lt;h2 id="modifying-or-removing-translation-keys">Modifying or removing translation keys:&lt;/h2>
&lt;p>To be done &lt;em>only&lt;/em> by updating messages-en.properties and importing to POEditor through the CLI tool.&lt;/p>
&lt;h2 id="exporting-changes-from-poeditor-to-github">Exporting changes from POEditor to GitHub&lt;/h2>
&lt;p>To be done &lt;em>only&lt;/em> by exporting all translations through the CLI tool.
If you don&amp;rsquo;t have an API token, please contact a Medic Mobile developer, product manager, or CTO. Please do not disclose this API token to anyone else.&lt;/p></description></item><item><title>Core: Supported Versions</title><link>https://docs.communityhealthtoolkit.org/beta/core/overview/supported-software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/beta/core/overview/supported-software/</guid><description>
&lt;p>Medic Mobile supports the latest patch of minor versions of the Core Framework for three months after the next minor version is made available, and the latest minor of a major version for twelve months after the next major version is made available.&lt;/p>
&lt;p>Once a version is no longer supported it will not receive any further releases and upgrading may be required before Medic Mobile can investigate any issues.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Version&lt;/th>
&lt;th>Status&lt;/th>
&lt;th>Release date&lt;/th>
&lt;th>End of life&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>3.8.1&lt;/td>
&lt;td>Current&lt;/td>
&lt;td>6-Apr-2020&lt;/td>
&lt;td>TBA&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3.8.0&lt;/td>
&lt;td>EOL&lt;/td>
&lt;td>11-Feb-2020&lt;/td>
&lt;td>6-Apr-2020&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3.7.1&lt;/td>
&lt;td>Supported&lt;/td>
&lt;td>13-Nov-2019&lt;/td>
&lt;td>11-Jun-2020&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3.7.0&lt;/td>
&lt;td>EOL&lt;/td>
&lt;td>22-Oct-2019&lt;/td>
&lt;td>13-Nov-2019&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3.6.2&lt;/td>
&lt;td>EOL&lt;/td>
&lt;td>24-Mar-2020&lt;/td>
&lt;td>24-Mar-2020&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3.6.1&lt;/td>
&lt;td>EOL&lt;/td>
&lt;td>07-Aug-2019&lt;/td>
&lt;td>22-Jan-2020&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3.6.0&lt;/td>
&lt;td>EOL&lt;/td>
&lt;td>17-Jul-2019&lt;/td>
&lt;td>07-Aug-2019&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3.5.0&lt;/td>
&lt;td>EOL&lt;/td>
&lt;td>27-Jun-2019&lt;/td>
&lt;td>17-Oct-2019&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3.4.1&lt;/td>
&lt;td>EOL&lt;/td>
&lt;td>4-Jun-2019&lt;/td>
&lt;td>27-Sep-2019&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3.4.0&lt;/td>
&lt;td>EOL&lt;/td>
&lt;td>27-Mar-2019&lt;/td>
&lt;td>4-Jun-2019&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3.3.0&lt;/td>
&lt;td>EOL&lt;/td>
&lt;td>22-Feb-2019&lt;/td>
&lt;td>27-Jun-2019&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3.2.1&lt;/td>
&lt;td>EOL&lt;/td>
&lt;td>23-Jan-2019&lt;/td>
&lt;td>22-May-2019&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3.2.0&lt;/td>
&lt;td>EOL&lt;/td>
&lt;td>23-Jan-2019&lt;/td>
&lt;td>23-Jan-2019&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3.1.0&lt;/td>
&lt;td>EOL&lt;/td>
&lt;td>21-Nov-2018&lt;/td>
&lt;td>23-Apr-2019&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3.0.0&lt;/td>
&lt;td>EOL&lt;/td>
&lt;td>15-Nov-2018&lt;/td>
&lt;td>21-Feb-2019&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2.18.1&lt;/td>
&lt;td>EOL&lt;/td>
&lt;td>31-Oct-2018&lt;/td>
&lt;td>15-Nov-2019&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2.18.0&lt;/td>
&lt;td>EOL&lt;/td>
&lt;td>30-Aug-2018&lt;/td>
&lt;td>31-Oct-2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>earlier&lt;/td>
&lt;td>EOL&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>30-Nov-2018&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="dependencies">Dependencies&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>medic&lt;/th>
&lt;th>Node&lt;/th>
&lt;th>CouchDB&lt;/th>
&lt;th>Browsers&lt;/th>
&lt;th>SMS bridge&lt;/th>
&lt;th>Android&lt;/th>
&lt;th>medic-android&lt;/th>
&lt;th>medic-couch2pg&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>0.4&lt;/strong>&lt;/td>
&lt;td>0.12+&lt;/td>
&lt;td>1.6+&lt;/td>
&lt;td>Chrome 30+, Firefox latest&lt;/td>
&lt;td>SMSSync&lt;/td>
&lt;td>N/A&lt;/td>
&lt;td>N/A&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>2.x&lt;/strong>&lt;/td>
&lt;td>6+&lt;/td>
&lt;td>1.6+&lt;/td>
&lt;td>Chrome 30+, Firefox latest&lt;/td>
&lt;td>medic-gateway&lt;/td>
&lt;td>4.4+&lt;/td>
&lt;td>Any&lt;/td>
&lt;td>2.0 &amp;lt; 3.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>3.x&lt;/strong>&lt;/td>
&lt;td>8.11+&lt;/td>
&lt;td>2.1+&lt;/td>
&lt;td>Chrome 53+, Firefox latest&lt;/td>
&lt;td>medic-gateway&lt;/td>
&lt;td>4.4+&lt;/td>
&lt;td>0.4.5+&lt;/td>
&lt;td>3.0+&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="hardware-requirements">Hardware requirements&lt;/h1>
&lt;h2 id="smartphones">Smartphones&lt;/h2>
&lt;p>The following is the minimum specification recommendation for smartphones to handle the typical workload of front line health workers. Users with particularly high workloads or facility or supervisor workloads will require more powerful devices.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Specification&lt;/th>
&lt;th>Minimum&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Android version&lt;/td>
&lt;td>5.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Processor&lt;/td>
&lt;td>1.0GHz dual-core&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RAM&lt;/td>
&lt;td>1GB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Storage&lt;/td>
&lt;td>8GB&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Core: Development Workflow</title><link>https://docs.communityhealthtoolkit.org/beta/core/process/workflow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/beta/core/process/workflow/</guid><description>
&lt;h2 id="code">Code&lt;/h2>
&lt;h3 id="writing">Writing&lt;/h3>
&lt;p>Where possible, follow our coding &lt;a href="https://docs.communityhealthtoolkit.org/beta/docs-style-guide/">style guide&lt;/a>.&lt;/p>
&lt;p>Aim for self-documenting code. Where code cannot be made self-documenting add commenting. Usually comments are useful when they explain why some code exists, and should not be explaining what some code is doing.&lt;/p>
&lt;h3 id="reviewing">Reviewing&lt;/h3>
&lt;p>The author and reviewer should use this &lt;a href="https://google.github.io/eng-practices/review/developer/">guide to code reviewing&lt;/a>.&lt;/p>
&lt;h3 id="testing">Testing&lt;/h3>
&lt;p>All features and bug fixes must have at least one unit test. All features must have at least one end-to-end test.&lt;/p>
&lt;h3 id="migrating">Migrating&lt;/h3>
&lt;p>When the schema is changed you must also provide a migration so when instances are upgraded existing data is compatible with the new code.&lt;/p>
&lt;h2 id="commits">Commits&lt;/h2>
&lt;p>The main branch is &lt;code>master&lt;/code> which must be kept stable so as not to impact other developers and so we can take a release branch as needed. To achieve this we do (almost) all development in a branch and submit a PR for code review. This means the CI runs and another developer has signed off on the change before it hits the &lt;code>master&lt;/code> branch.&lt;/p>
&lt;p>Format your commit messages according to Git standards. First line should be a short title/summary (50 characters or so) with more details in a separate paragraph, respecting 79 character line widths. Using &lt;code>git commit -v&lt;/code> is recommended to review your diff while you write your commit message.&lt;/p>
&lt;p>See tips on &lt;a href="https://chris.beams.io/posts/git-commit/">How to Write a Git Commit Message&lt;/a> and add your favorites here.&lt;/p>
&lt;blockquote>
&lt;p>Every good commit message should be able to complete the following sentence:&lt;/p>
&lt;p>When applied, this commit will: {{YOUR COMMIT MESSAGE}}&lt;/p>
&lt;/blockquote>
&lt;p>Never force push remote. Prefer rebasing over merging as it makes for a cleaner history.&lt;/p>
&lt;p>Commit reformats and refactors separately from actual code changes to make reviewing easier.&lt;/p>
&lt;p>For more help with Git see: &lt;a href="./using-git.md">Using Git&lt;/a>.&lt;/p>
&lt;h2 id="branches">Branches&lt;/h2>
&lt;ul>
&lt;li>The main branch is &lt;code>master&lt;/code> and is the github default branch and contains the latest code.&lt;/li>
&lt;li>Release branches have the form &lt;code>&amp;lt;major&amp;gt;.&amp;lt;minor&amp;gt;.x&lt;/code> and should be stable.&lt;/li>
&lt;li>Feature branches have the form &lt;code>&amp;lt;issue-number&amp;gt;-&amp;lt;issue-description&amp;gt;&lt;/code> and are work in progress.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note&lt;/strong>: When backporting changes to an earlier release branch you should &lt;code>git cherry-pick&lt;/code> the appropriate commit(s) from &lt;code>master&lt;/code> into the release branch. Then use a pull request to make sure tests pass on Travis before merging (you do not need to get the pull request approved if there were no conflicts when cherry-picking).&lt;/p>
&lt;h1 id="issues">Issues&lt;/h1>
&lt;p>Issues are managed in Github. Issues should be created in the repository where the changes need to be made. If it is not clear in which repo to open an issue the default should be the &lt;code>medic&lt;/code> repository. If it is a security or sensitive issue it should be opened in the private &lt;code>medic-projects&lt;/code> repository.&lt;/p>
&lt;p>When creating issues add the appropriate &lt;a href="https://github.com/medic/medic/labels?utf8=%E2%9C%93&amp;amp;q=Priority%3A+">Priority&lt;/a> and &lt;a href="https://github.com/medic/medic/labels?utf8=%E2%9C%93&amp;amp;q=Type%3A+">Type&lt;/a> labels.&lt;/p>
&lt;h2 id="project-states">Project States&lt;/h2>
&lt;p>When the issue is scheduled for development it will be added to the appropriate &lt;a href="https://github.com/orgs/medic/projects?query=is%3Aopen+sort%3Aname-asc">organisation project&lt;/a> named after the webapp version it will be released with. Each column in the project represents the state the issue is in.&lt;/p>
&lt;h3 id="to-do">To do&lt;/h3>
&lt;p>Issues in this column have been scheduled to be released with this webapp version. The issue has all the detail needed to begin design and development and it is free for anyone to start work on. If you start work on an issue assign it to yourself and move it to &amp;ldquo;In progress&amp;rdquo;.&lt;/p>
&lt;h3 id="in-progress">In progress&lt;/h3>
&lt;p>Issues in this column are being actively worked on, which includes development, design, and code reviews.&lt;/p>
&lt;p>Any code should be in a feature branch in each of the repositories you update. The name of the feature branch should be in the form &lt;code>&amp;lt;issue-number&amp;gt;-&amp;lt;readable-name&amp;gt;&lt;/code>, for example &lt;code>1104-inclusive-export&lt;/code>. Once you&amp;rsquo;re satisfied with your changes:&lt;/p>
&lt;ol>
&lt;li>Submit a PR for each of the repositories. Each PR message and description will become the commit message and description so keep the message consise, describe what and why rather than how, and link to the issue in the description (eg: &amp;ldquo;medic/cht-core#123&amp;rdquo;).&lt;/li>
&lt;li>If AT is required update the issue with AT instructions.&lt;/li>
&lt;li>Wait for the builds to succeed and ensure there are no conflicts with the &lt;code>master&lt;/code> branch so the PR can be merged.&lt;/li>
&lt;li>Pick at least one Reviewer for the PR and work with them until the code passes review.&lt;/li>
&lt;li>If the issue requires AT then move the issue to &amp;ldquo;Ready for AT&amp;rdquo; for QA to test. Otherwise merge the PR, delete the branch, and close the issue.&lt;/li>
&lt;/ol>
&lt;h3 id="ready-for-at">Ready for AT&lt;/h3>
&lt;p>Issues in this column are ready to be acceptance tested by a Quality Assurance engineer. When picking up an issue for AT:&lt;/p>
&lt;ol>
&lt;li>Check that the PR has no merge conflicts with &lt;code>master&lt;/code> and all required builds have passed. If not, notify the original developer to fix the branch and find another issue to AT.&lt;/li>
&lt;li>Assign it to yourself.&lt;/li>
&lt;li>Move it to the &amp;ldquo;AT in progress&amp;rdquo; column&lt;/li>
&lt;/ol>
&lt;h3 id="at-in-progress">AT in progress&lt;/h3>
&lt;p>Issues in this column are in the process of being acceptance tested by a Quality Assurance engineer. To complete AT:&lt;/p>
&lt;ol>
&lt;li>Install the PR branch to test against.&lt;/li>
&lt;li>If the issue fails AT then notify the original developer and move the issue back to &amp;ldquo;In progress&amp;rdquo;.&lt;/li>
&lt;li>Once the issue passes AT move the issue to &amp;ldquo;Ready to merge&amp;rdquo; the notify the original developer to merge the PR.&lt;/li>
&lt;/ol>
&lt;h3 id="ready-to-merge">Ready to merge&lt;/h3>
&lt;p>Issues in this column have passed AT and can be merged as soon as possible. The original developer will then:&lt;/p>
&lt;ol>
&lt;li>Write a useful commit message in the PR.&lt;/li>
&lt;li>Click the button to &amp;ldquo;Squash and Merge&amp;rdquo; the PR.&lt;/li>
&lt;li>Delete the PR branch.&lt;/li>
&lt;li>If a backport is required cherry-pick the merged commit back to the release branches it&amp;rsquo;s required in.&lt;/li>
&lt;li>Close the issue. This will automatically move it to &amp;ldquo;Done&amp;rdquo;.&lt;/li>
&lt;/ol>
&lt;h3 id="done">Done&lt;/h3>
&lt;p>Issues in this column have passed acceptance testing and been merged into &lt;code>master&lt;/code> and/or release branches ready for release.&lt;/p>
&lt;h2 id="triaging-old-issues">Triaging old issues&lt;/h2>
&lt;p>We periodically run a &lt;a href="https://github.com/medic/github-issue-roulette">script&lt;/a> against medic issues. We do this to catch two situations:&lt;/p>
&lt;ul>
&lt;li>Issues that do not have the three labels they need (Type, Priority and Status)&lt;/li>
&lt;li>Issues that have not been touched in 90 days&lt;/li>
&lt;/ul>
&lt;p>The plan is to keep cruft in our issue DB to a minimum, and have them curated into a colletion of detailed clear issues that can and should be actionable in the near to mid future.&lt;/p>
&lt;p>You will occasionally get assigned issues and asked to deal with one or both of the above problems.&lt;/p>
&lt;h3 id="what-do-i-do-when-i-get-one-of-these-issues">What do I do when I get one of these issues?&lt;/h3>
&lt;p>Use your judgement (or someone else&amp;rsquo;s, feel free to pull in others either directly on the issue or via Slack etc) to decide:&lt;/p>
&lt;ul>
&lt;li>Is its description too vague? Is it detailed enough to be actionable?&lt;/li>
&lt;li>Is this something we want to do &lt;strong>in the near future&lt;/strong>? Does it fit with our product etc?&lt;/li>
&lt;li>If this is an older issue, do you think it is still relevant? Is there still interest? (If there is no interest it can be closed: it can always be re-opened or re-written in the future)&lt;/li>
&lt;li>Is this covered by existing issues, or existing plans?&lt;/li>
&lt;li>If it&amp;rsquo;s a bug, does it have: steps to reproduce; expected behaviour; actual behaviour; server info, browser info, screenshots etc where applicable?&lt;/li>
&lt;/ul>
&lt;p>From this decide if you need to go back to the issue creator for more information, or close the issue (using one of the &lt;code>Won't Fix&lt;/code> labels), or keep it.&lt;/p>
&lt;p>Additionally, if there are missing labels:&lt;/p>
&lt;ul>
&lt;li>Type should be reasonably obvious: which of those labels most fits the issue&lt;/li>
&lt;li>Status should almost certainly be &lt;code>Status: 1 - Triaged&lt;/code>&lt;/li>
&lt;li>Priority is dependent on the severity of the problem: if it&amp;rsquo;s a production issue it&amp;rsquo;s probably high, if it&amp;rsquo;s a minor thing it&amp;rsquo;s probably low, medium for everything else (but use your judgement)&lt;/li>
&lt;/ul>
&lt;h3 id="anything-else">Anything else?&lt;/h3>
&lt;p>Regardless of what you do with the issue, please:&lt;/p>
&lt;ul>
&lt;li>Remove the &lt;code>Needs Triage&lt;/code> label once triage is complete&lt;/li>
&lt;li>Document the reasoning by commenting in the issue. This will help reduce mistakes, as the reasoning will be available for everyone to read, and any mistakes there can be rectified.&lt;/li>
&lt;/ul>
&lt;h1 id="workflow-for-contributing-to-cht-docs">Workflow for contributing to cht-docs&lt;/h1>
&lt;p>Unlike the above development workflow, the workflow for contributing to &lt;a href="https://github.com/medic/cht-docs">cht-docs&lt;/a> does not involve release management and Acceptance Testing. In order to streamline the process of contributing to docs while still maintaining quality, please submit a pull request with any changes to &lt;a href="https://github.com/medic/cht-docs">cht-docs&lt;/a>. One of the repository&amp;rsquo;s maintainers will review the PR, request additional changes as needed, and merge the PR when it is ready.&lt;/p>
&lt;p>Where possible, please follow our &lt;a href="https://docs.communityhealthtoolkit.org/beta/docs-style-guide/">docs style guide&lt;/a>.&lt;/p></description></item><item><title>Core: Releasing</title><link>https://docs.communityhealthtoolkit.org/beta/core/process/releasing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/beta/core/process/releasing/</guid><description>
&lt;h2 id="cht-core">CHT core&lt;/h2>
&lt;p>&lt;a href="https://github.com/medic/cht-core/issues/new/choose">Create an issue&lt;/a> for either a Major/Minor or Patch release issue template and assign it to the release manager to follow the process.&lt;/p>
&lt;h2 id="medic-conf">medic-conf&lt;/h2>
&lt;p>Follow the &lt;a href="https://github.com/medic/medic-conf/#releasing">instructions in the readme&lt;/a>.&lt;/p>
&lt;h2 id="android-apps">Android apps&lt;/h2>
&lt;p>All medic Android projects automatically build, sign, and publish builds via Travis. To create a new release:&lt;/p>
&lt;ol>
&lt;li>Determine what version the build will be. This should be a valid semver (eg. &lt;code>v1.1.1&lt;/code>). Increment the semver appropriately based on the latest release version:
&lt;ul>
&lt;li>&lt;a href="https://github.com/medic/medic-android/releases">medic-android&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/medic/medic-gateway/releases">medic-gateway&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/medic/medic-collect/releases">medic-collect&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/medic/rdt-capture/releases">rdt-capture&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Tag the commit in &lt;code>master&lt;/code> which you&amp;rsquo;d like to release. Use &lt;code>git tag v1.1.1&lt;/code> with the version from above and then run &lt;code>git push --tags&lt;/code>.&lt;/li>
&lt;li>Wait for the build to complete. You can monitor the build via travis-ci.org.&lt;/li>
&lt;li>&lt;strong>To Release via the Google Play Store&lt;/strong> - Login to the &lt;a href="https://play.google.com/apps/publish/">Google Play Console&lt;/a> and select the app flavor for release. Navigate to &amp;ldquo;Release Management &amp;gt; Alpha&amp;rdquo; and click &amp;ldquo;Release to Beta&amp;rdquo;. Repeat this for each flavor.&lt;/li>
&lt;li>&lt;strong>To Side-Load&lt;/strong> (for Collect and Gateway) - Navigate to the GitHub Releases page (linked above) and download the relevant APKs for distribution.&lt;/li>
&lt;/ol></description></item><item><title>Core: Updating Dependencies</title><link>https://docs.communityhealthtoolkit.org/beta/core/process/update-dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/beta/core/process/update-dependencies/</guid><description>
&lt;p>Every minor release we update dependencies to get the latest fixes and improvements. We do this early in the release cycle so that we have some more time to find regressions and issues. This is done on all folders with a package.json, including:&lt;/p>
&lt;ul>
&lt;li>cht-core
&lt;ul>
&lt;li>/ (root)&lt;/li>
&lt;li>/admin&lt;/li>
&lt;li>/api&lt;/li>
&lt;li>/sentinel&lt;/li>
&lt;li>/shared-libs/*&lt;/li>
&lt;li>/webapp&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>medic-conf&lt;/li>
&lt;/ul>
&lt;h2 id="steps">Steps&lt;/h2>
&lt;ol>
&lt;li>&lt;code>git checkout master &amp;amp;&amp;amp; git pull&lt;/code> - get the latest code&lt;/li>
&lt;li>&lt;code>git checkout -b &amp;quot;&amp;lt;issue&amp;gt;-update-dendencies&amp;quot;&lt;/code> - make a branch&lt;/li>
&lt;/ol>
&lt;p>Then for each folder go through these steps.&lt;/p>
&lt;ol>
&lt;li>&lt;code>npm ci&lt;/code> - update your local node_modules to match expected&lt;/li>
&lt;li>&lt;code>npm outdated&lt;/code> - report on any dependencies which aren&amp;rsquo;t at the latest&lt;/li>
&lt;li>&lt;code>npm install --save[-dev] package@version&lt;/code> - install the latest version (be careful and read the release notes if the new version is a major change from the current)&lt;/li>
&lt;li>&lt;code>npm dedupe&lt;/code> - remove duplicated dependencies&lt;/li>
&lt;li>&lt;code>npm audit fix&lt;/code> - automatically fix any nested dependencies with vulnerabilities&lt;/li>
&lt;li>&lt;code>npm audit&lt;/code> - get a report on any remaining vulnerabilities and manually scan it to see if there&amp;rsquo;s anything else you can do&lt;/li>
&lt;/ol>
&lt;h2 id="problems">Problems&lt;/h2>
&lt;ul>
&lt;li>Don&amp;rsquo;t update bootstrap to 4+ as it has many breaking changes. One day we will either raise an issue to upgrade it or migrate off it, but that is outside the scope of this change.&lt;/li>
&lt;li>Don&amp;rsquo;t update bootstrap-daterangepicker.&lt;/li>
&lt;li>Don&amp;rsquo;t update select2 as the latest patch always seems to fail.&lt;/li>
&lt;li>Make sure the version of &lt;code>api/enketo-xslt&lt;/code> is the same as &lt;code>webapp/enketo-core/enketo-transformer/enketo-xslt&lt;/code>.&lt;/li>
&lt;li>Make sure the version of &lt;code>webapp/jquery&lt;/code> is the same as &lt;code>webapp/enketo-core/jquery&lt;/code>.&lt;/li>
&lt;li>If you have trouble upgrading any other dependency and you think it&amp;rsquo;ll be challenging to fix it then raise a new issue to upgrade just that dependency. Don&amp;rsquo;t hold up all the other upgrades you&amp;rsquo;ve made.&lt;/li>
&lt;/ul>
&lt;h2 id="troubleshooting">Troubleshooting&lt;/h2>
&lt;h3 id="npm-errno--17">npm errno -17&lt;/h3>
&lt;p>If &lt;code>npm ci&lt;/code> errors with &amp;ldquo;errno -17&amp;rdquo; in shared-libs you may need to manually remove the nested dependencies from the package-lock.json. This needs move investigation to work out why this is happening.&lt;/p>
&lt;h3 id="select2-is-not-a-function">select2 is not a function&lt;/h3>
&lt;p>If you get &lt;code>TypeError: &amp;quot;$(...).select2 is not a function&amp;quot;&lt;/code> then either:&lt;/p>
&lt;ol>
&lt;li>You bumped select2. For some reason this breaks it.&lt;/li>
&lt;li>You have multiple jquery libraries and select2 is getting attached to one but not the other. Make sure the jquery versions in enketo-core and webapp match and you&amp;rsquo;ve &lt;code>run dedupe&lt;/code> to remove the enketo-core copy.&lt;/li>
&lt;/ol></description></item><item><title>Core: Coding Style Guide</title><link>https://docs.communityhealthtoolkit.org/beta/core/process/style-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/beta/core/process/style-guide/</guid><description>
&lt;p>This is a guide, not a law - use your discretion. Mostly based on &lt;a href="https://github.com/felixge/node-style-guide">Felix GeisendÃ¶rfer&amp;rsquo;s&lt;/a> guide with our own tweaks.&lt;/p>
&lt;h2 id="indention">Indention&lt;/h2>
&lt;p>Use 2 spaces for indenting your code and swear an oath to never mix tabs and
spaces - a special kind of hell is awaiting you otherwise.&lt;/p>
&lt;h2 id="newlines">Newlines&lt;/h2>
&lt;p>Use UNIX-style newlines (&lt;code>\n&lt;/code>), and a newline character as the last character
of a file. Windows-style newlines (&lt;code>\r\n&lt;/code>) are forbidden inside any repository.&lt;/p>
&lt;h2 id="no-trailing-whitespace">No trailing whitespace&lt;/h2>
&lt;p>Just like you brush your teeth after every meal, you clean up any trailing
whitespace in your JS files before committing. Otherwise the rotten smell of
careless neglect will eventually drive away contributors and/or co-workers.&lt;/p>
&lt;h2 id="use-semicolons">Use Semicolons&lt;/h2>
&lt;p>According to &lt;a href="http://news.ycombinator.com/item?id=1547647">scientific research&lt;/a>, the usage of semicolons is
a core value of our community. Consider the points of &lt;a href="http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding">the opposition&lt;/a>, but
be a traditionalist when it comes to abusing error correction mechanisms for
cheap syntactic pleasures.&lt;/p>
&lt;h2 id="use-single-quotes">Use single quotes&lt;/h2>
&lt;p>Use single quotes, unless you are writing JSON.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;bar&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;bar&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="opening-braces-go-on-the-same-line">Opening braces go on the same line&lt;/h2>
&lt;p>Your opening braces go on the same line as the statement, with whitespace before and after the condition, followed by a new line.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;winning&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;losing&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;losing&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
&lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;winning&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="method-chaining">Method chaining&lt;/h2>
&lt;p>One method per line should be used if you want to chain methods.&lt;/p>
&lt;p>You should also indent these methods so it&amp;rsquo;s easier to tell they are part of the same chain.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#000">User&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">findOne&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span> &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;foo&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">populate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;bar&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">exec&lt;/span>&lt;span style="color:#000;font-weight:bold">(()&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#000">User&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">findOne&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span> &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;foo&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">populate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;bar&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">exec&lt;/span>&lt;span style="color:#000;font-weight:bold">(()&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">User&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">findOne&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span> &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;foo&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">populate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;bar&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">exec&lt;/span>&lt;span style="color:#000;font-weight:bold">(()&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">User&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">findOne&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span> &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;foo&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">}).&lt;/span>&lt;span style="color:#000">populate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;bar&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">exec&lt;/span>&lt;span style="color:#000;font-weight:bold">(()&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">User&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">findOne&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span> &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;foo&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">}).&lt;/span>&lt;span style="color:#000">populate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;bar&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">exec&lt;/span>&lt;span style="color:#000;font-weight:bold">(()&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="use-lowercamelcase-for-variables-properties-and-function-names">Use lowerCamelCase for variables, properties, and function names&lt;/h2>
&lt;p>Variables, properties and function names should use &lt;code>lowerCamelCase&lt;/code>. They
should also be descriptive. Single character variables and uncommon
abbreviations should generally be avoided.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">adminUser&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">query&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">admin_user&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">query&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="use-uppercamelcase-for-class-names">Use UpperCamelCase for class names&lt;/h2>
&lt;p>Class names should be capitalized using &lt;code>UpperCamelCase&lt;/code>.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">BankAccount&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">bank_Account&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="use-const-and-let">Use &lt;code>const&lt;/code> and &lt;code>let&lt;/code>&lt;/h2>
&lt;p>There is no longer a good reason to use &lt;code>var&lt;/code>. Use &lt;code>const&lt;/code> whenever you can,
and &lt;code>let&lt;/code> when you must. Hardcoded constants should be named in all UPPERCASE.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">DELAY&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">output&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">input&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">let&lt;/span> &lt;span style="color:#000">temp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">50&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">let&lt;/span> &lt;span style="color:#000">unknown&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">DELAY&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="use-arrow-functions">Use arrow functions&lt;/h2>
&lt;p>Use arrow functions as much as possible for cleaner code and better scoping. Omit the
return keyword when the entire function definition fits on one line. Omit the parens
when taking a single parameter.&lt;/p>
&lt;p>There are exceptions to this rule including when you want to access &lt;code>arguments&lt;/code> or
&lt;code>this&lt;/code>, or when you want to be able to debug browserified code.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">let&lt;/span> &lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">append&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">combine&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">getResult&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000">result&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">let&lt;/span> &lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">append&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">combine&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">function&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">getResult&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span>
&lt;span style="color:#000">result&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="object--array-creation">Object / Array creation&lt;/h2>
&lt;p>Put short declarations on a single line. For long declarations put a line
break after each comma.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;hello&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;world&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">good&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;code&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;is generally&amp;#39;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;pretty&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;hello&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;world&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;good&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;code&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">is&lt;/span> &lt;span style="color:#000">generally&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;pretty&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;one&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;two&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;three&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;four&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="use-the--operator">Use the === operator&lt;/h2>
&lt;p>Programming is not about remembering &lt;a href="https://developer.mozilla.org/en/JavaScript/Reference/Operators/Comparison_Operators">stupid rules&lt;/a>. Use
the triple equality operator as it will work just as expected.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!==&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;winning&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;losing&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="do-not-extend-built-in-prototypes">Do not extend built-in prototypes&lt;/h2>
&lt;p>Do not extend the prototype of native JavaScript objects. Your future self will be forever grateful.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[];&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">length&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;winning&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87">Array&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">prototype&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">empty&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">function&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">length&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[];&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">empty&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;losing&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="use-descriptive-conditions">Use descriptive conditions&lt;/h2>
&lt;p>Any non-trivial conditions should be assigned to a descriptively named variable or function:&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">isValidPassword&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">password&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">length&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#4e9a06">/^(?=.*\d).{4,}$/&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">test&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">password&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">isValidPassword&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;winning&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">password&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">length&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#4e9a06">/^(?=.*\d).{4,}$/&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">test&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">password&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;losing&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="write-small-functions">Write small functions&lt;/h2>
&lt;p>Keep your functions short. A good function fits on a slide that the people in
the last row of a big room can comfortably read. So don&amp;rsquo;t count on them having
perfect vision and limit yourself to ~15 lines of code per function.&lt;/p>
&lt;h2 id="return-early-from-functions">Return early from functions&lt;/h2>
&lt;p>To avoid deep nesting of if-statements, always return a function&amp;rsquo;s value as early
as possible.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">isPercentage&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">val&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">val&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">val&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">isPercentage&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">val&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">val&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">val&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or for this particular example it may also be fine to shorten things even
further:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">isPercentage&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">val&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">isInRange&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">val&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">val&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">isInRange&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="adding-documentation-comments">Adding documentation comments&lt;/h2>
&lt;p>To add documentation comments that will be built using jsdocs, use
&lt;a href="https://jsdoc.app/">jsdoc block tags&lt;/a>. For angular code use the
&lt;a href="https://www.npmjs.com/package/angular-jsdoc#tags-available">angular tags&lt;/a>, see
&lt;a href="https://www.npmjs.com/package/angular-jsdoc#example">examples&lt;/a>.&lt;/p>
&lt;p>Try to write comments that explain higher level mechanisms or clarify
difficult segments of your code. Don&amp;rsquo;t use comments to restate trivial
things.&lt;/p>
&lt;p>&lt;em>Right:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * &amp;#39;ID_SOMETHING=VALUE&amp;#39; -&amp;gt; [&amp;#39;ID_SOMETHING=VALUE&amp;#39;, &amp;#39;SOMETHING&amp;#39;, &amp;#39;VALUE&amp;#39;]
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * @type {boolean}
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">matches&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">item&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">match&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">/ID_([^\n]+)=([^\n]+)/&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * Loads a user. This function has a nasty side effect where a failure to increment a
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * redis counter used for statistics will cause an exception. This needs
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * to be fixed in a later iteration.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * @param {string} id the user id
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * @param {function} cb a callback function that applied to the user
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">loadUser&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">cb&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000;font-weight:bold">...&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Wrong:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * Execute a regex
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">matches&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">item&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">match&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">/ID_([^\n]+)=([^\n]+)/&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * Usage: loadUser(5, function() { ... })
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">loadUser&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">cb&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000;font-weight:bold">...&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> * Check if the session is valid
&lt;/span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">isSessionValid&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">session&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">expires&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#204a87">Date&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">now&lt;/span>&lt;span style="color:#000;font-weight:bold">());&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/** If the session is valid */&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">isSessionValid&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000;font-weight:bold">...&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="objectfreeze-objectpreventextensions-objectseal-with-eval">Object.freeze, Object.preventExtensions, Object.seal, with, eval&lt;/h2>
&lt;p>Crazy stuff that you will probably never need. Stay away from it.&lt;/p>
&lt;h2 id="getters-and-setters">Getters and setters&lt;/h2>
&lt;p>Do not use setters, they cause more problems for people who try to use your
software than they can solve.&lt;/p>
&lt;p>Feel free to use getters that are free from &lt;a href="http://en.wikipedia.org/wiki/Side_effect_(computer_science)">side effects&lt;/a>, like
providing a length property for a collection class.&lt;/p></description></item><item><title>Core: Fixing E2E Tests</title><link>https://docs.communityhealthtoolkit.org/beta/core/guides/fixing-e2e-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/beta/core/guides/fixing-e2e-tests/</guid><description>
&lt;h1 id="how-to-fix-e2e-tests">How to fix e2e tests&lt;/h1>
&lt;p>End to end (e2e) tests can be really difficult to debug - sometimes they fail seemingly at random, and sometimes they only fail on certain environments (eg: ci but not locally). This can make reproducing and reliably fixing the issue challenging, so here are some tips to help!&lt;/p>
&lt;h2 id="read-the-protractor-logs">Read the protractor logs&lt;/h2>
&lt;p>Read the failure carefully - it often has really good info but sometimes it&amp;rsquo;s just hard to find. Most importantly it tells you exactly the line in the test that failed and you can look that up in the source to see what protractor was trying to do. The error message itself is also really useful. Also sometimes one error causes the next, so always start with the first test failure before looking at the others.&lt;/p>
&lt;h3 id="known-failure-patterns">Known failure patterns&lt;/h3>
&lt;ul>
&lt;li>Can&amp;rsquo;t click on an element because another element would get the click. This usually means a modal dialog was being shown. 90% of the time this is the update notification modal which means some settings change has been detected after the test started execution.&lt;/li>
&lt;li>Stale element. This means the DOM element has been removed after protractor found it on the page but before you tried to do something with it. I generally try to get protractor to find the element just before I need it to reduce the chance of this happening.&lt;/li>
&lt;/ul>
&lt;h2 id="other-logs">Other logs&lt;/h2>
&lt;p>The API and Sentinel logs are sometimes useful, particularly if API has crashed. These are available locally under &lt;code>/tests/logs/&lt;/code> and for CI builds &lt;a href="https://s3.console.aws.amazon.com/s3/buckets/medic-e2e/">on AWS&lt;/a>.&lt;/p>
&lt;h2 id="screenshots">Screenshots&lt;/h2>
&lt;p>We automatically take screenshots when a test fails and store it locally in &lt;code>/tests/results/&lt;/code> and for CI builds &lt;a href="https://s3.console.aws.amazon.com/s3/buckets/medic-e2e/">on AWS&lt;/a>. These can be particularly useful if a dialog was blocking a click.&lt;/p>
&lt;h2 id="running-just-the-failing-test">Running just the failing test&lt;/h2>
&lt;h3 id="option-1">Option 1&lt;/h3>
&lt;p>Running e2e tests can be quite slow so to save time modify the &lt;code>specs&lt;/code> property of &lt;code>/tests/base.conf.js&lt;/code> so it only finds your test. You can also change &lt;code>describe&lt;/code> and &lt;code>it&lt;/code> to &lt;code>xdescribe&lt;/code> and &lt;code>xit&lt;/code> to skip specific tests.&lt;/p>
&lt;h3 id="option-2">Option 2&lt;/h3>
&lt;p>Alternatively you can run API in test mode using:&lt;/p>
&lt;pre>&lt;code>API_PORT=4988 COUCH_URL=http://admin:pass@localhost:5984/medic-test node server.js
&lt;/code>&lt;/pre>&lt;p>Then grep for just the tests you want to run:&lt;/p>
&lt;pre>&lt;code>protractor /home/kenn/webapp/tests/e2e.tests.conf.js --specs='/home/kenn/webapp/tests/e2e/api/controllers/_changes.spec.js' --grep=&amp;quot;should allow DB admins to POST to _changes&amp;quot;
&lt;/code>&lt;/pre>&lt;h3 id="option-3">Option 3&lt;/h3>
&lt;p>Use the &amp;ldquo;Protractor test runner&amp;rdquo; extension for VSCode.&lt;/p>
&lt;h2 id="watching-the-test-run">Watching the test run&lt;/h2>
&lt;p>Running the tests locally with &lt;code>grunt e2e-debug&lt;/code> will allow you to watch it run but if you interact with the page the test will fail in unexpected ways. Furthermore the browser will close after a short timeout so you won&amp;rsquo;t be able to inspect the console or DOM. To do this, force quit the process running the test before it tears down and you will be able to navigate around the app, use Chrome dev tools, and inspect the docs in the database to (hopefully) work out what&amp;rsquo;s going wrong.&lt;/p></description></item><item><title>Core: Using Git</title><link>https://docs.communityhealthtoolkit.org/beta/core/guides/using-git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/beta/core/guides/using-git/</guid><description>
&lt;p>New to Git or need a refesher?&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://git-scm.com/docs/gittutorial">A tutorial introduction to Git&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://git-scm.com/docs/gittutorial-2">A tutorial introduction to Git: part two&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://git-scm.com/docs/gitcore-tutorial">A Git core tutorial for developers&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>If you&amp;rsquo;re on Unix, these are also likely installed as man pages:&lt;/p>
&lt;pre>&lt;code>man gittutorial
man gittutorial-2
man gitcore-tutorial
&lt;/code>&lt;/pre>&lt;p>For more reading, &lt;a href="https://git-scm.com/book">Pro Git&lt;/a> is available online, and
&lt;a href="https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain">Chapter 10: Git Internals&lt;/a>
is quite helpful.&lt;/p>
&lt;p>Published a commit by mistake? GitHub has a decent writeup on that:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://help.github.com/articles/removing-sensitive-data-from-a-repository/">Removing sensitive data from a repository&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="how-to-extract-a-module-from-an-existing-repo">How To Extract a Module From an Existing Repo&lt;/h2>
&lt;p>The following are the steps I used for creating &lt;a href="https://github.com/medic/medic-smsparser">medic-smsparser&lt;/a> based off medic.&lt;/p>
&lt;p>First git clone using a URL scheme rather than plain file system path otherwise
you will get hard links instead of a copy.&lt;/p>
&lt;pre>&lt;code>git clone git@github.com:medic/medic.git
&lt;/code>&lt;/pre>&lt;p style="text-align:center">or&lt;/p>
&lt;pre>&lt;code>git clone file:///home/linus/dev/medic
&lt;/code>&lt;/pre>&lt;p>Then compile a list of files you are interested in. If you only have a single directory
you need then read about the &lt;code>--subdirectory-filter&lt;/code> option of
&lt;code>filter-branch&lt;/code>. In this how-to I&amp;rsquo;m using a set of files:&lt;/p>
&lt;pre>&lt;code>$ cat files
packages/kujua-sms/kujua-sms/validate.js
packages/kujua-sms/views/lib/javarosa_parser.js
packages/kujua-sms/views/lib/mp_parser.js
packages/kujua-sms/views/lib/smsparser.js
packages/kujua-sms/views/lib/textforms_parser.js
packages/kujua-sms/kujua-sms/utils.js
tests/nodeunit/form_definitions.js
tests/nodeunit/unit/kujua-sms/smsparser.js
tests/nodeunit/unit/kujua-sms/smsparser_compact_textform.js
tests/nodeunit/unit/kujua-sms/textforms_parser.js
tests/nodeunit/unit/kujua-sms/validate.js
&lt;/code>&lt;/pre>&lt;p>Next query the git history for any file renames by using &lt;code>--follow&lt;/code>:&lt;/p>
&lt;pre>&lt;code>for i in `cat files`; do \
git log --oneline --name-only --follow --all -- &amp;quot;$i&amp;quot; | \
egrep -v -e '^[0-9A-Fa-f]+\s'; \
done | sort | uniq &amp;gt; all-files
&lt;/code>&lt;/pre>&lt;p>In the following commands I assume the branch we are working on is &lt;code>master&lt;/code>, but this could easily be applied to any branch.&lt;/p>
&lt;p>Take a note of your original commit count.&lt;/p>
&lt;pre>&lt;code>$ git rev-list master | wc -l
6844
&lt;/code>&lt;/pre>&lt;p>Run the filter on the current branch, this might take a little while:&lt;/p>
&lt;pre>&lt;code>git filter-branch -f --prune-empty --index-filter '\
git rm --cached -r -q -- . ; \
git reset -q $GIT_COMMIT -- \
lib/utils.js \
packages/kujua-sms-import/kujua-sms-import/smsparser.js \
packages/kujua-sms-import/views/lib/smsparser.js \
packages/kujua-sms/kujua-sms/utils.js \
packages/kujua-sms/kujua-sms/validate.js \
packages/kujua-sms/tests/kujua-sms/smsparser.js \
packages/kujua-sms/tests/kujua-sms/smsparser_compact_textform.js \
packages/kujua-sms/tests/kujua-sms/textforms_parser.js \
packages/kujua-sms/tests/kujua-sms/validate.js \
packages/kujua-sms/views/lib/javarosa_parser.js \
packages/kujua-sms/views/lib/mp_parser.js \
packages/kujua-sms/views/lib/smsparser.js \
packages/kujua-sms/views/lib/textforms_parser.js \
tests/nodeunit/form_definitions.js \
tests/nodeunit/unit/kujua-sms/smsparser.js \
tests/nodeunit/unit/kujua-sms/smsparser_compact_textform.js \
tests/nodeunit/unit/kujua-sms/textforms_parser.js \
tests/nodeunit/unit/kujua-sms/validate.js tests/smsparser.js \
views/lib/smsparser.js \
' -- --all
&lt;/code>&lt;/pre>&lt;p>Nice, less commits!&lt;/p>
&lt;pre>&lt;code>$ git rev-list master | wc -l
461
&lt;/code>&lt;/pre>&lt;p>Peruse git log a bit and do a few spot checks to see if things look right. The commit hashes have been rewritten and should only include commits where the files listed above were affected.&lt;/p>
&lt;pre>&lt;code>$ git log
$ git show d3b2be79
&lt;/code>&lt;/pre>&lt;p>But if we query on all refs (branches/tags) our rev list is still large, hrm&amp;hellip;&lt;/p>
&lt;pre>&lt;code>$ git rev-list --all | wc -l
7664
&lt;/code>&lt;/pre>&lt;p>Local repo is also still larger than expected.&lt;/p>
&lt;pre>&lt;code>$ du -hs .git
41M .git
&lt;/code>&lt;/pre>&lt;p>How many branches and tags do we have? Yikes, we&amp;rsquo;ve been busy.&lt;/p>
&lt;pre>&lt;code>$ git for-each-ref | wc -l
183
&lt;/code>&lt;/pre>&lt;p>Ok, we still have some work to do, lots of refs/tags/branches still holding on to
trees!&lt;/p>
&lt;p>First order of business is to say goodbye to the origin remote, we no longer call that home.&lt;/p>
&lt;pre>&lt;code>git remote rm origin
rm -rf .git/refs/original/ .git/refs/remotes/ .git/*_HEAD .git/logs/
&lt;/code>&lt;/pre>&lt;p>Now delete all related branches and tags:&lt;/p>
&lt;pre>&lt;code>git for-each-ref --format=&amp;quot;%(refname)&amp;quot; refs/original/ refs/tags | \
xargs -n1 git update-ref -d
&lt;/code>&lt;/pre>&lt;p>One ferocious garbage collection incantation:&lt;/p>
&lt;pre>&lt;code>$ git -c gc.reflogExpire=0 -c gc.reflogExpireUnreachable=0 -c gc.rerereresolved=0 \
-c gc.rerereunresolved=0 -c gc.pruneExpire=now gc --aggressive
&lt;/code>&lt;/pre>&lt;p>A basic check shows no errors:&lt;/p>
&lt;pre>&lt;code>$ git fsck --full
Checking object directories: 100% (256/256), done.
Checking objects: 100% (2064/2064), done.
&lt;/code>&lt;/pre>&lt;p>Look Ma, I&amp;rsquo;m all cleaned up!&lt;/p>
&lt;pre>&lt;code>$ git for-each-ref
dbcc2677aa56c40fbf83d72e6e413b86d3b2be79 commit refs/heads/master
$ git rev-list --all | wc -l
461
$ du -hs .git
384K .git
&lt;/code>&lt;/pre>&lt;p>Maybe have a play now and make sure things look right to you. Then publish your new repo!&lt;/p>
&lt;pre>&lt;code>$ git remote add origin git@github.com:medic/medic-smsparser.git
$ git push origin master
&lt;/code>&lt;/pre>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
&lt;p>Once you understand a little about git internals, have a look at &lt;code>git-filter-branch&lt;/code> manual (see also the checklist at the bottom):&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://git-scm.com/docs/git-filter-branch">git-filter-branch - Rewrite branches&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Ferocious GC&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://stackoverflow.com/questions/1904860/how-to-remove-unreferenced-blobs-from-my-git-repo/">How to remove unreferenced blobs from my git repo&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Need to update the &lt;code>rm -rf&lt;/code> command used there, the &lt;code>git update-ref -d&lt;/code> that comes after takes care of most of that except the &lt;code>refs/logs&lt;/code> part. Will try next time.&lt;/p>
&lt;/div></description></item><item><title>Core: Using NPM</title><link>https://docs.communityhealthtoolkit.org/beta/core/guides/using-npm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/beta/core/guides/using-npm/</guid><description>
&lt;h2 id="npm-orgs">npm Orgs&lt;/h2>
&lt;p>We use npm Orgs to organize our npm packages. It provides a centralized way
to manage a team&amp;rsquo;s published npm packages and permissions. Here are some
guidelines when using this service.&lt;/p>
&lt;p>See &lt;a href="https://www.npmjs.com/docs/orgs/">https://www.npmjs.com/docs/orgs/&lt;/a> for more information.&lt;/p>
&lt;p>Our organization is &lt;code>medic&lt;/code> or using npm&amp;rsquo;s notation, &lt;code>@medic&lt;/code>.&lt;/p>
&lt;p>We also created &lt;code>@medicmobile&lt;/code> but it&amp;rsquo;s not currently in use, it was created to
reserve the namespace.&lt;/p>
&lt;h3 id="adding-a-package">Adding a Package&lt;/h3>
&lt;p>When you publish an npm module on npmjs.com, add it to the developers team
under the &lt;code>@medic&lt;/code> org.&lt;/p>
&lt;p>This can be done using the web interface:&lt;/p>
&lt;ul>
&lt;li>Login to npmjs.com then Navigate to &lt;a href="https://www.npmjs.com/org/medic/team/developers">Medic Developer&amp;rsquo;s Team&lt;/a>
and add your package there.&lt;/li>
&lt;/ul>
&lt;p>Or command line:&lt;/p>
&lt;ul>
&lt;li>Change your directory to where the package&amp;rsquo;s &lt;code>package.json&lt;/code> lives, then run:&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>npm access grant read-write medic:developers
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Then &lt;code>npm access&lt;/code> should show the updated permissions for the team members.&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>$ npm access ls-collaborators
{
&amp;quot;mandric&amp;quot;: &amp;quot;read-write&amp;quot;,
&amp;quot;estellecomment&amp;quot;: &amp;quot;read-write&amp;quot;,
&amp;quot;garethbowen&amp;quot;: &amp;quot;read-write&amp;quot;,
&amp;quot;scdf&amp;quot;: &amp;quot;read-write&amp;quot;,
&amp;quot;alxndrsn&amp;quot;: &amp;quot;read-write&amp;quot;,
}
&lt;/code>&lt;/pre>&lt;h3 id="using-an-org-scoped-package">Using an Org Scoped Package&lt;/h3>
&lt;p>A scope should be specified when a published package is a fork of an existing
package, but otherwise scope is not needed since there is no conflict with the
registry.&lt;/p>
&lt;p>For example if you fork &lt;code>moment&lt;/code> and you can&amp;rsquo;t get your changes merged upstream
and need to publish a new package then modify the package name (in
package.json) to specify a organizational scope, like &lt;code>@medic/moment&lt;/code> and publish it.&lt;/p>
&lt;p>For more info see &lt;a href="https://www.npmjs.com/docs/orgs/publishing-an-org-scoped-package.html">Publishing an Org Scoped Package&lt;/a>.&lt;/p></description></item><item><title>Core: How to bulk load users</title><link>https://docs.communityhealthtoolkit.org/beta/core/guides/users-bulk-load/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/beta/core/guides/users-bulk-load/</guid><description>
&lt;p>First, using the webapp, create the top level places/facilities like
districts/branches that the users will belong to. Save the UUIDs of these
places in a spreadsheet with their names.&lt;/p>
&lt;p>Then use curl against the users API to create the user, place and contact. In
this example the place and contact.parent are the same so we&amp;rsquo;re creating
&lt;code>demo*&lt;/code> users that can manage records associated to a specific place.&lt;/p>
&lt;p>Create a comma separated data file like /tmp/data:&lt;/p>
&lt;pre>&lt;code>Name,Phone,Branch Name,Branch UUID,Username,Password
Gary Gnu,48839938,Iganga Branch,54cc7-accd-e1cf9-ef203,demo01,keratejevu
Dianna Dempsey,4999393,Meru Branch,54cc1-1a7a-ccddd-e1203,demo02,duwuradixu
&lt;/code>&lt;/pre>&lt;p>Create a script like &lt;code>users-bulk-load&lt;/code> and edit it to include the district:&lt;/p>
&lt;pre>&lt;code>#!/bin/sh
PHONE_PREFIX=+256
#DISTRICT=5627c50f05a75003fe51685c596fefee
COUCH_URL=${COUCH_URL-http://admin:secret@localhost:5988}
LANG=en # no language prompt, please.
KNOWN=true # no tour, please.
IFS=$',' # comma delimited
while IFS=$IFS read name phone district uuid username password; do \
curl -v -H 'content-type:application/json' -d '{
&amp;quot;username&amp;quot;:&amp;quot;'&amp;quot;$username&amp;quot;'&amp;quot;,
&amp;quot;password&amp;quot;:&amp;quot;'&amp;quot;$password&amp;quot;'&amp;quot;,
&amp;quot;type&amp;quot;:&amp;quot;district-manager&amp;quot;,
&amp;quot;place&amp;quot;: {
&amp;quot;name&amp;quot;: &amp;quot;'&amp;quot;$name Area&amp;quot;'&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;health_center&amp;quot;,
&amp;quot;parent&amp;quot;: &amp;quot;'&amp;quot;$uuid&amp;quot;'&amp;quot;
},
&amp;quot;language&amp;quot;:&amp;quot;'&amp;quot;$LANG&amp;quot;'&amp;quot;,
&amp;quot;known&amp;quot;:'&amp;quot;$KNOWN&amp;quot;',
&amp;quot;contact&amp;quot;:{
&amp;quot;name&amp;quot;:&amp;quot;'&amp;quot;$name&amp;quot;'&amp;quot;,
&amp;quot;phone&amp;quot;: &amp;quot;'&amp;quot;$PHONE_PREFIX$phone&amp;quot;'&amp;quot;
}
}' &amp;quot;$COUCH_URL/api/v1/users&amp;quot;;
done
&lt;/code>&lt;/pre>&lt;p>Load the data into the loop:&lt;/p>
&lt;pre>&lt;code>tail -n+2 /tmp/data | COUCH_URL=https://admin:secret@myproject.app.medicmobile.org \
users-bulk-load # tail skips header row
&lt;/code>&lt;/pre></description></item><item><title>Core: Developing on Windows</title><link>https://docs.communityhealthtoolkit.org/beta/core/guides/using-windows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/beta/core/guides/using-windows/</guid><description>
&lt;p>We don&amp;rsquo;t actively support development on Windows, instead preferring MacOS or Linux.&lt;/p>
&lt;p>However, Microsoft has recently been stabilizing their &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/about">Windows Subsystem for Linux&lt;/a>, which appears to work reasonably well for development.&lt;/p>
&lt;p>Installation instructions are mostly the same as they written in &lt;a href="https://github.com/medic/medic/blob/master/README.md">the README&lt;/a> with a couple of caveats as of time of writing (2019-07-25), noted below.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Both the Windows Subsystem for Linux and Medic&amp;rsquo;s support for developing in it is very much in beta. These are advanced instructions, expect some understanding of linux and may not always work. Be patient and raise bugs as you find them!
&lt;/div>
&lt;h2 id="installing-ubuntu-in-the-windows-subsystem-for-linux">Installing Ubuntu in the Windows Subsystem for Linux.&lt;/h2>
&lt;p>For the rest of this document we&amp;rsquo;re going to presume that you&amp;rsquo;re using Ubuntu (18.04) in WSL. Medic probably works on all distributions, but Ubuntu is likely the best supported.&lt;/p>
&lt;p>First, follow Microsoft&amp;rsquo;s &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">instructions on enabling and installing linux&lt;/a>. At the end of this process you should have a linux terminal.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
For the rest of this tutorial &lt;strong>in linux&lt;/strong> means code executing or performing actions in the WSL, while &lt;strong>in Windows&lt;/strong> means code executing or performing actions in Windows natively.
&lt;/div>
&lt;h2 id="couchdb">CouchDB&lt;/h2>
&lt;p>As of writing CouchDB wouldn&amp;rsquo;t autostart (due to systemd not existing?), and wasn&amp;rsquo;t manually starting due to erlang errors.&lt;/p>
&lt;p>Luckily, there is a perfectly working CouchDB installation for Windows:&lt;/p>
&lt;ul>
&lt;li>Download from &lt;a href="https://couchdb.apache.org/#download">CouchDB&lt;/a> and install the Windows version. This will create a Windows service.&lt;/li>
&lt;li>Run it either by directly executing &lt;code>C:\CouchDB\bin\couchdb.cmd&lt;/code> or by starting the service&lt;/li>
&lt;/ul>
&lt;p>Then go to &lt;code>http://localhost:5984/_utils/#/setup&lt;/code> in Windows and do the single node setup. Once done head back to linux and confirm it works:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$: curl http://localhost:5984/
&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;couchdb&amp;#34;&lt;/span>:&lt;span style="color:#4e9a06">&amp;#34;Welcome&amp;#34;&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;version&amp;#34;&lt;/span>:&lt;span style="color:#4e9a06">&amp;#34;2.3.1&amp;#34;&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;git_sha&amp;#34;&lt;/span>:&lt;span style="color:#4e9a06">&amp;#34;c298091a4&amp;#34;&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;uuid&amp;#34;&lt;/span>:&lt;span style="color:#4e9a06">&amp;#34;5f60350abaaa11c0131a5630e83ae979&amp;#34;&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;features&amp;#34;&lt;/span>:&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;pluggable-storage-engines&amp;#34;&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;scheduler&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;vendor&amp;#34;&lt;/span>:&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#4e9a06">&amp;#34;The Apache Software Foundation&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="installing-npm">Installing NPM&lt;/h2>
&lt;p>Start your WSL instance (Ubuntu), not WSL as they take you to two different default directories.&lt;/p>
&lt;p>The default &lt;code>npm&lt;/code> in linux is really old and doesn&amp;rsquo;t have &lt;code>npm ci&lt;/code>, which we need.&lt;/p>
&lt;p>Instead use &lt;a href="https://github.com/nvm-sh/nvm">nvm&lt;/a> to install &lt;code>nvm install 11.3&lt;/code> .&lt;/p>
&lt;h2 id="checking-out-the-code">Checking out the code&lt;/h2>
&lt;p>We used git that&amp;rsquo;s preinstalled with Ubuntu to check out the code.&lt;/p>
&lt;p>You can checkout cht code inside WSL itself. You can checkout anywhere you have write access. We&amp;rsquo;ll checkout inside /home/username/medic directory.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$: mkdir ~/medic &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#204a87">cd&lt;/span> ~/medic
$: git clone https://github.com/medic/cht-core.git
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="setup-environment-variables">Setup Environment Variables&lt;/h2>
&lt;p>Using &lt;code>.bashrc&lt;/code> works as expected, and so is a good place to put exports:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># Medic stuff&lt;/span>
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">COUCH_URL&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>http://admin:pass@localhost:5984/medic
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">COUCH_NODE_NAME&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>couchdb@localhost
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="everything-else">Everything else&lt;/h2>
&lt;p>&lt;code>npm ci&lt;/code> should just work once you&amp;rsquo;ve installed a latest version of node via nvm as noted above.&lt;/p>
&lt;p>You won&amp;rsquo;t have grunt already installed, so install it by executing following command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$: npm i -g grunt-cli
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Also install xstproc in your WSL:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$: sudo apt-get update
$: sudo apt-get install xsltproc
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now you can build the web app.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$: &lt;span style="color:#204a87">cd&lt;/span> ~/medic/cht-core/
$: npm ci
$: grunt
&lt;/code>&lt;/pre>&lt;/div>&lt;p>From this point, follow the setup guide from &lt;code>Enabling a secure CouchDB&lt;/code> section in &lt;a href="https://github.com/medic/cht-core/blob/master/DEVELOPMENT.md">Development Guide&lt;/a>.&lt;/p>
&lt;p>To get multiple linux terminals (so you can run &lt;code>grunt&lt;/code>, &lt;code>api&lt;/code> and &lt;code>sentinel&lt;/code> at the same time) either install and use something like Tmux, or if you click &lt;code>Ubuntu&lt;/code> in the Windows start menu again it will open up a new terminal in the same linux instance.&lt;/p>
&lt;p>Once you&amp;rsquo;re done with the default instructions and have api running, check if it works by going to http://localhost:5988 in Chrome or Firefox.&lt;/p>
&lt;h2 id="editing-code">Editing Code&lt;/h2>
&lt;p>If you want to make changes to your code or contribute to our community health toolkit, you can do so by editing code from your favorite editor. If you editor supports UNC path, you can access and edit files inside WSL from &lt;code>\\wsl$\Ubuntu\&amp;lt;cht-core-location&amp;gt;&lt;/code>. If you use Visual Studio Code, it&amp;rsquo;s even easier to edit your code. Just navigate to where you have checked out cht-core and type &lt;code>code .&lt;/code> This will download VS Code Server for Ubuntu and open the project in Visual Studio Code in windows.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$: &lt;span style="color:#204a87">cd&lt;/span> ~/medic/cht-core
$: code .
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="problems">Problems?&lt;/h2>
&lt;p>As none of our code developers use Windows as a development environment daily this solution may not be as stable as directly using MacOS or Linux. If you encounter issues please let a developer know&lt;/p></description></item><item><title>Core: Docker Image Setup</title><link>https://docs.communityhealthtoolkit.org/beta/core/guides/docker-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/beta/core/guides/docker-setup/</guid><description>
&lt;p>This document helps to quickly install the necessary tools to download and run the public docker image for CHT applications.&lt;/p>
&lt;h2 id="download-docker">Download Docker&lt;/h2>
&lt;p>Ubuntu:&lt;/p>
&lt;ul>
&lt;li>Install both below&lt;/li>
&lt;li>&lt;a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">Docker CE&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.docker.com/compose/install/">Docker-Compose&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Mac OSX:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://download.docker.com/mac/stable/Docker.dmg">Docker for Mac&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Windows:&lt;/p>
&lt;ul>
&lt;li>If you have Hyper-V Capability, please ensure it is enabled in order to run Linux Containers on Windows. If you are running your Windows Server in cloud services, please ensure it is running on &lt;a href="https://en.wikipedia.org/wiki/Bare_machine">bare-metal&lt;/a>. You will not be able to run Linux Containers in Windows if the previous comments are not adhered due to nested virtualization.&lt;/li>
&lt;li>&lt;a href="https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe">Docker for Windows&lt;/a>&lt;/li>
&lt;li>If you do not have Hyper-V capability, but your server still supports virtualization, ensure that is enabled in your BiOS, and install the following package:&lt;/li>
&lt;li>&lt;a href="https://github.com/docker/toolbox/releases">Docker Toolbox using VirtualBox&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Run the installation and follow the instructions.&lt;/p>
&lt;p>Launch Docker.&lt;/p>
&lt;p>Performance Settings that can be changed:
Memory: 4 GiB
CPUs: 2&lt;/p>
&lt;h2 id="use-docker-compose">Use Docker-Compose:&lt;/h2>
&lt;p>In the location you would like to host your configuration files, create a file titled &amp;lt;project_name&amp;gt;-medic-os-compose.yml with the following contents:&lt;/p>
&lt;pre>&lt;code>version: '3.7'
services:
medic-os:
container_name: medic-os
image: medicmobile/medic-os:cht-3.7.0-rc.1
volumes:
- medic-data:/srv
ports:
- 80:80
- 443:443
working_dir: /srv
depends_on:
- haproxy
networks:
- medic-net
environment:
- DOCKER_NETWORK_NAME=haproxy
- DOCKER_COUCHDB_ADMIN_PASSWORD=$DOCKER_COUCHDB_ADMIN_PASSWORD
haproxy:
container_name: haproxy
image: medicmobile/haproxy:rc-1.16
volumes:
- medic-data:/srv
environment:
- COUCHDB_HOST=medic-os
- HA_PASSWORD=$DOCKER_COUCHDB_ADMIN_PASSWORD
networks:
- medic-net
volumes:
medic-data:
name: medic-data
networks:
medic-net:
name: medic-net
&lt;/code>&lt;/pre>&lt;p>Export a password for admin user named &lt;code>medic&lt;/code>:&lt;/p>
&lt;pre>&lt;code>export DOCKER_COUCHDB_ADMIN_PASSWORD=&amp;lt;random_pw&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="launch-docker-compose-containers">Launch docker-compose containers&lt;/h3>
&lt;p>Inside the directory that you saved the above &amp;lt;project_name&amp;gt;-medic-os-compose.yml, run:&lt;/p>
&lt;pre>&lt;code>$ docker-compose -f &amp;lt;project_name&amp;gt;-medic-os-compose.yml up
&lt;/code>&lt;/pre>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
In certain shells, docker-compose may not interpolate the admin password that was exported above. In that case, your admin user had a password automatically generated. Note the &lt;code>New CouchDB Administrative User&lt;/code> and &lt;code>New CouchDB Administrative Password&lt;/code> in the output terminal. You can retrieve these via running &lt;code>docker logs medic-os&lt;/code> and searching the terminal.
&lt;/div>
&lt;p>Once containers are setup, please run the following command from your host terminal:&lt;/p>
&lt;pre>&lt;code>$ docker exec -it medic-os /bin/bash -c &amp;quot;sed -i 's/--install=3.7.0/--complete-install/g' /srv/scripts/horticulturalist/postrun/horticulturalist&amp;quot;
$ docker exec -it medic-os /bin/bash -c &amp;quot;/boot/svc-stop medic-core openssh &amp;amp;&amp;amp; /boot/svc-stop medic-rdbms &amp;amp;&amp;amp; /boot/svc-stop medic-couch2pg&amp;quot;
&lt;/code>&lt;/pre>&lt;p>The first command fixes a postrun script for horticulturalist to prevent unique scenarios of re-install.
The second command stops extra services that you will not need.&lt;/p>
&lt;h3 id="visit-your-project">Visit your project&lt;/h3>
&lt;p>Open a browser to: https://localhost&lt;/p>
&lt;p>You will have to click to through the SSL Security warning. Click Advanced -&amp;gt; Continue to site.&lt;/p>
&lt;h3 id="delete--re-install">Delete &amp;amp; Re-Install&lt;/h3>
&lt;p>Stop containers:&lt;/p>
&lt;ul>
&lt;li>&lt;code>docker-compose down&lt;/code> or &lt;code>docker stop medic-os &amp;amp;&amp;amp; docker stop haproxy&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Remove containers:&lt;/p>
&lt;ul>
&lt;li>&lt;code>docker-compose rm&lt;/code> or &lt;code>docker rm medic-os &amp;amp;&amp;amp; docker rm haproxy&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Clean data volume:&lt;/p>
&lt;ul>
&lt;li>&lt;code>docker volume rm medic-data&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>After following the above three commands, you can re-run &lt;code>docker-compose up&lt;/code> and create a fresh install (no previous data present)&lt;/p>
&lt;h2 id="use-kitematic-gui-for-docker-tools">Use Kitematic (GUI for Docker tools)&lt;/h2>
&lt;h2 id="port-conflicts">Port Conflicts&lt;/h2>
&lt;p>In case you are already running services on HTTP(80) and HTTPS(443), you will have to map new ports to the medic-os container.&lt;/p>
&lt;p>Turn down and remove all existing containers that were started:&lt;/p>
&lt;ul>
&lt;li>&lt;code>docker-compose down &amp;amp;&amp;amp; docker-compose rm&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>To find out which service is using a conflicting port:
On Linux:&lt;/p>
&lt;pre>&lt;code>sudo netstat -plnt | grep ':&amp;lt;port&amp;gt;'
&lt;/code>&lt;/pre>&lt;p>On Mac (10.10 and above):&lt;/p>
&lt;pre>&lt;code>sudo lsof -iTCP -sTCP:LISTEN -n -P | grep ':&amp;lt;port&amp;gt;'
&lt;/code>&lt;/pre>&lt;p>You can either kill the service which is occupying HTTP/HTTPS ports, or run the container with forwarded ports that are free.
In your compose file, change the ports under medic-os:&lt;/p>
&lt;pre>&lt;code>services:
medic-os:
container_name: medic-os
image: medicmobile/medic-os:cht-3.7.0-rc.1
volumes:
- medic-data:/srv
ports:
- 8080:80
- 444:443
&lt;/code>&lt;/pre>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
You can substitute 8080, 444 with whichever ports are free on your host. You would now visit https://localhost:444 to visit your project.
&lt;/div>
&lt;h2 id="helpful-docker-commands">Helpful Docker commands&lt;/h2>
&lt;h4 id="ssh-into-containerapplication--view-specific-service-logs">ssh into container/application &amp;amp; view specific service logs&lt;/h4>
&lt;ul>
&lt;li>ssh: &lt;code>docker exec -it medic-os /bin/bash&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="once-inside-container">Once inside container:&lt;/h4>
&lt;ul>
&lt;li>view couchdb logs:
&lt;ul>
&lt;li>#less /srv/storage/medic-core/couchdb/logs/startup.log&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>view medic-api logs:
&lt;ul>
&lt;li>#less /srv/storage/medic-api/logs/medic-api.log&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>view medic-sentinel logs:
&lt;ul>
&lt;li>#less /srv/storage/medic-sentinel/logs/medic-sentinel.log&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="view-container-stderrstdout-logs">View container stderr/stdout logs:&lt;/h4>
&lt;ul>
&lt;li>docker logs medic-os&lt;/li>
&lt;li>docker logs haproxy&lt;/li>
&lt;/ul>
&lt;h4 id="clean-up">Clean Up&lt;/h4>
&lt;pre>&lt;code># list running containers
docker ps
# list all available docker containers with their status
sudo docker ps -a
# stop container
docker stop &amp;lt;container_id&amp;gt;
# start container
docker start &amp;lt;container_id&amp;gt;
# list all stoped containers
docker ps -f &amp;quot;status=exited&amp;quot;
&lt;/code>&lt;/pre>&lt;h4 id="prune-entire-docker-system">Prune entire Docker system&lt;/h4>
&lt;p>Use this prune command when unable to launch the containers and you&amp;rsquo;d like to restart from a clean slate. WARNING: This will delete all your unused images, containers, networks and volumes including those not related to CHT.
&lt;code>docker system prune -a --volumes&lt;/code>&lt;/p></description></item><item><title>Core: Get Android Logs</title><link>https://docs.communityhealthtoolkit.org/beta/core/guides/get-android-logs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/beta/core/guides/get-android-logs/</guid><description>
&lt;p>With Android 4.1 (aka Jelly Bean) and upwards the full system log is only visible if you have root.&lt;br>
To get logs, you have to use &lt;code>adb logcat&lt;/code> via a computer.&lt;/p>
&lt;p>These are the instructions for getting logs using ADB:&lt;/p>
&lt;ol>
&lt;li>Download adb for the below platforms&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip">Windows&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dl.google.com/android/repository/platform-tools-latest-darwin.zip">Mac&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dl.google.com/android/repository/platform-tools-latest-linux.zip">Linux&lt;/a>&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>
&lt;p>Copy zip to folder and extract it&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Navigate to the folder you have extracted it to. You should see files like adb, AdbWinApi, etc1tool etc. Open the Command prompt/terminal in the current folder(In Windows, press Alt + D and write &amp;lsquo;cmd&amp;rsquo;)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Enable USB debugging on your phone by going to Settings &amp;gt; Developer Options &amp;gt; USB Debugging (this varies from phone to phone, check on the internet if the phone doesn&amp;rsquo;t fit this)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Connect your phone by USB to the computer&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You will see a popup : &amp;ldquo;Allow USB debugging. The computer&amp;rsquo;s RSA fingerprint&amp;hellip;..&amp;quot;. Click OK&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="allow_usb_debugging.png" alt="Allow USB debugging">&lt;/p>
&lt;ol start="7">
&lt;li>
&lt;p>Open the command which was opened previously and write the following command: &lt;code>adb start-server&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To check if your phone is properly connected, write the command &lt;code>adb devices&lt;/code>. This will list the devices connected. Something like&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="adb_devices.png" alt="ADB Devices">&lt;/p>
&lt;ol start="9">
&lt;li>
&lt;p>Followup with command: &lt;code>adb logcat &amp;gt; gateway.txt&lt;/code>. This stores the android logs in the file &lt;code>gateway.txt&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Now it is taking android logs. This is the time to to try to reproduce the error.
Check some of the messages that are &amp;lsquo;WAITING&amp;rsquo; and click retry
Do this for as many times as you deem necessary to capture logs for that event.
Wait about 15 minutes to enable capture of sufficient android device environment logs&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Disconnect the phone from the computer&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Open the folder which has the adb executable, you will see a file called gateway.txt
Send that file to the concerned person (PM or techlead)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>NB. If you get this error &lt;code>command not found&lt;/code> in steps 7, 8 or 9 this means adb is not in your PATH. This is where the shell looks for executables. You&amp;rsquo;ll have to append &lt;code>./&lt;/code> before any &lt;code>adb&lt;/code> command so that you can use the &lt;code>adb&lt;/code> in the current folder you&amp;rsquo;re on.&lt;/p>
&lt;p>Ex. &lt;code>./adb logcat &amp;gt; gateway.txt&lt;/code>.
The dot is your current directory, and this tells Bash to use &lt;code>adb&lt;/code> from there.&lt;/p></description></item></channel></rss>