<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Community Health Toolkit â€“ Guides</title><link>https://docs.communityhealthtoolkit.org/beta/core/guides/</link><description>Recent content in Guides on Community Health Toolkit</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.communityhealthtoolkit.org/beta/core/guides/index.xml" rel="self" type="application/rss+xml"/><item><title>Core: Fixing E2E Tests</title><link>https://docs.communityhealthtoolkit.org/beta/core/guides/fixing-e2e-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/beta/core/guides/fixing-e2e-tests/</guid><description>
&lt;h1 id="how-to-fix-e2e-tests">How to fix e2e tests&lt;/h1>
&lt;p>End to end (e2e) tests can be really difficult to debug - sometimes they fail seemingly at random, and sometimes they only fail on certain environments (eg: ci but not locally). This can make reproducing and reliably fixing the issue challenging, so here are some tips to help!&lt;/p>
&lt;h2 id="read-the-protractor-logs">Read the protractor logs&lt;/h2>
&lt;p>Read the failure carefully - it often has really good info but sometimes it&amp;rsquo;s just hard to find. Most importantly it tells you exactly the line in the test that failed and you can look that up in the source to see what protractor was trying to do. The error message itself is also really useful. Also sometimes one error causes the next, so always start with the first test failure before looking at the others.&lt;/p>
&lt;h3 id="known-failure-patterns">Known failure patterns&lt;/h3>
&lt;ul>
&lt;li>Can&amp;rsquo;t click on an element because another element would get the click. This usually means a modal dialog was being shown. 90% of the time this is the update notification modal which means some settings change has been detected after the test started execution.&lt;/li>
&lt;li>Stale element. This means the DOM element has been removed after protractor found it on the page but before you tried to do something with it. I generally try to get protractor to find the element just before I need it to reduce the chance of this happening.&lt;/li>
&lt;/ul>
&lt;h2 id="other-logs">Other logs&lt;/h2>
&lt;p>The API and Sentinel logs are sometimes useful, particularly if API has crashed. These are available locally under &lt;code>/tests/logs/&lt;/code> and for CI builds &lt;a href="https://s3.console.aws.amazon.com/s3/buckets/medic-e2e/">on AWS&lt;/a>.&lt;/p>
&lt;h2 id="screenshots">Screenshots&lt;/h2>
&lt;p>We automatically take screenshots when a test fails and store it locally in &lt;code>/tests/results/&lt;/code> and for CI builds &lt;a href="https://s3.console.aws.amazon.com/s3/buckets/medic-e2e/">on AWS&lt;/a>. These can be particularly useful if a dialog was blocking a click.&lt;/p>
&lt;h2 id="running-just-the-failing-test">Running just the failing test&lt;/h2>
&lt;h3 id="option-1">Option 1&lt;/h3>
&lt;p>Running e2e tests can be quite slow so to save time modify the &lt;code>specs&lt;/code> property of &lt;code>/tests/base.conf.js&lt;/code> so it only finds your test. You can also change &lt;code>describe&lt;/code> and &lt;code>it&lt;/code> to &lt;code>xdescribe&lt;/code> and &lt;code>xit&lt;/code> to skip specific tests.&lt;/p>
&lt;h3 id="option-2">Option 2&lt;/h3>
&lt;p>Alternatively you can run API in test mode using:&lt;/p>
&lt;pre>&lt;code>API_PORT=4988 COUCH_URL=http://admin:pass@localhost:5984/medic-test node server.js
&lt;/code>&lt;/pre>&lt;p>Then grep for just the tests you want to run:&lt;/p>
&lt;pre>&lt;code>protractor /home/kenn/webapp/tests/e2e.tests.conf.js --specs='/home/kenn/webapp/tests/e2e/api/controllers/_changes.spec.js' --grep=&amp;quot;should allow DB admins to POST to _changes&amp;quot;
&lt;/code>&lt;/pre>&lt;h3 id="option-3">Option 3&lt;/h3>
&lt;p>Use the &amp;ldquo;Protractor test runner&amp;rdquo; extension for VSCode.&lt;/p>
&lt;h2 id="watching-the-test-run">Watching the test run&lt;/h2>
&lt;p>Running the tests locally with &lt;code>grunt e2e-debug&lt;/code> will allow you to watch it run but if you interact with the page the test will fail in unexpected ways. Furthermore the browser will close after a short timeout so you won&amp;rsquo;t be able to inspect the console or DOM. To do this, force quit the process running the test before it tears down and you will be able to navigate around the app, use Chrome dev tools, and inspect the docs in the database to (hopefully) work out what&amp;rsquo;s going wrong.&lt;/p></description></item><item><title>Core: Using Git</title><link>https://docs.communityhealthtoolkit.org/beta/core/guides/using-git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/beta/core/guides/using-git/</guid><description>
&lt;p>New to Git or need a refesher?&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://git-scm.com/docs/gittutorial">A tutorial introduction to Git&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://git-scm.com/docs/gittutorial-2">A tutorial introduction to Git: part two&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://git-scm.com/docs/gitcore-tutorial">A Git core tutorial for developers&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>If you&amp;rsquo;re on Unix, these are also likely installed as man pages:&lt;/p>
&lt;pre>&lt;code>man gittutorial
man gittutorial-2
man gitcore-tutorial
&lt;/code>&lt;/pre>&lt;p>For more reading, &lt;a href="https://git-scm.com/book">Pro Git&lt;/a> is available online, and
&lt;a href="https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain">Chapter 10: Git Internals&lt;/a>
is quite helpful.&lt;/p>
&lt;p>Published a commit by mistake? GitHub has a decent writeup on that:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://help.github.com/articles/removing-sensitive-data-from-a-repository/">Removing sensitive data from a repository&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="how-to-extract-a-module-from-an-existing-repo">How To Extract a Module From an Existing Repo&lt;/h2>
&lt;p>The following are the steps I used for creating &lt;a href="https://github.com/medic/medic-smsparser">medic-smsparser&lt;/a> based off medic.&lt;/p>
&lt;p>First git clone using a URL scheme rather than plain file system path otherwise
you will get hard links instead of a copy.&lt;/p>
&lt;pre>&lt;code>git clone git@github.com:medic/medic.git
&lt;/code>&lt;/pre>&lt;p style="text-align:center">or&lt;/p>
&lt;pre>&lt;code>git clone file:///home/linus/dev/medic
&lt;/code>&lt;/pre>&lt;p>Then compile a list of files you are interested in. If you only have a single directory
you need then read about the &lt;code>--subdirectory-filter&lt;/code> option of
&lt;code>filter-branch&lt;/code>. In this how-to I&amp;rsquo;m using a set of files:&lt;/p>
&lt;pre>&lt;code>$ cat files
packages/kujua-sms/kujua-sms/validate.js
packages/kujua-sms/views/lib/javarosa_parser.js
packages/kujua-sms/views/lib/mp_parser.js
packages/kujua-sms/views/lib/smsparser.js
packages/kujua-sms/views/lib/textforms_parser.js
packages/kujua-sms/kujua-sms/utils.js
tests/nodeunit/form_definitions.js
tests/nodeunit/unit/kujua-sms/smsparser.js
tests/nodeunit/unit/kujua-sms/smsparser_compact_textform.js
tests/nodeunit/unit/kujua-sms/textforms_parser.js
tests/nodeunit/unit/kujua-sms/validate.js
&lt;/code>&lt;/pre>&lt;p>Next query the git history for any file renames by using &lt;code>--follow&lt;/code>:&lt;/p>
&lt;pre>&lt;code>for i in `cat files`; do \
git log --oneline --name-only --follow --all -- &amp;quot;$i&amp;quot; | \
egrep -v -e '^[0-9A-Fa-f]+\s'; \
done | sort | uniq &amp;gt; all-files
&lt;/code>&lt;/pre>&lt;p>In the following commands I assume the branch we are working on is &lt;code>master&lt;/code>, but this could easily be applied to any branch.&lt;/p>
&lt;p>Take a note of your original commit count.&lt;/p>
&lt;pre>&lt;code>$ git rev-list master | wc -l
6844
&lt;/code>&lt;/pre>&lt;p>Run the filter on the current branch, this might take a little while:&lt;/p>
&lt;pre>&lt;code>git filter-branch -f --prune-empty --index-filter '\
git rm --cached -r -q -- . ; \
git reset -q $GIT_COMMIT -- \
lib/utils.js \
packages/kujua-sms-import/kujua-sms-import/smsparser.js \
packages/kujua-sms-import/views/lib/smsparser.js \
packages/kujua-sms/kujua-sms/utils.js \
packages/kujua-sms/kujua-sms/validate.js \
packages/kujua-sms/tests/kujua-sms/smsparser.js \
packages/kujua-sms/tests/kujua-sms/smsparser_compact_textform.js \
packages/kujua-sms/tests/kujua-sms/textforms_parser.js \
packages/kujua-sms/tests/kujua-sms/validate.js \
packages/kujua-sms/views/lib/javarosa_parser.js \
packages/kujua-sms/views/lib/mp_parser.js \
packages/kujua-sms/views/lib/smsparser.js \
packages/kujua-sms/views/lib/textforms_parser.js \
tests/nodeunit/form_definitions.js \
tests/nodeunit/unit/kujua-sms/smsparser.js \
tests/nodeunit/unit/kujua-sms/smsparser_compact_textform.js \
tests/nodeunit/unit/kujua-sms/textforms_parser.js \
tests/nodeunit/unit/kujua-sms/validate.js tests/smsparser.js \
views/lib/smsparser.js \
' -- --all
&lt;/code>&lt;/pre>&lt;p>Nice, less commits!&lt;/p>
&lt;pre>&lt;code>$ git rev-list master | wc -l
461
&lt;/code>&lt;/pre>&lt;p>Peruse git log a bit and do a few spot checks to see if things look right. The commit hashes have been rewritten and should only include commits where the files listed above were affected.&lt;/p>
&lt;pre>&lt;code>$ git log
$ git show d3b2be79
&lt;/code>&lt;/pre>&lt;p>But if we query on all refs (branches/tags) our rev list is still large, hrm&amp;hellip;&lt;/p>
&lt;pre>&lt;code>$ git rev-list --all | wc -l
7664
&lt;/code>&lt;/pre>&lt;p>Local repo is also still larger than expected.&lt;/p>
&lt;pre>&lt;code>$ du -hs .git
41M .git
&lt;/code>&lt;/pre>&lt;p>How many branches and tags do we have? Yikes, we&amp;rsquo;ve been busy.&lt;/p>
&lt;pre>&lt;code>$ git for-each-ref | wc -l
183
&lt;/code>&lt;/pre>&lt;p>Ok, we still have some work to do, lots of refs/tags/branches still holding on to
trees!&lt;/p>
&lt;p>First order of business is to say goodbye to the origin remote, we no longer call that home.&lt;/p>
&lt;pre>&lt;code>git remote rm origin
rm -rf .git/refs/original/ .git/refs/remotes/ .git/*_HEAD .git/logs/
&lt;/code>&lt;/pre>&lt;p>Now delete all related branches and tags:&lt;/p>
&lt;pre>&lt;code>git for-each-ref --format=&amp;quot;%(refname)&amp;quot; refs/original/ refs/tags | \
xargs -n1 git update-ref -d
&lt;/code>&lt;/pre>&lt;p>One ferocious garbage collection incantation:&lt;/p>
&lt;pre>&lt;code>$ git -c gc.reflogExpire=0 -c gc.reflogExpireUnreachable=0 -c gc.rerereresolved=0 \
-c gc.rerereunresolved=0 -c gc.pruneExpire=now gc --aggressive
&lt;/code>&lt;/pre>&lt;p>A basic check shows no errors:&lt;/p>
&lt;pre>&lt;code>$ git fsck --full
Checking object directories: 100% (256/256), done.
Checking objects: 100% (2064/2064), done.
&lt;/code>&lt;/pre>&lt;p>Look Ma, I&amp;rsquo;m all cleaned up!&lt;/p>
&lt;pre>&lt;code>$ git for-each-ref
dbcc2677aa56c40fbf83d72e6e413b86d3b2be79 commit refs/heads/master
$ git rev-list --all | wc -l
461
$ du -hs .git
384K .git
&lt;/code>&lt;/pre>&lt;p>Maybe have a play now and make sure things look right to you. Then publish your new repo!&lt;/p>
&lt;pre>&lt;code>$ git remote add origin git@github.com:medic/medic-smsparser.git
$ git push origin master
&lt;/code>&lt;/pre>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
&lt;p>Once you understand a little about git internals, have a look at &lt;code>git-filter-branch&lt;/code> manual (see also the checklist at the bottom):&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://git-scm.com/docs/git-filter-branch">git-filter-branch - Rewrite branches&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Ferocious GC&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://stackoverflow.com/questions/1904860/how-to-remove-unreferenced-blobs-from-my-git-repo/">How to remove unreferenced blobs from my git repo&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Need to update the &lt;code>rm -rf&lt;/code> command used there, the &lt;code>git update-ref -d&lt;/code> that comes after takes care of most of that except the &lt;code>refs/logs&lt;/code> part. Will try next time.&lt;/p>
&lt;/div></description></item><item><title>Core: Using NPM</title><link>https://docs.communityhealthtoolkit.org/beta/core/guides/using-npm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/beta/core/guides/using-npm/</guid><description>
&lt;h2 id="npm-orgs">npm Orgs&lt;/h2>
&lt;p>We use npm Orgs to organize our npm packages. It provides a centralized way
to manage a team&amp;rsquo;s published npm packages and permissions. Here are some
guidelines when using this service.&lt;/p>
&lt;p>See &lt;a href="https://www.npmjs.com/docs/orgs/">https://www.npmjs.com/docs/orgs/&lt;/a> for more information.&lt;/p>
&lt;p>Our organization is &lt;code>medic&lt;/code> or using npm&amp;rsquo;s notation, &lt;code>@medic&lt;/code>.&lt;/p>
&lt;p>We also created &lt;code>@medicmobile&lt;/code> but it&amp;rsquo;s not currently in use, it was created to
reserve the namespace.&lt;/p>
&lt;h3 id="adding-a-package">Adding a Package&lt;/h3>
&lt;p>When you publish an npm module on npmjs.com, add it to the developers team
under the &lt;code>@medic&lt;/code> org.&lt;/p>
&lt;p>This can be done using the web interface:&lt;/p>
&lt;ul>
&lt;li>Login to npmjs.com then Navigate to &lt;a href="https://www.npmjs.com/org/medic/team/developers">Medic Developer&amp;rsquo;s Team&lt;/a>
and add your package there.&lt;/li>
&lt;/ul>
&lt;p>Or command line:&lt;/p>
&lt;ul>
&lt;li>Change your directory to where the package&amp;rsquo;s &lt;code>package.json&lt;/code> lives, then run:&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>npm access grant read-write medic:developers
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Then &lt;code>npm access&lt;/code> should show the updated permissions for the team members.&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>$ npm access ls-collaborators
{
&amp;quot;mandric&amp;quot;: &amp;quot;read-write&amp;quot;,
&amp;quot;estellecomment&amp;quot;: &amp;quot;read-write&amp;quot;,
&amp;quot;garethbowen&amp;quot;: &amp;quot;read-write&amp;quot;,
&amp;quot;scdf&amp;quot;: &amp;quot;read-write&amp;quot;,
&amp;quot;alxndrsn&amp;quot;: &amp;quot;read-write&amp;quot;,
}
&lt;/code>&lt;/pre>&lt;h3 id="using-an-org-scoped-package">Using an Org Scoped Package&lt;/h3>
&lt;p>A scope should be specified when a published package is a fork of an existing
package, but otherwise scope is not needed since there is no conflict with the
registry.&lt;/p>
&lt;p>For example if you fork &lt;code>moment&lt;/code> and you can&amp;rsquo;t get your changes merged upstream
and need to publish a new package then modify the package name (in
package.json) to specify a organizational scope, like &lt;code>@medic/moment&lt;/code> and publish it.&lt;/p>
&lt;p>For more info see &lt;a href="https://www.npmjs.com/docs/orgs/publishing-an-org-scoped-package.html">Publishing an Org Scoped Package&lt;/a>.&lt;/p></description></item><item><title>Core: How to bulk load users</title><link>https://docs.communityhealthtoolkit.org/beta/core/guides/users-bulk-load/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/beta/core/guides/users-bulk-load/</guid><description>
&lt;p>First, using the webapp, create the top level places/facilities like
districts/branches that the users will belong to. Save the UUIDs of these
places in a spreadsheet with their names.&lt;/p>
&lt;p>Then use curl against the users API to create the user, place and contact. In
this example the place and contact.parent are the same so we&amp;rsquo;re creating
&lt;code>demo*&lt;/code> users that can manage records associated to a specific place.&lt;/p>
&lt;p>Create a comma separated data file like /tmp/data:&lt;/p>
&lt;pre>&lt;code>Name,Phone,Branch Name,Branch UUID,Username,Password
Gary Gnu,48839938,Iganga Branch,54cc7-accd-e1cf9-ef203,demo01,keratejevu
Dianna Dempsey,4999393,Meru Branch,54cc1-1a7a-ccddd-e1203,demo02,duwuradixu
&lt;/code>&lt;/pre>&lt;p>Create a script like &lt;code>users-bulk-load&lt;/code> and edit it to include the district:&lt;/p>
&lt;pre>&lt;code>#!/bin/sh
PHONE_PREFIX=+256
#DISTRICT=5627c50f05a75003fe51685c596fefee
COUCH_URL=${COUCH_URL-http://admin:secret@localhost:5988}
LANG=en # no language prompt, please.
KNOWN=true # no tour, please.
IFS=$',' # comma delimited
while IFS=$IFS read name phone district uuid username password; do \
curl -v -H 'content-type:application/json' -d '{
&amp;quot;username&amp;quot;:&amp;quot;'&amp;quot;$username&amp;quot;'&amp;quot;,
&amp;quot;password&amp;quot;:&amp;quot;'&amp;quot;$password&amp;quot;'&amp;quot;,
&amp;quot;type&amp;quot;:&amp;quot;district-manager&amp;quot;,
&amp;quot;place&amp;quot;: {
&amp;quot;name&amp;quot;: &amp;quot;'&amp;quot;$name Area&amp;quot;'&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;health_center&amp;quot;,
&amp;quot;parent&amp;quot;: &amp;quot;'&amp;quot;$uuid&amp;quot;'&amp;quot;
},
&amp;quot;language&amp;quot;:&amp;quot;'&amp;quot;$LANG&amp;quot;'&amp;quot;,
&amp;quot;known&amp;quot;:'&amp;quot;$KNOWN&amp;quot;',
&amp;quot;contact&amp;quot;:{
&amp;quot;name&amp;quot;:&amp;quot;'&amp;quot;$name&amp;quot;'&amp;quot;,
&amp;quot;phone&amp;quot;: &amp;quot;'&amp;quot;$PHONE_PREFIX$phone&amp;quot;'&amp;quot;
}
}' &amp;quot;$COUCH_URL/api/v1/users&amp;quot;;
done
&lt;/code>&lt;/pre>&lt;p>Load the data into the loop:&lt;/p>
&lt;pre>&lt;code>tail -n+2 /tmp/data | COUCH_URL=https://admin:secret@myproject.app.medicmobile.org \
users-bulk-load # tail skips header row
&lt;/code>&lt;/pre></description></item><item><title>Core: Developing on Windows</title><link>https://docs.communityhealthtoolkit.org/beta/core/guides/using-windows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/beta/core/guides/using-windows/</guid><description>
&lt;p>We don&amp;rsquo;t actively support development on Windows, instead preferring MacOS or Linux.&lt;/p>
&lt;p>However, Microsoft has recently been stabilizing their &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/about">Windows Subsystem for Linux&lt;/a>, which appears to work reasonably well for development.&lt;/p>
&lt;p>Installation instructions are mostly the same as they written in &lt;a href="https://github.com/medic/medic/blob/master/README.md">the README&lt;/a> with a couple of caveats as of time of writing (2019-07-25), noted below.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Both the Windows Subsystem for Linux and Medic&amp;rsquo;s support for developing in it is very much in beta. These are advanced instructions, expect some understanding of linux and may not always work. Be patient and raise bugs as you find them!
&lt;/div>
&lt;h2 id="installing-ubuntu-in-the-windows-subsystem-for-linux">Installing Ubuntu in the Windows Subsystem for Linux.&lt;/h2>
&lt;p>For the rest of this document we&amp;rsquo;re going to presume that you&amp;rsquo;re using Ubuntu (18.04) in WSL. Medic probably works on all distributions, but Ubuntu is likely the best supported.&lt;/p>
&lt;p>First, follow Microsoft&amp;rsquo;s &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">instructions on enabling and installing linux&lt;/a>. At the end of this process you should have a linux terminal.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
For the rest of this tutorial &lt;strong>in linux&lt;/strong> means code executing or performing actions in the WSL, while &lt;strong>in Windows&lt;/strong> means code executing or performing actions in Windows natively.
&lt;/div>
&lt;h2 id="couchdb">CouchDB&lt;/h2>
&lt;p>As of writing CouchDB wouldn&amp;rsquo;t autostart (due to systemd not existing?), and wasn&amp;rsquo;t manually starting due to erlang errors.&lt;/p>
&lt;p>Luckily, there is a perfectly working CouchDB installation for Windows:&lt;/p>
&lt;ul>
&lt;li>Download from &lt;a href="https://couchdb.apache.org/#download">CouchDB&lt;/a> and install the Windows version. This will create a Windows service.&lt;/li>
&lt;li>Run it either by directly executing &lt;code>C:\CouchDB\bin\couchdb.cmd&lt;/code> or by starting the service&lt;/li>
&lt;/ul>
&lt;p>Then go to &lt;code>http://localhost:5984/_utils/#/setup&lt;/code> in Windows and do the single node setup. Once done head back to linux and confirm it works:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$: curl http://localhost:5984/
&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;couchdb&amp;#34;&lt;/span>:&lt;span style="color:#4e9a06">&amp;#34;Welcome&amp;#34;&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;version&amp;#34;&lt;/span>:&lt;span style="color:#4e9a06">&amp;#34;2.3.1&amp;#34;&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;git_sha&amp;#34;&lt;/span>:&lt;span style="color:#4e9a06">&amp;#34;c298091a4&amp;#34;&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;uuid&amp;#34;&lt;/span>:&lt;span style="color:#4e9a06">&amp;#34;5f60350abaaa11c0131a5630e83ae979&amp;#34;&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;features&amp;#34;&lt;/span>:&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;pluggable-storage-engines&amp;#34;&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;scheduler&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;vendor&amp;#34;&lt;/span>:&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#4e9a06">&amp;#34;The Apache Software Foundation&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="installing-npm">Installing NPM&lt;/h2>
&lt;p>Start your WSL instance (Ubuntu), not WSL as they take you to two different default directories.&lt;/p>
&lt;p>The default &lt;code>npm&lt;/code> in linux is really old and doesn&amp;rsquo;t have &lt;code>npm ci&lt;/code>, which we need.&lt;/p>
&lt;p>Instead use &lt;a href="https://github.com/nvm-sh/nvm">nvm&lt;/a> to install &lt;code>nvm install 11.3&lt;/code> .&lt;/p>
&lt;h2 id="checking-out-the-code">Checking out the code&lt;/h2>
&lt;p>We used git that&amp;rsquo;s preinstalled with Ubuntu to check out the code.&lt;/p>
&lt;p>You can checkout cht code inside WSL itself. You can checkout anywhere you have write access. We&amp;rsquo;ll checkout inside /home/username/medic directory.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$: mkdir ~/medic &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#204a87">cd&lt;/span> ~/medic
$: git clone https://github.com/medic/cht-core.git
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="setup-environment-variables">Setup Environment Variables&lt;/h2>
&lt;p>Using &lt;code>.bashrc&lt;/code> works as expected, and so is a good place to put exports:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># Medic stuff&lt;/span>
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">COUCH_URL&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>http://admin:pass@localhost:5984/medic
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">COUCH_NODE_NAME&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>couchdb@localhost
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="everything-else">Everything else&lt;/h2>
&lt;p>&lt;code>npm ci&lt;/code> should just work once you&amp;rsquo;ve installed a latest version of node via nvm as noted above.&lt;/p>
&lt;p>You won&amp;rsquo;t have grunt already installed, so install it by executing following command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$: npm i -g grunt-cli
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Also install xstproc in your WSL:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$: sudo apt-get update
$: sudo apt-get install xsltproc
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now you can build the web app.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$: &lt;span style="color:#204a87">cd&lt;/span> ~/medic/cht-core/
$: npm ci
$: grunt
&lt;/code>&lt;/pre>&lt;/div>&lt;p>From this point, follow the setup guide from &lt;code>Enabling a secure CouchDB&lt;/code> section in &lt;a href="https://github.com/medic/cht-core/blob/master/DEVELOPMENT.md">Development Guide&lt;/a>.&lt;/p>
&lt;p>To get multiple linux terminals (so you can run &lt;code>grunt&lt;/code>, &lt;code>api&lt;/code> and &lt;code>sentinel&lt;/code> at the same time) either install and use something like Tmux, or if you click &lt;code>Ubuntu&lt;/code> in the Windows start menu again it will open up a new terminal in the same linux instance.&lt;/p>
&lt;p>Once you&amp;rsquo;re done with the default instructions and have api running, check if it works by going to http://localhost:5988 in Chrome or Firefox.&lt;/p>
&lt;h2 id="editing-code">Editing Code&lt;/h2>
&lt;p>If you want to make changes to your code or contribute to our community health toolkit, you can do so by editing code from your favorite editor. If you editor supports UNC path, you can access and edit files inside WSL from &lt;code>\\wsl$\Ubuntu\&amp;lt;cht-core-location&amp;gt;&lt;/code>. If you use Visual Studio Code, it&amp;rsquo;s even easier to edit your code. Just navigate to where you have checked out cht-core and type &lt;code>code .&lt;/code> This will download VS Code Server for Ubuntu and open the project in Visual Studio Code in windows.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$: &lt;span style="color:#204a87">cd&lt;/span> ~/medic/cht-core
$: code .
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="problems">Problems?&lt;/h2>
&lt;p>As none of our code developers use Windows as a development environment daily this solution may not be as stable as directly using MacOS or Linux. If you encounter issues please let a developer know&lt;/p></description></item><item><title>Core: Docker Image Setup</title><link>https://docs.communityhealthtoolkit.org/beta/core/guides/docker-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/beta/core/guides/docker-setup/</guid><description>
&lt;p>This document helps to quickly install the necessary tools to download and run the public docker image for CHT applications.&lt;/p>
&lt;h2 id="download-docker">Download Docker&lt;/h2>
&lt;p>Ubuntu:&lt;/p>
&lt;ul>
&lt;li>Install both below&lt;/li>
&lt;li>&lt;a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">Docker CE&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.docker.com/compose/install/">Docker-Compose&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Mac OSX:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://download.docker.com/mac/stable/Docker.dmg">Docker for Mac&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Windows:&lt;/p>
&lt;ul>
&lt;li>If you have Hyper-V Capability, please ensure it is enabled in order to run Linux Containers on Windows. If you are running your Windows Server in cloud services, please ensure it is running on &lt;a href="https://en.wikipedia.org/wiki/Bare_machine">bare-metal&lt;/a>. You will not be able to run Linux Containers in Windows if the previous comments are not adhered due to nested virtualization.&lt;/li>
&lt;li>&lt;a href="https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe">Docker for Windows&lt;/a>&lt;/li>
&lt;li>If you do not have Hyper-V capability, but your server still supports virtualization, ensure that is enabled in your BiOS, and install the following package:&lt;/li>
&lt;li>&lt;a href="https://github.com/docker/toolbox/releases">Docker Toolbox using VirtualBox&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Run the installation and follow the instructions.&lt;/p>
&lt;p>Launch Docker.&lt;/p>
&lt;p>Performance Settings that can be changed:
Memory: 4 GiB
CPUs: 2&lt;/p>
&lt;h2 id="use-docker-compose">Use Docker-Compose:&lt;/h2>
&lt;p>In the location you would like to host your configuration files, create a file titled &amp;lt;project_name&amp;gt;-medic-os-compose.yml with the following contents:&lt;/p>
&lt;pre>&lt;code>version: '3.7'
services:
medic-os:
container_name: medic-os
image: medicmobile/medic-os:cht-3.7.0-rc.1
volumes:
- medic-data:/srv
ports:
- 80:80
- 443:443
working_dir: /srv
depends_on:
- haproxy
networks:
- medic-net
environment:
- DOCKER_NETWORK_NAME=haproxy
- DOCKER_COUCHDB_ADMIN_PASSWORD=$DOCKER_COUCHDB_ADMIN_PASSWORD
haproxy:
container_name: haproxy
image: medicmobile/haproxy:rc-1.16
volumes:
- medic-data:/srv
environment:
- COUCHDB_HOST=medic-os
- HA_PASSWORD=$DOCKER_COUCHDB_ADMIN_PASSWORD
networks:
- medic-net
volumes:
medic-data:
name: medic-data
networks:
medic-net:
name: medic-net
&lt;/code>&lt;/pre>&lt;p>Export a password for admin user named &lt;code>medic&lt;/code>:&lt;/p>
&lt;pre>&lt;code>export DOCKER_COUCHDB_ADMIN_PASSWORD=&amp;lt;random_pw&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="launch-docker-compose-containers">Launch docker-compose containers&lt;/h3>
&lt;p>Inside the directory that you saved the above &amp;lt;project_name&amp;gt;-medic-os-compose.yml, run:&lt;/p>
&lt;pre>&lt;code>$ docker-compose -f &amp;lt;project_name&amp;gt;-medic-os-compose.yml up
&lt;/code>&lt;/pre>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
In certain shells, docker-compose may not interpolate the admin password that was exported above. In that case, your admin user had a password automatically generated. Note the &lt;code>New CouchDB Administrative User&lt;/code> and &lt;code>New CouchDB Administrative Password&lt;/code> in the output terminal. You can retrieve these via running &lt;code>docker logs medic-os&lt;/code> and searching the terminal.
&lt;/div>
&lt;p>Once containers are setup, please run the following command from your host terminal:&lt;/p>
&lt;pre>&lt;code>$ docker exec -it medic-os /bin/bash -c &amp;quot;sed -i 's/--install=3.7.0/--complete-install/g' /srv/scripts/horticulturalist/postrun/horticulturalist&amp;quot;
$ docker exec -it medic-os /bin/bash -c &amp;quot;/boot/svc-stop medic-core openssh &amp;amp;&amp;amp; /boot/svc-stop medic-rdbms &amp;amp;&amp;amp; /boot/svc-stop medic-couch2pg&amp;quot;
&lt;/code>&lt;/pre>&lt;p>The first command fixes a postrun script for horticulturalist to prevent unique scenarios of re-install.
The second command stops extra services that you will not need.&lt;/p>
&lt;h3 id="visit-your-project">Visit your project&lt;/h3>
&lt;p>Open a browser to: https://localhost&lt;/p>
&lt;p>You will have to click to through the SSL Security warning. Click Advanced -&amp;gt; Continue to site.&lt;/p>
&lt;h3 id="delete--re-install">Delete &amp;amp; Re-Install&lt;/h3>
&lt;p>Stop containers:&lt;/p>
&lt;ul>
&lt;li>&lt;code>docker-compose down&lt;/code> or &lt;code>docker stop medic-os &amp;amp;&amp;amp; docker stop haproxy&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Remove containers:&lt;/p>
&lt;ul>
&lt;li>&lt;code>docker-compose rm&lt;/code> or &lt;code>docker rm medic-os &amp;amp;&amp;amp; docker rm haproxy&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Clean data volume:&lt;/p>
&lt;ul>
&lt;li>&lt;code>docker volume rm medic-data&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>After following the above three commands, you can re-run &lt;code>docker-compose up&lt;/code> and create a fresh install (no previous data present)&lt;/p>
&lt;h2 id="use-kitematic-gui-for-docker-tools">Use Kitematic (GUI for Docker tools)&lt;/h2>
&lt;h2 id="port-conflicts">Port Conflicts&lt;/h2>
&lt;p>In case you are already running services on HTTP(80) and HTTPS(443), you will have to map new ports to the medic-os container.&lt;/p>
&lt;p>Turn down and remove all existing containers that were started:&lt;/p>
&lt;ul>
&lt;li>&lt;code>docker-compose down &amp;amp;&amp;amp; docker-compose rm&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>To find out which service is using a conflicting port:
On Linux:&lt;/p>
&lt;pre>&lt;code>sudo netstat -plnt | grep ':&amp;lt;port&amp;gt;'
&lt;/code>&lt;/pre>&lt;p>On Mac (10.10 and above):&lt;/p>
&lt;pre>&lt;code>sudo lsof -iTCP -sTCP:LISTEN -n -P | grep ':&amp;lt;port&amp;gt;'
&lt;/code>&lt;/pre>&lt;p>You can either kill the service which is occupying HTTP/HTTPS ports, or run the container with forwarded ports that are free.
In your compose file, change the ports under medic-os:&lt;/p>
&lt;pre>&lt;code>services:
medic-os:
container_name: medic-os
image: medicmobile/medic-os:cht-3.7.0-rc.1
volumes:
- medic-data:/srv
ports:
- 8080:80
- 444:443
&lt;/code>&lt;/pre>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
You can substitute 8080, 444 with whichever ports are free on your host. You would now visit https://localhost:444 to visit your project.
&lt;/div>
&lt;h2 id="helpful-docker-commands">Helpful Docker commands&lt;/h2>
&lt;h4 id="ssh-into-containerapplication--view-specific-service-logs">ssh into container/application &amp;amp; view specific service logs&lt;/h4>
&lt;ul>
&lt;li>ssh: &lt;code>docker exec -it medic-os /bin/bash&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="once-inside-container">Once inside container:&lt;/h4>
&lt;ul>
&lt;li>view couchdb logs:
&lt;ul>
&lt;li>#less /srv/storage/medic-core/couchdb/logs/startup.log&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>view medic-api logs:
&lt;ul>
&lt;li>#less /srv/storage/medic-api/logs/medic-api.log&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>view medic-sentinel logs:
&lt;ul>
&lt;li>#less /srv/storage/medic-sentinel/logs/medic-sentinel.log&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="view-container-stderrstdout-logs">View container stderr/stdout logs:&lt;/h4>
&lt;ul>
&lt;li>docker logs medic-os&lt;/li>
&lt;li>docker logs haproxy&lt;/li>
&lt;/ul>
&lt;h4 id="clean-up">Clean Up&lt;/h4>
&lt;pre>&lt;code># list running containers
docker ps
# list all available docker containers with their status
sudo docker ps -a
# stop container
docker stop &amp;lt;container_id&amp;gt;
# start container
docker start &amp;lt;container_id&amp;gt;
# list all stoped containers
docker ps -f &amp;quot;status=exited&amp;quot;
&lt;/code>&lt;/pre>&lt;h4 id="prune-entire-docker-system">Prune entire Docker system&lt;/h4>
&lt;p>Use this prune command when unable to launch the containers and you&amp;rsquo;d like to restart from a clean slate. WARNING: This will delete all your unused images, containers, networks and volumes including those not related to CHT.
&lt;code>docker system prune -a --volumes&lt;/code>&lt;/p></description></item><item><title>Core: Get Android Logs</title><link>https://docs.communityhealthtoolkit.org/beta/core/guides/get-android-logs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/beta/core/guides/get-android-logs/</guid><description>
&lt;p>With Android 4.1 (aka Jelly Bean) and upwards the full system log is only visible if you have root.&lt;br>
To get logs, you have to use &lt;code>adb logcat&lt;/code> via a computer.&lt;/p>
&lt;p>These are the instructions for getting logs using ADB:&lt;/p>
&lt;ol>
&lt;li>Download adb for the below platforms&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip">Windows&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dl.google.com/android/repository/platform-tools-latest-darwin.zip">Mac&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dl.google.com/android/repository/platform-tools-latest-linux.zip">Linux&lt;/a>&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>
&lt;p>Copy zip to folder and extract it&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Navigate to the folder you have extracted it to. You should see files like adb, AdbWinApi, etc1tool etc. Open the Command prompt/terminal in the current folder(In Windows, press Alt + D and write &amp;lsquo;cmd&amp;rsquo;)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Enable USB debugging on your phone by going to Settings &amp;gt; Developer Options &amp;gt; USB Debugging (this varies from phone to phone, check on the internet if the phone doesn&amp;rsquo;t fit this)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Connect your phone by USB to the computer&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You will see a popup : &amp;ldquo;Allow USB debugging. The computer&amp;rsquo;s RSA fingerprint&amp;hellip;..&amp;quot;. Click OK&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="allow_usb_debugging.png" alt="Allow USB debugging">&lt;/p>
&lt;ol start="7">
&lt;li>
&lt;p>Open the command which was opened previously and write the following command: &lt;code>adb start-server&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To check if your phone is properly connected, write the command &lt;code>adb devices&lt;/code>. This will list the devices connected. Something like&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="adb_devices.png" alt="ADB Devices">&lt;/p>
&lt;ol start="9">
&lt;li>
&lt;p>Followup with command: &lt;code>adb logcat &amp;gt; gateway.txt&lt;/code>. This stores the android logs in the file &lt;code>gateway.txt&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Now it is taking android logs. This is the time to to try to reproduce the error.
Check some of the messages that are &amp;lsquo;WAITING&amp;rsquo; and click retry
Do this for as many times as you deem necessary to capture logs for that event.
Wait about 15 minutes to enable capture of sufficient android device environment logs&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Disconnect the phone from the computer&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Open the folder which has the adb executable, you will see a file called gateway.txt
Send that file to the concerned person (PM or techlead)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>NB. If you get this error &lt;code>command not found&lt;/code> in steps 7, 8 or 9 this means adb is not in your PATH. This is where the shell looks for executables. You&amp;rsquo;ll have to append &lt;code>./&lt;/code> before any &lt;code>adb&lt;/code> command so that you can use the &lt;code>adb&lt;/code> in the current folder you&amp;rsquo;re on.&lt;/p>
&lt;p>Ex. &lt;code>./adb logcat &amp;gt; gateway.txt&lt;/code>.
The dot is your current directory, and this tells Bash to use &lt;code>adb&lt;/code> from there.&lt;/p></description></item></channel></rss>