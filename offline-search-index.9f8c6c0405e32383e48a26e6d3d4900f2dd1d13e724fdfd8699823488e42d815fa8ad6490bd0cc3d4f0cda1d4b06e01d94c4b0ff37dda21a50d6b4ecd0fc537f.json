[{"body":"Apps built with the Core Framework runs on most modern computers with the newest versions of Google Chrome or Mozilla Firefox.\nHardware \u0026amp; Software Requirements Hardware procurement, ownership, and management is the responsibility of each implementing organization. We strongly urge all organizations to procure hardware locally to ensure ease of replacement, repair, sustainability, and hardware support when needed.\nAccessing on Desktop On desktop devices, there is no need to download anything. Simply go to a web browser and type in your unique URL, for example:\n{{projectname}}.app.medicmobile.org\nAccessing on Mobile The app also runs with an app on Android phones and tablets. It works best on devices running version 5.1 or later with at least 8 GB of internal memory (16 GB for supervisors) and minimum 1 GHz RAM.\nDownloading   To download your app on a mobile device, first navigate to the Google Play Store. From there, click on the search icon in the upper right, and type in the custom name of your health app or project. Make sure the app shown is the correct one and then select it. Then, click on the “Install” button to begin the download.\nLaunching Once the download is complete, you can access your app via an app icon in your applications menu. Note that the icon, as well as the app name displayed, is customizable by the organization or project.\nLogging In   When accessing your app for the very first time, a login page is displayed. Users enter a username and password that grant access to their customized app experience.\nOn mobile devices, the app generally stays logged in after initial setup so that CHW users don’t have to type in their credentials each day.\nOn desktop devices, the user must login again if they close the app tab or browser window.\nUsers may log out by going to the options menu available in the top right corner of the app.\nSee Also: Navigating CHT Apps\n","excerpt":"Apps built with the Core Framework runs on most modern computers with the newest versions of Google …","ref":"/beta/apps/concepts/access/","title":"Accessing CHT Apps"},{"body":"CHT applications are configurable by design and support an exceptional range of features and health service areas. The ANC Reference App provides organizations with a template for structuring and organizing you app, it’s configuration code, and testing framework. It includes a foundation for forms related to pregnancy and delivery, flexible data fields, and even analytics, and can be deployed as-is or customized by a developer for your unique context.\nTo install the ANC Reference Application, follow the easy installation instructions. An overview of the ANC Reference App and its key features is also available.\n\nIf you want to modify our ANC Reference Application for your project or context, read our configuration best practices or learn how to develop your own community health apps.\n","excerpt":"CHT applications are configurable by design and support an exceptional range of features and health …","ref":"/beta/apps/examples/anc/","title":"Antenatal Care Reference App"},{"body":"Overview Server side CouchDB A free and open source NoSQL database we use to store all our data, configuration, and even the application code. CouchDB is really good at replication which is the process of sending the data to another database and back again.\napi A NodeJS service which runs on the server as a wrapper around CouchDB. It provides some security, auditing, and integration APIs. It also includes a custom implementation of filtered replication to allow it to support more concurrent users.\nsentinel Another NodeJS service running on the server, sentinel performs actions called transitions every time a document in CouchDB is added or modified. Some examples are validations, generating scheduled messages, automatic responses, creating patients, and sending alerts.\nPostgreSQL A free and open source SQL database that we use for analytics queries for display in tools like klipfolio. We created a library called couch2pg to replicate data from CouchDB into PostgreSQL.\nClient side cht-core This is the application that most users interact with. It\u0026rsquo;s an AngularJS single page responsive web application.\nWe use an offline first strategy which means the data is stored on the client and all pages can load immediately regardless of whether you have a fast connection, slow connection, or no connection at all. The data is stored in PouchDB which replicates changes back and forth in the background with the server CouchDB.\nWe use Enketo to render configured xforms and help with styling and dynamic elements such as show/hide and validation rules.\nWe use the nools rules engine to compute the upcoming tasks and monthly targets of the users.\nmedic-android The application works in the browser or wrapped in the medic-android app which allows for project branding, sets the project URL, and hides browser elements like the URL bar.\nOther applications medic-gateway Medic Gateway is an android app for sending and receiving SMS messages. Each SMS enabled project has one gateway running. It polls an api endpoint to write incoming SMS into the CouchDB and retrieve outgoing SMS to send.\nmedic-collect An android app based on Open Data Kit to render xforms on the phone and send reports in to medic-gateway over SMS or directly to api over mobile data.\nmedic-conf A command line utility for uploading configuration and bulk importing of records.\n","excerpt":"Overview Server side CouchDB A free and open source NoSQL database we use to store all our data, …","ref":"/beta/core/overview/architecture/","title":"Architecture of CHT Instances"},{"body":" \u0026ldquo;It took a while to be trusted. We had to prove our worth, but now we are well appreciated.\u0026rdquo;\n About Janet is a mother and a farmer. She takes care of her daily BRAC work after finishing her farm work. She has poor eyesight. Janet has a feature phone. She has seen smartphones but never used one. She has no electricity at her home. She charges her phone at her friend’s house. Janet has a trusted boda driver who she uses to help her deliver drugs.\nValues  Life: believes in the sanctity of life and strives to protect it by extending health care services Family Education Honesty Faith/Religion  Responsibilities  Registering new people and families Conducting guided health assessments Screening for and tracking specific conditions Providing basic medicines and health supplies Reporting danger signs \u0026amp; referring to clinics Following up about clinic visits and care  Needs  Accurate information about the health status of her patients Close monitoring of the pregnant women to ensure that all deliveries take place at the health facilities All children to be immunized according to the expanded immunization program Childrens growth to be monitored Fast transfer of community members who need emergency health care to the health facilities- ambulance transfer  Motivations  Recognition from managers, colleagues and the broader community Financial rewards such as monthly recharges for SMS, voice calls and data, rewards based on performance metrics, reimbursements or allowances for travel costs between communities being served and facilities Opportunities for continued education, training and skill improvement via refreshers, computer education etc. Career development, especially in younger cohorts: added responsibilities for high-performing CHWs such as training new CHWs or mentoring low-performing CHWs.  A Day in the Life Janet is a CHW who has been working for BRAC for 2 years. She lives in Bembe Central, a periurban town. She visits 10 and 15 homes daily where mny of the families live in brick/clay huts reinforced with straw with no electricity, running water or internet connection.\nJanet visits homes based off a list after she finishes her day job. There is no particular order, although she follows the register. While she may get some specific calls, most days she just visits homes and records her visits in the book. Some visits can be as quick as 2 minutes. She walks along a dirt road with her BRAC outfit making her stand out. She often calls out to her neighbors as she walks alon the road. In the rainy season — when diarrhea is often worse — these roads flood. Janet does not visit homes on these days.\nDuring her visits Janet carries her register, an education booklet, drugs and other sales material in her bag which is very heavy. She readjusts the weight of her bag several times and sometimes drops her drugs. Bodas play an important role in the health system here. Janet has a trusted body driver, whom she asks to deliver drugs.\nOn days with her Supervisor, Janet might visit 20-25 homes. The Supervisor joins her at least once a month where they also conduct “health forums” together. Supervisors conduct technical procedures,such as taking BP, marking columns in the CHWs register and later copies this into their own during refresher trainings.\nA normal day lasts about 2 hours.\n","excerpt":"\u0026ldquo;It took a while to be trusted. We had to prove our worth, but now we are well …","ref":"/beta/design/personas/chw-janet/","title":"The Professionalized Community Health Worker (CHW), Janet"},{"body":"Most health systems have regular reporting requirements for community-level activities. Health workers often carry around heavy logbooks to manually record all relevant activities. When it is time to submit their data, community health workers summarize what was recorded in their logbooks and share this information with their supervisors, who in turn create paper records of these totals across entire community units or health facilities. This paper record is often passed to yet another individual whose responsibility is to manually key in the data into a health information management system, such as DHIS2.\nIn communities using digital health apps that do not integrate with DHIS2, it is highly likely that health workers are duplicating efforts by recording the same information in their app and in their logbook(s). For example, they are not only registering new pregnancies in their app, but they are also manually recording this in their logbooks, manually adding them up at the end of the month, and then someone else is manually keying this into DHIS2.\nIn communities using digital health apps built with the CHT, health systems can reduce or eliminate the need to complete paper based forms for DHIS2 reporting needs. This gives health workers more time to focus on caring for the families in their community while also increasing accuracy and timeliness of their DHIS2 reporting requirements.\nOverview CHT Core supports integrations with DHIS2 in a variety of ways:\n Sending patient data Sending event data Sending pre-aggregated \u0026ldquo;Service Reports\u0026rdquo; Aggregating data across multiple health workers into DHIS2 Data Values Exporting a file that can be imported into DHIS2 as a Data Set Exposing an API for DHIS2 app developers to pull aggregate data from CHT Core Receiving data from DHIS2  Sending patient, event, and pre-aggregated data can be achieved using the Outbound push feature. Receiving data from DHIS2 can be achieved using the CHT Core Web API.\nAggregating data across multiple health workers requires a somewhat specific workflow and was designed with three key user personas in mind. The aggregate workflow is described in more detail below.\nAggregate Workflow The aggregate workflow was designed specifically for CHWs, Supervisors, and Health Records Information Officers (HRIO) but may be adapted to other contexts.\nCHW (Offline user): Conducts home visits and records information in the app. Reviews aggregate data throughout the month and makes sure to sync at the end of the month.\nSupervisor (Offline user): Provides supervision to the CHWs, reviews and verifies aggregate data for an entire community unit.\nHRIO (Online user): Exports a file from the CHT and imports into DHIS2. Reviews data in DHIS2.\nCHW CHWs support patients in their community by following care guides and recording responses in the CHT. The CHT calculates aggregate DHIS2 Data Values for each CHW based on rules configured in the CHT. CHWs can view these indicators on the Targets tab and should review them and sync at the end of the month.\nSee Also: Targets\nSupervisor In addition to their own Targets, Supervisors can see the aggregate of each DHIS2 Data Value across all CHWs in their area from the CHW Aggregate view on the Targets tab. By tapping on a Target, they can also see each CHW’s contribution towards that total. Supervisors can review and verify with CHWs that everyone has synced and their data is correct. The Supervisor can communicate with the HRIO when everything has been validated.\nHRIO HRIOs access the CHT App Management tab and select the appropriate DHIS2 Data Set, Organisation Unit, and Period. They then “Export” a file that is formatted for DHIS2. HRIOs will need access to the “Import/Export” feature in DHIS2 so that they can “Import” the file. Once it has been imported into DHIS2, they review the data from the Data Entry screen in DHIS2.\nDHIS2 apps The CHT also includes an API that can be called from other applications that returns DHIS2 Data Sets. This means that you can build a DHIS2 app that pulls data from the CHT and imports it electronically into DHIS2. This would allow Data Entry to control the process directly from DHIS2 without having to access the CHT.\nVersion Notes    Feature CHT Core version     Calculate DHIS2 Data Values by aggregating data from CHT Core reports 3.9.0   Export file from CHT Core that can be imported into DHIS2 as a Data Set 3.9.0    ","excerpt":"Most health systems have regular reporting requirements for community-level activities. Health …","ref":"/beta/apps/features/integrations/dhis2/","title":"DHIS2"},{"body":"Welcome to the Community Health Toolkit docs site! The Community Health Toolkit is a collection of open-source technologies and open-access resources developed by a community focused on global health equity. We envision a world where primary health care is equitable, accessible, and delivered by people who are trusted in their communities. Start with the CHT overview, and join our community forum!\nThis site is being actively updated to make it as easy as possible to deploy CHT apps. Please notify us if you find any errors or inconsistencies.\n Why work with the CHT? Community health systems can dramatically improve the accessibility, quality, speed, and equity of primary health care, but only if health workers are effectively equipped and supported. Advances in open source technology are making it easier and more affordable than ever to deliver impactful, dignified care in even the hardest-to-reach communities.\nWith more than 27,000 health workers using these tools to support a million home visits every month, the CHT is the most full-featured, mature, and widely-used open source software toolkit designed specifically for community health systems. Hundreds of individuals contribute to the CHT as designers, developers, researchers, health policy experts, health system implementers, and frontline health workers. For more about the unique strengths of our open source community and the technology we’re building together, see Why the CHT?\n  \nWhat can you build with the CHT? The CHT provides you with resources to design, build, deploy, and monitor digital tools for community health. It includes open source software frameworks and applications, guides to help design and use them, and a community forum for collaboration and support. The resources provided through the Community Health Toolkit can be used to build digital health apps used at the community, health facility, and health system level:\nAt the community level, community health workers (CHWs) use apps built with the CHT to register patients, conduct guided health assessments, screen for specific conditions and danger signs, and refer patients to health facilities.\nAt the health facility level, nurses and CHW supervisors use apps and admin consoles built with the CHT to coordinate care for patients with the CHWs, promote health practices in the community, and report health and service delivery statistics to health system officials\nAt the health system level, data managers and others use apps and admin consoles built with the CHT to collate and report on key community and health system data. Their work often involves following up with supervisors and nurses to verify data for accuracy and completion.\n\nGetting Started \nWhy the CHT? A great place to start for high-level context on what our community is building together. To explore the diverse kinds of digital health apps you can build with the CHT, you might also find it helpful to read about the ANC Reference App, or watch demo videos for contact tracing, covid education, or covid symptom checking apps. If you want to try out the software for yourself, feel free to request a demo account.\nCHT Applications Comprehensive reference material on CHT concepts and features, useful for anyone interested in understanding what features and configuration options are available for CHT apps. This section also includes quick guides on focused app development topics, and a growing collection of thorough step-by-step tutorials for developing and deploying digital health apps with the Community Health Toolkit. If you\u0026rsquo;re a developer and want to dive right into developing your own app, this is the place to start.\nCHT Core Framework An overview and reference for development of the Core Framework of the Community Health Toolkit (CHT). Most CHT App developers are able to build great experiences for their users without extending CHT Core, but you might still find this section useful for its overview of CHT components, or outline of the core development and release management process.\nDesign System An overview of key end user personas, notes on the CHT icon library, and configuration best practices for forms, tasks, targets, and contact profiles. These materials include more detail than you will need when you\u0026rsquo;re just beginning to explore the CHT, but they become increasingly helpful when designing your own community health app for a live deployment.\nHave Questions? Want to learn alongside a community of users? Join our community forum and let us know how we can help! And if you like what you see, don’t forget to star our Github repo :)\n\nFeedback appreciated! This docs site is continually changing in response to great community feedback. If you notice a need for any corrections, or would like to see additional content on a particular topic, please feel free to use the Create Documentation Issue link in the upper right corner of your window.  ","excerpt":"Welcome to the Community Health Toolkit docs site! The Community Health Toolkit is a collection of …","ref":"/beta/","title":"Community Health Toolkit"},{"body":"Full list of files and alternate formats available in GitHub.\n div.gallery { display: flex; flex-wrap: wrap; } div.gallery a { display: block; width: 200px; margin: 1em; flex-wrap: wrap; text-align: center; overflow: hidden } div.gallery a img { display: block; width: 200px; clear: both; float: left; padding: 1em; border: 2px #cccccc solid; } div.gallery a span { display: block; clear: left; float: left; margin-top: 0.4em; }  icon-ANC-danger-sign.svg  icon-ICCM-danger-sign.svg  icon-PNC-danger-sign.svg  icon-child-cognition.svg  icon-child-growth.svg  icon-child-nutrition.svg  icon-community-meeting-tree.svg  icon-community.svg  icon-condition-cough.svg  icon-condition-diarrhea.svg  icon-condition-fever.svg  icon-death-coffin-maternal.svg  icon-death-coffin-neonatal.svg  icon-death-coffin.svg  icon-death-general.svg  icon-delivery.svg  icon-disease-HIV-AIDS.svg  icon-disease-cancer.svg  icon-disease-cardiovascular.svg  icon-disease-diabetes.svg  icon-disease-malaria.svg  icon-disease-outbreak.svg  icon-disease-pneumonia.svg  icon-disease-respiratory.svg  icon-family-planning.svg  icon-followup-general.svg  icon-form-general.svg  icon-healthcare-assessment.svg  icon-healthcare-diagnosis.svg  icon-healthcare-generic-2.svg  icon-healthcare-generic.svg  icon-healthcare-immunization.svg  icon-healthcare-medicine.svg  icon-healthcare-shield.svg  icon-healthcare-warning.svg  icon-household-bednet.svg  icon-household-education.svg  icon-household-equity.svg  icon-household-foodsecurity.svg  icon-messages-off.svg  icon-messages-on.svg  icon-people-CHW-crop.svg  icon-people-CHW-female.svg  icon-people-CHW-male.svg  icon-people-baby.svg  icon-people-child.svg  icon-people-children.svg  icon-people-family.svg  icon-people-man.svg  icon-people-manager-crop.svg  icon-people-manager.svg  icon-people-nurse-crop.svg  icon-people-nurse.svg  icon-people-person-general.svg  icon-people-woman-baby-crop.svg  icon-people-woman-baby.svg  icon-people-woman-pregnant.svg  icon-people-woman.svg  icon-places-CHW-area.svg  icon-places-MOH.svg  icon-places-clinic.svg  icon-places-hospital.svg  icon-places-household.svg  icon-service-rating.svg  icon-warning-amber.svg  icon-warning-black.svg  icon-warning-red.svg   ","excerpt":"Full list of files and alternate formats available in GitHub.\n div.gallery { display: flex; …","ref":"/beta/design/icons/forms_tasks_targets/","title":"Icons for Forms, Tasks, Targets"},{"body":"Characteristics and Strengths  May have influence and reach with the government to adopt and scale-up the new model of care Have a good understanding of the health needs of communities Have an appreciation for the role of digital technology in healthcare May have deployed, or are planning to deploy, digital health tools in the community health space Support government’s CHW networks, and may have fielded their own cadre of CHWs Are leveraging data and data science to innovate on new approaches to achieving desired health outcomes Have access to health systems data from the deployment of a new model of care May possess existing capacity, or are looking to build, the in-house capacity to deploy and implement digital health tools May have already invested significantly in proprietary locked-in software Keen to attract funding from large funders May have a presence in multiple countries  Values  Equitable access to quality health care Developing national and local capacities Cost-effectiveness Government and donor relations Harmonization and alignment to the national health strategies Integration with national digital health platforms Government adoption and ownership of their model of care  Needs  Government support and buy-in Funder backing and resources to design and deploy digital health programs HCD and data science capabilities May need further understanding and expertise in working with CHT and opensource tools  ","excerpt":"Characteristics and Strengths  May have influence and reach with the government to adopt and …","ref":"/beta/design/personas/partners/implementers/","title":"Implementing Partners"},{"body":"Purpose of the tutorial This tutorial will take you through setting up a local environment to build and test CHT applications. This includes setting up the necessary tools to download and run the CHT public docker image as well as a command line interface tool to manage and build CHT apps.\nBy the end of the tutorial you should be able to:\n View the login page to CHT webapp on localhost Upload default settings to localhost  Brief overview of key concepts CHT Core Framework The Core Framework makes it faster to build full-featured, scalable digital health apps by providing a foundation developers can build on. These apps can support most languages, are offline-first, and work on basic phones (via SMS), smartphones, tablets, and computers.\nMedic Project Configurer a.k.a medic-conf is command-line interface tool to manage and configure CHT apps.\nDocker is a tool designed to make it easier to create, deploy, and run applications by using containers.\nContainers allow a developer to package up an application with all of the parts it needs, such as libraries and other dependencies, and deploy it as one package.\nRequired resources Before you begin, you need to have some useful software and tools that are required for things to work.\nFirst off, install nodejs 8 or later and npm.\nYou also require Docker for your operating system:\n Docker for Ubuntu Docker for MacOS Docker for Windows  Implementation steps Now that you have the dependent tools and software install, you are ready to begin setting up your CHT local environment.\n1. Install medic-conf Using npm on your terminal or command line, install medic-conf globally using the following command;\nnpm install -g medic-conf You can confirm that the installation was successful by typing medic-conf in your terminal or command line.\n2. Install the Core Framework Download the docker-compose.yml file to a folder of your choice. Be sure to place it in a folder that\u0026rsquo;s easy to find on terminal or command line.\nOpen your terminal or command line and navigate to the folder where you have your docker-compose.yml file and run the command:\ndocker-compose up Once the command is done running, navigate to https://localhost on a Google Chrome browser and login with the default username medic and default password password.\n3. Create and upload a blank project With medic-conf you can create a blank project. This provides you a template from which you can begin working on CHT. Just run:\nmkdir cht-app-tutorials cd cht-app-tutorials medic-conf initialise-project-layout Then deploy the blank project onto your local test environment with the command:\nmedic-conf --url=https://medic:password@localhost --accept-self-signed-certs accept-self-signed-certs tells medic-conf that it’s OK that the server’s certificate isn’t signed properly, which will be the case when using docker locally.\nOnce you have run the above command it should complete with the message: INFO All actions completed..\nFrequently Asked Questions  How do I upgrade to a higher version of the webapp? How do I access the instance remotely?  ","excerpt":"Purpose of the tutorial This tutorial will take you through setting up a local environment to build …","ref":"/beta/apps/tutorials/local-setup/","title":"CHT Local Environment Setup"},{"body":"Full list of files and alternate formats available in GitHub.\n div.gallery { display: flex; flex-wrap: wrap; } div.gallery a { display: block; width: 200px; margin: 1em; flex-wrap: wrap; text-align: center; overflow: hidden } div.gallery a img { display: block; width: 200px; clear: both; float: left; padding: 1em; border: 2px #cccccc solid; } div.gallery a span { display: block; clear: left; float: left; margin-top: 0.4em; }  hierarchies-chw-area.svg  hierarchies-district-hospital.svg  hierarchies-family.svg  hierarchies-health-center.svg  hierarchies-person.svg   ","excerpt":"Full list of files and alternate formats available in GitHub.\n div.gallery { display: flex; …","ref":"/beta/design/icons/people_and_places/","title":"Icons for People and Places"},{"body":"User personas give us a common understanding of who we are serving, particularly when working across diverse contexts. Our global personas are based on “typical” users, knowing that some variation is present in different settings.\nBeing explicit about who are we designing with and for, and understanding what’s important to them helps us prioritize features, make better design decisions, and optimize impact.\n","excerpt":"User personas give us a common understanding of who we are serving, particularly when working across …","ref":"/beta/design/personas/","title":"User Personas"},{"body":"Medic Mobile supports the latest patch of minor versions of the Core Framework for three months after the next minor version is made available, and the latest minor of a major version for twelve months after the next major version is made available.\nOnce a version is no longer supported it will not receive any further releases and upgrading may be required before Medic Mobile can investigate any issues.\n   Version Status Release date End of life     3.8.1 Current 6-Apr-2020 TBA   3.8.0 EOL 11-Feb-2020 6-Apr-2020   3.7.1 Supported 13-Nov-2019 11-Jun-2020   3.7.0 EOL 22-Oct-2019 13-Nov-2019   3.6.2 EOL 24-Mar-2020 24-Mar-2020   3.6.1 EOL 07-Aug-2019 22-Jan-2020   3.6.0 EOL 17-Jul-2019 07-Aug-2019   3.5.0 EOL 27-Jun-2019 17-Oct-2019   3.4.1 EOL 4-Jun-2019 27-Sep-2019   3.4.0 EOL 27-Mar-2019 4-Jun-2019   3.3.0 EOL 22-Feb-2019 27-Jun-2019   3.2.1 EOL 23-Jan-2019 22-May-2019   3.2.0 EOL 23-Jan-2019 23-Jan-2019   3.1.0 EOL 21-Nov-2018 23-Apr-2019   3.0.0 EOL 15-Nov-2018 21-Feb-2019   2.18.1 EOL 31-Oct-2018 15-Nov-2019   2.18.0 EOL 30-Aug-2018 31-Oct-2018   earlier EOL \u0026hellip; 30-Nov-2018    Dependencies    medic Node CouchDB Browsers SMS bridge Android medic-android medic-couch2pg     0.4 0.12+ 1.6+ Chrome 30+, Firefox latest SMSSync N/A N/A N/A   2.x 6+ 1.6+ Chrome 30+, Firefox latest medic-gateway 4.4+ Any 2.0 \u0026lt; 3.0   3.x 8.11+ 2.1+ Chrome 53+, Firefox latest medic-gateway 4.4+ 0.4.5+ 3.0+    Hardware requirements Smartphones The following is the minimum specification recommendation for smartphones to handle the typical workload of front line health workers. Users with particularly high workloads or facility or supervisor workloads will require more powerful devices.\n   Specification Minimum     Android version 5.0   Processor 1.0GHz dual-core   RAM 1GB   Storage 8GB    ","excerpt":"Medic Mobile supports the latest patch of minor versions of the Core Framework for three months …","ref":"/beta/apps/reference/supported-software/","title":"Supported Versions"},{"body":" The Community Health Toolkit is a collection of open-source technologies and open-access resources developed by a community focused on global health equity. We envision a world where primary health care is equitable, accessible, and delivered by people who are trusted in their communities. Start with the CHT overview, and join our community forum!\n Community health systems can dramatically improve the accessibility, quality, speed, and equity of primary health care, but only if health workers are effectively equipped and supported. Advances in open source technology are making it easier and more affordable than ever to deliver impactful, dignified care in even the hardest-to-reach communities.\nWith more than 27,000 health workers using these tools to support a million home visits every month, the CHT is the most full-featured, mature, and widely-used open source software toolkit designed specifically for community health systems. Hundreds of individuals contribute to the CHT as designers, developers, researchers, health policy experts, health system implementers, and frontline health workers.\n  \nThe CHT Community The CHT is 100% open source\u0026ndash;it always has been and always will be freely available as a public good. This is possible thanks to a diverse community of contributors that includes global health NGOs, technical organizations, governments, and research institutions, with the non-profit organization Medic Mobile serving as a technical steward.\nOur longterm focus on community-driven health systems, integrated care, and universal health coverage has surfaced innumerable insights that make the CHT unique. We\u0026rsquo;re also deeply committed to human-centered and participatory design, as an approach to building technology with and for hard-to-reach communities. These principles have helped us to foster a remarkably dynamic and innovative community; learning and building with this community is one of the key reasons people decide to work with the CHT.\n If you’re contributing to the CHT and would like to see your organization’s logo featured here, please send an email to hello@medicmobile.org.\nSpeeding up app development with the CHT Core Framework The Core Framework makes it faster to build full-featured, scalable digital health apps by providing a foundation developers can build on. These apps can support most languages, are offline-first, and work on basic phones (via SMS), smartphones, tablets, and the web. Rich interactive applications that would take 6-18 months to build from scratch can be built using CHT Core in as little as 1-2 months. Some of our COVID-19 response applications shipped in under 2 weeks.\nApp developers are able to define health system roles, permissions and reporting hierarchies, and make use of five highly configurable areas of functionality: messaging, task and schedule management, decision support workflows, longitudinal person profiles, and analytics.\nThe Core Framework can be used to support the unique needs of a given health system and the work of community health workers, frontline supervisors, facility-based nurses, health system managers, and even patients and caregivers.\nOffline-first technology Digital health apps need to support health systems in a wide range of low infrastructure environments. Apps built with the Core Framework are designed to be offline-first and work with only an occasional internet connection.\nThese apps store a user’s data locally on their device so that workflows can be completed without syncing to the server. When a connection becomes available, data will automatically sync to and from the server. Offline-first technology enables health workers to carry out important duties even when opportunities to sync may be weeks apart. As with any app, there is a limit to how much data can be stored locally, particularly on a mobile device. For users needing access to large amounts of data, online user roles are available.\nBuild one application and run it across smartphones, tablets, and the web A responsive web app is a hybrid of a website and a native mobile application. On desktop and laptop computers, it runs in the web browser. On Android devices (such as cell phones or tablets), it is downloaded as an app. The same source code powers the experience, meaning that the app you see on your desktop is the same app you see on your mobile device.\nWeb apps built with the Core Framework are fully responsive, which means content will scale to fill the available space. Users accessing the app on a mobile device will see a single-panel mobile layout. Users accessing the app on a desktop or laptop device will see a two-panel layout.\nProgressive Web Application (PWA) is another term for web apps that are built and enhanced with modern APIs to deliver offline-first, native-like capabilities while reaching anyone, anywhere, on any device with a single codebase. For more about how CHT Apps and other PWAs integrate the best of native apps and the open web, see the post What are Progressive Web Apps? on web.dev.\nMade for localization Apps can be customized for different deployments and types of workflows. The Core Framework has been used in dozens of countries around the world with localization settings.\nUsers can currently interact with the app in English, French, Hindi, Nepali, Spanish, Swahili, or Indonesian and new languages can be added in the admin console. The app also supports Bikram Sambat or Gregorian calendars and localized date formatting.\nReference apps The Community Health Toolkit’s Reference Apps provide organizations with a template for structuring and organizing a community health workflow, its configuration code, and testing framework. They include a foundation for forms, data fields, and even analytics, and can be deployed as-is or easily customized by a developer for your unique context.\n","excerpt":"The Community Health Toolkit is a collection of open-source technologies and open-access resources …","ref":"/beta/why-the-cht/","title":"Why the Community Health Toolkit?"},{"body":"Forms We use forms to build the Tasks, Care Guides, and Reports that take health workers through care protocols and provide decision support for their interactions with patients.\nIn this context, a form is any document with questions and blank spaces or selectable options for answers. Forms can be found in many parts of your app including the Tasks, People, and Reports tabs\nWhile both Tasks and Reports are built with forms, there are key differences. Tasks are blank forms that need to be completed, while Reports are forms that have already been submitted. When a Task is completed and submitted, it automatically becomes a Report.\nNote: The icons and titles that we choose for Tasks remain the same when they become Reports.\nAnatomy of a Task The Task tab shows a list of upcoming visits, follow-ups, or other tasks that need to be completed. When a task is finished, it will automatically clear from the Tasks list and move to Reports.\nEach Task has an icon on the left side which indicates what type of Task it is. The first bold line of text is the name of the person or family that the Task is about. The second line of text is the name of the Task. The days left for the Task to be done is located in the upper right hand corner. If a Task is overdue, the due date will be red. Tasks are listed in order of due date. Anatomy of a Report The first line of bold text is the name of the person whom the Report is about. The second line of text is the title of the Report.\nThe third line of text is the hierarchy of place to which that person belongs. In the upper right corner, a timestamp displays when the Report was submitted.\nReports are sorted by submission date, with the most recently submitted Reports at the top. If a Report is unread, the timestamp will be bold blue and there will be a horizontal blue line above it.\nTitles The patient’s name should not be included in the form title.\n❌ Don't do this: \u0026quot;Beatrice Bass Delivery Follow-Up\u0026quot; ✅ Do this instead: \u0026quot;Delivery Follow-Up\u0026quot; \nAvoid generic words like “Visit” or “Report”. Every form can be a Report and often involves a visit, so including these words in the title doesn’t help differentiate it from other forms.\n❌ Don't do this: \u0026quot;Delivery Follow-up Visit\u0026quot; ✅ Do this instead: \u0026quot;Delivery Follow-Up\u0026quot; \nEach word in a title should be capitalized (Title Case).\n❌ Don't do this: \u0026quot;Delivery follow-up\u0026quot; \u0026lt; ✅ Do this instead: \u0026quot;Delivery Follow-Up\u0026quot; \nKeep form titles short and concise. Long titles will sometimes be truncated (cut off with an ellipsis) and the text at the end of the title might be lost. As a rough estimate, strive to keep titles no longer than 40 characters in length.\n❌ Don't do this: \u0026quot;This Title Has Way More Than Forty Characters And Is Too Long\u0026quot; ✅ Do this instead: \u0026quot;Title Is Less Than Forty Characters\u0026quot; \nTo help estimate how much text can be displayed before truncation, you can use the low-fi mockups here. If you type your form name into the mockup you can get a rough idea of how much text will fit before truncation occurs. Please note that the mockups have been made with our smallest screen sizes in mind. Some users’ screens will be larger and will be able to display more text.\nThe screenshots here represent some of the smallest phones our users have. As you can see, on both the Tasks and Reports pages, titles less than about forty characters will fit in the space. Titles longer than about forty characters might be cut off with an ellipsis (\u0026hellip;).\nIcons The Community Health Toolkit includes a collection of 60+ free icons that represent key elements of different community health workflows and protocols. Please review the recommended usages that follow.\n   Icon People and Places Hierarchies      Hospital or District    CHW Area    Branch or Health Facility    Family    Person       Icon Family Planning      - Family Planning Screening\n- Family Planning Referral or Follow-Up       Icon ANC      - ANC Registration\n- ANC Visit or Missed Visit\n- ANCE Follow-Up    - ANC Danger Sign\n- ANC Danger Sign Follow-Up       Icon PNC      - PNC Registration\n- PNC Visit or Missed Visit\n- PNC Follow-Up    - PNC Danger Sign\n- PNC Danger Sign Follow-Up       Icon ICCM and Child Health      - ICCM Assessment\n- ICCM Treatment\n- ICCM Referral or Follow-Up    - ICCM Danger Sign\n- ICCM Danger Sign Follow-Up       Icon Immunization      - Immunization Visit\n- Immunization Follow-Up       Icon Visits      - General Follow-Up\n- Proactive Visit\n- Educational Visit       Icon Community      - Community Event\n- Community Meeting       Icon Various      Delivery    Malnutrition    Growth Monitoring    Cognition    General Forms    General Assessments    Equity Survey    Bed Net Distribution    Content and Layout Group Related Information Users think in batches, and long forms can feel overwhelming. By creating logical groups the user will make sense of the form much faster.\nEx. Visit Details, Danger Signs Order the Form Logically and Only Ask What\u0026rsquo;s Required\nKeep questions concise and in an intuitive sequence — they should be asked logically from a user’s perspective. This makes the flow from one set of questions to the next better resemble a conversation.\nEx. Is your patient still pregnant? → Did she attend the ANC visit? → Does she have danger signs? Reflect Input Length in Field Employ this for fields that have a defined character count like phone numbers, zip codes, etc.\nDon’t Put Placeholder Or Helper Text Inside The Form Fields People go through forms quickly and if a field looks like it already has an answer they may accidentally miss it. Research shows that empty fields draw more attention than those with placeholder text.\nDistinguish Optional And Required Fields Users don’t always know what is implied by the required field marker ( * ). Instead, denoting what is optional is a preferred method, especially for forms with many required fields. If you do use asterisks, make the meaning of the symbol clear by stating “Fields with an asterisk ( * ) are mandatory.” Always Stack Radio Buttons And Checkboxes In A Single Vertical Column Placing the options underneath each other allows for easy scanning and makes it less likely that a user will completely overlook one of the options.\nDon’t Use Dropdowns If There Are Less Than Seven Options For smaller lists, use radio buttons instead of drop-down menus. Radio buttons have lower cognitive load because they make all options visible for easy comparison.\nMake Use Of Images Where it makes sense, use images to aid in the understanding of a question\nSummary Page After all of the required questions in a form are answered, a summary page is displayed. Here, health workers can review the information they entered into the form, receive instructions for treatment, care, and referrals, and relay detailed educational information to the patient.\nNote: The form is not submitted until the user scrolls to the end of the page and clicks “Submit”.\nAll care guides are defined using ODK XForms, an XML definition of the structure and format for a set of questions. Since writing raw XML can be tedious, we suggest creating the forms using the XLSForm standard, and using the medic-conf command line configurer tool to convert them to XForm format. Because the XLSForms are converted directly to XForms, they essentially are the form, and so it’s important that the XLS be set up properly and consistently. Read more about configuring forms here.\nPage Sections General Section Order\nNot all forms will have all summary sections, but the sections that appear should be in this order:\n Reminder: “To finish, be sure to click the Submit button at the bottom of the form.” Patient details (name, age etc.) Visit information (summarizes the info that was just captured in the form) Signs and symptoms (if applicable) Refer to a health facility warning message (if applicable) Diagnosis and treatment (if applicable) Healthy tips/educational info (if applicable) Follow-ups scheduled (if applicable) Submit button  Section Headers\nSection headers are used to separate content sections of the summary page. They make the page easier to scan and they make it easier to find a specific section.\nThere are suggested orders, colors and icons for section headers. A section should only be visible if it contains content (ie. headers should never be stacked directly on top of each other).\nTo ensure that headers only show when they have content the relevant condition for the section header should join the conditions of all the subfields.\n Ex. {condition_a} OR {condition_b} OR {condition_c}\nHeader Text\n The text inside of the section headers should be “H1”: Noto Sans 18px bold The text should be centered vertically \u0026amp; horizontally in the bar Each section header title should be Title Case, meaning each word is capitalized e.g. “Patient Details”  Header Color\nThough it may be tempting to give each section has a unique color (e.g. “Patient Details” is yellow, “Healthy Tips” is blue etc), sometimes there are too many sections for each one to have its own color, other times the various colors just look jarring and confusing. In general, you should strive to use color in a way that adds meaning and improves understanding, and avoid using color in a purely decorative manner.\nNote: Only use the bright red color to call out important things like warnings and danger signs\n If you choose to use multiple header colors, ensure that every header is a unique color. For example:  yellow: #e2b100 - patient details blue: #6b9acd - visit information and key health messages lime: #b5bd21 - child health red: #e00900 - warnings and danger signs green: #75b2b2 - follow up (at the end)   If you find you have more sections than you do colors, it may be best to just make all the headers a single color (with the exception of warnings or referral messages, which should remain red). In this case, blue is a good default color to fall back on.  Header Icons\nEach section header should have an icon on the far left side. The icons should all be colored white, and should all be the same size. These icons should be unique for each section (no repeat icons)\nSuggested icons for each section:\n   Icon Section      Patient Details    Visit Information    Pregnancy Specific    Child Helath Specific    Signs and Symptoms    Warnings and Referrals    Diagnosis and Treatment    Visit Information    Follow-Ups    Misc/General    Text styling\nH1: colored horizontal bars for section headers H2: text with a colored line under it, centered H3: left aligned text, simple grey line under it H4: normal body text\nOther body text styling\n Bold text is indicated by ** or “bold” or \u0026lt;strong\u0026gt; Italic text is indicated by * or “italic” or _ List item is indicated by either specifying li in the appearance column or formating the label text using html tag li Numbers: needs to be hard coded H1, h2, h3 \u0026hellip;, em, i, ul, li, p, span html tags work as expected including use of the style attribute within the tages e.g \u0026lt;i style=”color: red”\u0026gt;\u0026lt;/i\u0026gt; Explicit new line space translates to a new line (\\n translates to a hard break) You could potentially specify an inline list using standard html \u0026lt;ol\u0026gt;\u0026lt;li\u0026gt;Blah\u0026lt;/li\u0026gt;\u0026lt;/ol\u0026gt; (ordered list) \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;Blah\u0026lt;/li\u0026gt;\u0026lt;/u\u0026gt; (unordered list)  Note: You’ll need to compensate for the extra padding left margin by moving the list to the left generally by \u0026lt;ol style=”margin-left:1em”\u0026gt;\u0026lt;/ol\u0026gt;. You can also customise the bullet style and position using what’s specified in the HTML spec\nEx. \u0026lt;ol style=\u0026quot;list-style: decimal inside;\u0026quot;\u0026gt;\u0026lt;/ol\u0026gt;  Condition Cards A condition card is a configurable card that can be displayed on a profile that shows information that was submitted in or calculated from reports. Their purpose is to reveal important information in an easily viewable location.\nThis information can be organized into cards specific to a condition (e.g. pregnancy, malnutrition) as well as past conditions, and set to display for any length of the time.\nConfigurable Elements  Title Label for each data point displayed Data point for the field Icon for the field, if desired  Guidelines Card Title\n Name of the condition, e.g. Pregnancy, Malnutrition, Malaria Define if condition is past, e.g. Past Pregnancies  Field Label\n Label each data point displayed One line  Field Content\n Can include any information that was collected in a form or multiple forms about the person  Ex. LMP, EDD, most recent case of malaria, past pregnancies and their delivery dates  Can display Notes Data can be displayed in the following formats:  Number Count towards a goal Percentage Date Text field   Fields in cards are dynamic and will update as new information is submitted  Ex. # of ANC visits so far, change in risk status  Fields can include icons  Ex. High risk status on an Active Pregnancy card  Icons should be selected from Medic’s icon library and should be displayed at our standard 30 x 30 px size  Displaying Cards\n Can be configured to show and hide at the appropriate time  Ex. Show the EDD of the current pregnancy until a delivery Report is received, show that a child is being treated for malnutrition until the treatment is complete, show that a child had malaria until 2 weeks after diagnosis   Condition cards can be configured to disappear at the end of the condition or persist for any length of time\n  Can be added to a person or place profile\n  Ex. Equity scorecard on household profile; CHW performance scorecard on CHW profile Design Considerations  Group information related to the same condition so that the user can easily understand the relevance of the data and find what they are looking for.  Ex. Pregnancy Card, Immunization Card   Consider what a user will do with the information before deciding to display it. More info isn’t necessarily better; what does a CHW need to know and how will they change their actions as a result?\n  Past condition cards may be best displayed as a summary of multiple past conditions rather than individual conditions\n  Ex. Summary of past pregnancies rather than card for each past pregnancy \n Targets The Targets tab shows key performance indicators. Progress numbers are calculated automatically by the app, and goals are set by the organization. We currently support two types of widgets: Counts and Percentage-based bars.\nCounts\n Counts show current totals and will update as reports are created If there is a goal, it will be displayed to the right of the count. If the count is green, the goal has been met. If the count is red, the goal has not yet been met Goals can only be met by exceeding them, you cannot set a goal which is met by being under the goal  Percentages\n Percentage bars show progress towards completing certain reports. The colored part of the bar will update as reports are created. If there is a goal, a line will be on the bar to mark the goal. If the bar is green, the goal has been met. If the bar is red, the goal has not yet been met. The text below the bar shows how the percentage is calculated, displaying the number of Reports that met the requirement out of the total number of Reports.  Configurable elements\n Title text (free text) Subtitle text (two options: all-time or this month) Icon (selected from our icon library) Presence of a goal (or not) Value of the goal (per widget, not per user) Number and placement of widgets of either type.  Guidelines Title\n The data point being measured. No need to include “%”, the word “percent”, or the word “count” (these are stated elsewhere) or any information on timeframe. Titles should be 40-50 characters max. All text should be set in sentence case (meaning the first letter of first word is capitalized, all other words lowercase, except for acronyms) If hyphenation is needed, words should only be broken at syllables  Ex. - % Newborn Care Visit Within 72 hours → Newborn visits within 3 days - % of Under-5 Referrals Followed-up within 24 hours → U5 referral follow-ups within 1 day - % of Fever Tested with mRDT → Fever tested with mRDT - Pregnancies Registered This Month → Pregnancies registered - Births This Month → New births - Deliveries at Facility All Time → Deliveries at facility Subtitle\n The subtitle is where timeframe information lives, expressed as either “This month” or “All-time”. For now, these are the only two options. All text should be set in sentence case.  Bars\n Has to have a numerator and a denominator \u0026ndash; comparing two things, and not more than two at this time (can’t do: % of deliveries at (1) home unskilled vs. (2) home skilled vs. (3) facility. Any two of these would work though, including (1) all home deliveries vs. (2) facility deliveries). It is possible to account for things that haven’t happened. For example, if you are measuring PNC visits that happened within 1 week of delivery, you can determine whether a particular woman should have had a PNC visit based on her EDD. There are several ways to account for things that have and haven’t happened, and happened late, depending on what you are trying to show.  Ex. Configurations for visit attendance: - Of all the visits that happened, how many were on-time? (doesn’t look for visits that didn’t happen) - On-time = true, Late = false - Of all the visits that were supposed to happen, how many were on-time? \u0026lt;br\u0026gt; - On-time = true, Late + didn’t happen = false - Of all the visits that were supposed to happen, how many actually occurred? (includes on-time and late as having happened) - On-time + Late = true, Didn’t happen = false  It’s not possible to total up forms from all household members or check to see if any family member had a form submitted this week and count that as the household being visited. If you want to count the households visited this month, you need a form submitted at the household level like a household visit form or a household survey form. Denominator must be the same for both sides (e.g. kids in our immunization program). Can’t split it into kids \u0026lt;2 yrs on one side and kids \u0026lt;5 years on the other side. Bars must progress positively (ex. Visits completed, not visits missed)  Unique Considerations for Personas\nCHWs:\n Will be viewing on a mobile device; keep in mind the number of widgets you display Information is related to their own individual achievement, not comparisons with peers or aggregates for their facility May have a difficult time understanding percentages (however certain partners like LG still focus on % based targets and therefore it still needs to be included). Percentages are good for evaluating performance, but difficult to “act on” because depending on how many actions you have already done / left to do, it may not always be clear or possible to “achieve” a percentage goal. Targets data is always up-to-date even when offline, but important to know when they’ve last synced and sent data to managers  Managers:\n Could be viewing on desktop or mobile device; may be seeing widgets side-by-side Want to view overall summary of CHW goals, may also have their own personal goals Can only see widgets for which they have Report access Understand, and need, percentage information in order to evaluate performance Important to know how up-to-date the data is (will be addressed in a different feature for CHW last sync date)  ","excerpt":"Forms We use forms to build the Tasks, Care Guides, and Reports that take health workers through …","ref":"/beta/design/apps/","title":"Guidelines for App Developers"},{"body":" This section provides an overview and reference for building digital health applications with CHT Core.\n From a technical perspective, developing a custom app begins with writing XForms, JSON, and JavaScript code that configures the Core Framework’s features to meet your organization’s needs.\nThe CHT Core Framework allows you to define each element in your app in a modular way, and then specify when and how it should appear for different types of users, without having to modify the underlying framework. Collectively, this customization is referred to as Configuration Code.\nDeveloping an app using the Core Framework requires an understanding of:\n Javascript code and expressions JSON format used to specify configuration XLSForms to setup actions and contacts  This section provides an overview of CHT features, and the reference material for those looking to build applications with CHT Core. If you\u0026rsquo;re looking for more context on the typical end users of CHT apps, you\u0026rsquo;ll find more info in the CHT Design System.\n","excerpt":"This section provides an overview and reference for building digital health applications with CHT …","ref":"/beta/apps/","title":"CHT Applications"},{"body":"This section provides an overview and reference for development of the Core Framework of the Community Health Toolkit (CHT). The Core Framework makes it faster to build full-featured, scalable digital health apps by providing a foundation developers can build on. These apps can support most languages, are offline-first, and work on basic phones (via SMS), smartphones, tablets, and computers.\nApp developers are able to define health system roles, permissions and reporting hierarchies, and make use of five highly configurable areas of functionality: messaging, task and schedule management, decision support workflows, longitudinal person profiles, and analytics.\nSee Also: CHT Applications\nThe Core Framework can be used to support the unique needs of a given health system and the work of community health workers, frontline supervisors, facility-based nurses, health system managers, and even patients and caregivers. Visit the Commuity Health Toolkit website to request a self-guided demo of an app built with the Core Framework. You can also explore an overview of the Core Framework and its key features.\n","excerpt":"This section provides an overview and reference for development of the Core Framework of the …","ref":"/beta/core/","title":"CHT Core Framework"},{"body":" “During refresher trainings, when I go there, it takes me 3 hours because I copy from one book to another.”\n About Married with two school-aged children Has one year of training in a health-related field Not originally from the community, but communicates effectively with the CHWs Salaried MOH employee Has a personal mobile phone that ranges from a feature phone to a smart phone, used for communication Has an email account primarily accessed via mobile phone\nResponsibilities  Overall responsible of the health of the community Manages a group or groups of CHWs Communicates frequently with CHWs and other supervisors Liaises with the facility-based health workers especially the nurses and clinical doctors Mobilizes \u0026amp; leads CHWs to educate community on health promotion \u0026amp; disease prevention Ensures that the CHWs send in data Aggregates data from CHWs and sends to the data records person Attends meetings with MOH officials at the district health center Sits on the community development committee with chiefs and government officers Training CHWs and reinforcing health knowledge and protocols Following up with CHWs on high-priority cases Liaising with the facility-based staff on the needs at the community level Mobilizing CHWs to educate community on health promotion campaigns Tracking progress towards key impact metrics and helping CHWs reach their targets Aggregating CHW data and reporting on activities to health system officials  Needs  Accurate data from the CHWs Ability to send reports to supervisors promptly Mobilize and lead CHWs on community events for health promotion \u0026amp; disease prevention Closely monitor the progress of each individual CHWs and provide supportive supervision Motivate CHWs consistently so that they continue doing their volunteer community service  Motivations  Healthy community Increased utilization of available health services provided at the health center Recognition from supervisor for sending timely and accurate data  Strengths and Assets  Literate Background training in healthcare Salaried (consistent source of income) Familiar with socio-cultural norms of the community \u0026amp; committed to community’s health Mobile phone Earned community respect  A Day in the Life Ann wakes up early in the morning to prepare her son for school and husband for work. She takes her son to school which is on her way to health center where she is based.\nShe needs to be at the health center by 9 am so she takes a bus for part of the journey and a motorbike for the rest of the journey. The health center is located about 10 km from her home.\nShe attends to her public health officer’s duties based at the health center. She is primarily in charge of the community and market sanitation, so she facilitates the small scale traders who run business at the nearby market to get health check-ups that are mandatory before she issues them a certified health certificate that allows them to run food related businesses in the market.\nIn the course of her day, she collaborates with a wide range of stakeholders in order to perform her chores. She liaises with the clinicians and nurses to identify defaulters of care in order to organize for the follows up through the community health workers. The nurse would give her a list of children who have missed their vaccine appointments, the pregnant women who have missed their antenatal care clinics, the Tuberculosis and HIV/AIDs clinicians also have a list of defaulters of care that should be followed to ensure prompt care. She must liaises with the CHWs to be trace these patients and reintroduce them to care. This is one of her greatest challenge as it is hard to trace the children in the wide facility catchment area. You know it is her responsibility to ensure that the community health workers are creating demand for the health services at the community level and ensuring that the community members access the quality care at the health facilities. She assesses the performance of her CHWs by looking at how many community members they refer to the health facilities for care, and the adherence to care of the patients referred by each CHW. This is no mean easy task as CHWs are not paid and the villages they cover are wide and a very hilly terrain which becomes impossible during the rainy weather. Over half of the CHWs that she trained during the initiation of the CHW program in her area three years have dropped, and the new ones she has replaced need to be trained on the whole package of their role. She would gladly do this but “Oh, when will an non governmental organization come by to support us in this capacity building activity?” She exclaims. Meanwhile she must support the new CHWs by accompanying them at least once a month when they are doing their household visits in the villages.\nSince there is an upcoming community based polio and tetanus campaign targeted for under-fives and women of reproductive health, she must select and contact several CHWs from each village that will help them administer these vaccines in their villages and therefore reach the most possible target population.\nShe must also liaise with the area administrative chief who provide the go ahead of the community based activities to mobilize the community for health education and dialogue days and community health related activities. She and her CHWs lead the community to discuss on various disease preventive and health promotive activities that are tailored to meet health needs/gaps they have observed within the community. They use these regular forums to reinforce important health messages like the importance pregnant women going for ANC and children for immunization. She leads the community health workers and community members during community action days.\nShe also works hand in hand with the schools heads for deworming and Vitamin A campaign targeted at children, a regular activity which she carries out with the CHWs.\nAnn’s 80% of her time is spent interacting with the community and the community health workers. This month’s monthly meeting with the CHWs is early next week. She must make some time to prepare some notes on how to make drinking water safe for use in the community, during a visit in the community, she observed that the community was using unsafe water for drinking and the CHW did not know what to advise her households to make the water safe. The CHEW continues to offer need based training to the CHWs depending on assessment of the knowledge deficits of the CHWs after the initial training. He guides the CHWs, on how to effectively communicate well with the community. She intents to guide the CHWs on the data items to collect as most of them have not been sending all the reports as required. If transport within the community was cheap or easier she would visit the CHWs who did not send reports and or those who send inaccurate data or incomplete reports and walk with them as they collect the data.. As a CHEW, she is charged by the MOH to aggregate data about the community’s state of health that is received from the CHWs on a monthly basis. The primary data items for her reflect the utilization of health services by the community.\nAnn has a regular end of month meeting with her community health supervisor who is based in the Sub district hospital that is 150km away from her station early in the morning on Wednesday. She must prepare and present her monthly written reports and give a verbal report of the state of the community and performance of the CHWs under her supervision.\nAnn gets back to her home at 6 pm, she picks her son from school where he had been playing since 4pm when the other pupils leave school for home. She prepares supper for her family, and carries out the other family chores. She retires to bed at about 10pm tired but happy to have accomplished her day’s duties.\n","excerpt":"“During refresher trainings, when I go there, it takes me 3 hours because I copy from one book to …","ref":"/beta/design/personas/chw-supervisor-ann/","title":"CHW Supervisor, Ann"},{"body":"Applications built with CHT Core support health workers with their activities in their community. Health workers are guided through tasks — such as screening for high-risk pregnancies or diagnosing and providing treatments for children — and get real-time indicators for progress towards their goals. These workflows are highly flexible and developed using a combination of JavaScript, JSON, and XForms.\nThe JavaScript and JSON portions allow for full control of tasks, targets, and contact profiles, as well as other application settings. The XForms portion extends the ODK XForm notation, and is used to define forms. Forms allow CHWs to register new families and people. Forms also allow CHWs to complete surveys, care guides, and decision support, eg when assessing a sick child, or registering a new pregnancy for antenatal care schedule. Forms can live in many parts of the app including the Tasks, People, and Reports pages.\n","excerpt":"Applications built with CHT Core support health workers with their activities in their community. …","ref":"/beta/apps/concepts/","title":"Concepts"},{"body":"Purpose of the tutorial In this tutorial you will learn how to create and edit contacts and their associated users in the CHT application using the default contact creation forms. This will help you get familiar with the UI of the webapp as well as some features and functionality. If you are already comfortable with this, you can skip to manipulating contacts and their associated documents using medic conf.\nBrief overview of key concepts Contacts are people or places that are created in the CHT application.\nPeople are both patients in the system and users of the system, such as CHWs or Nurses.\nPlaces represent either an actual physical location such as a health facility, clinic, or a grouping such as a household or CHW area.\nContact forms are forms in the CHT app that are used to create people or places.\nCHT app hierarchy is often modeled after the health system, health program or community structure. All people who are registered in the app must be associated with a place. These places are located in a hierarchy with other places. For instance, a Family Member is part of a Household. A Household and CHWs are part of a CHW Area. A CHW Area and nurses are part of a Health Facility. Additional levels may be added as needed. The Admin level operates outside of the hierarchy and gives access to all levels and people.\nUsers represent credentials and roles / permissions for accessing the application. This can either be:\n People who can log into the application, such as CHWs or Nurses or Credentials granting external software restricted permissions to perform certain tasks, such as allowing an external service permission to write reports via the api.  Required resources You should have a functioning CHT instance with contact forms configured. Read How to set up a CHT local configuration environment\nImplementation steps In this tutorial, you will work with the default contact forms and the default hierachy. The default hierarchy is illustrated above as part of the overview of key concepts.\nWhile logged in as an admin user, you will first create the Health Facility, CHW Supervisor, CHW Area, and CHW. You will then create the users for the CHW so that they can log in and create households and household members.\n1. Create the Health Facility, CHW Supervisor, CHW Area, and CHW Create new Health facility While logged into the CHT application, go to the people tab and select New health facility\nThere are 2 options for assigning a primary contact for the new facility:\n Creating a new contact as you are creating the new facility Selecting a primary contact from already created contacts  For now we will skip creating or assigning a primary contact so that we can focus on creating the new facility.\nEnter the details of the facility and submit the form.\nYou should see the newly created facility appear on the left hand side and when you select it, you will see details of the facility appear on the right hand side.\nCreate CHW Area and CHW We will now create a place and the primary contact for the place within one form. We want to create a CHW area within the facility that we previously created.\nSelect the Health facility on the left hand side. You will then select New area on the right hand side.\nSelect the option that lets you create a new person within the form. This person will automatically become the primary contact for the created place.\nFill in the required fields and go to the next section.\nYou will get an option to name the place after the created contact person or name it yourself. If you select Yes, the new place will be named \u0026lt;contact-name\u0026gt;'s Area. For example Jane Doe's Area.\nOnce you submit, a new CHW area will be created. You should see on the right hand, the CHW Area name, the primary contact of the CHW Area, and the facility that the CHW area belongs to.\nCreate CHW Supervisor To create a primary contact for an existing place (in this case, for the facility that we created without a primary contact); select the place and the select the New person action.\nA new person form will appear with an option to change the place the new person will belong to. Once you submit this form, a new contact will be created in the Facility.\nFinally, we will set the newly created person as a primary contact for the Facility they belong to. To do this, select the facility and then select the Edit action.\nYou should see an edit form from which you can set the primary contact of the facility and submit to apply the changes.\n2. Create the CHW user With the CHW and CHW Supervisor contacts created, you may want to log in as a CHW and perform some actions. To do this, let\u0026rsquo;s create a CHW user that\u0026rsquo;s linked to the CHW contact we created earlier.\nGo to the hamburger menu and select App Settings.\nWhen you are on the App Settings page, select Users on the right hand side and then select Add user.\nYou should now see an Add user form. Fill in the user name, the select the role as CHW or Regional admin. In the Place field, select the name of the CHW area whose CHW you want to create a user for (you can search by typing the first few letters of the CHW area name). Once that is done, under the Associate contact field select the name of the CHW whose user you are creating. Finally, input a password and hit submit.\nOnce this is done, you can logout and log into the app using the username and password that you just created.\nFrequently Asked Questions  Is there any downside of creating too many users? For offline users, how often does the app try to refresh if there is an available internet connection? Can one person belong to multiple places in the same hierarchy?  ","excerpt":"Purpose of the tutorial In this tutorial you will learn how to create and edit contacts and their …","ref":"/beta/apps/tutorials/contact-and-users-1/","title":"Contact and User Management - Part 1"},{"body":"CouchDB (and PouchDB in the browser) is a JSON-based NoSQL datastore that we use to store our data. While unlike SQL databases there is no enforced schema, code still follows conventions, and this document aims to describe the schema as defined by how our code operates.\nIn this document \u0026ldquo;record\u0026rdquo; means a JSON object that resides in CouchDB or PouchDB.\nGeneral record data structure    Property Description Required by     _id CouchDB\u0026rsquo;s unique identifier of the record all records   _rev CouchDB\u0026rsquo;s revision marker all records   type The general type of the document, see below all user-created* documents   reported_date Numerical timestamp of when the document is first created all user-created documents     User-created documents here generally means contacts and reports, but may extend further.  Contacts (Persons and Places) Contacts are either places (e.g. clinic), groupings (e.g. family) or people (e.g. a patient or CHW).\nThe type property of contact records depends on the version of Medic you are running:\n If you are running 3.7 or later you get to configure your contact hierarchy, and the type of contacts is contact, and the configured type is in the contact_type property. In earlier versions the type depended on hierarchical location of the contact. There are 3 hard coded place types: district_hospital, health_centre and clinic and one people type person. These place names are often meaningless (hence the configurable contact hierarchy in later versions) to the configured project, and are textually (ie in the UI not in data structures) renamed to mean other things. For example, as clinic is the lowest level it is often used to represent a family.  Places Represent either an actual physical location such as a clinic, or a grouping such as a family or region.\nUnless a place is at the top of the hierarchy it has a parent place.\nEach location has a primary contact, which is a person contact stored in the contact property.\nPeople People are both patients in the system and users of the system, such as CHWs or Nurses. Users have additional records marking them as users of the system (see User below).\nPeople always have a parent place.\nParent hierachy representation Contacts store their parent hierarchy as a minified hierarchical structure, which records the _id of each parent up until the top of the hierarchy:\n{ type: \u0026#39;person\u0026#39;, name: \u0026#39;A patient\u0026#39;, parent: { _id: \u0026#39;clinic-id\u0026#39;, parent: { _id: \u0026#39;health_centre-id\u0026#39;, parent: { _id: \u0026#39;district_hospital-id\u0026#39; } } } } Generally when contacts are used in the app they are first \u0026ldquo;hydrated\u0026rdquo;, with the rest of the information filled in from their parent\u0026rsquo;s place documents:\n{ type: \u0026#39;person\u0026#39;, name: \u0026#39;A patient\u0026#39;, parent: { _id: \u0026#39;clinic-id\u0026#39;, name: \u0026#39;A clinic\u0026#39;, reported_date: 1234, ... // etc  parent: { _id: \u0026#39;health_centre-id\u0026#39;, name: \u0026#39;A Health Centre\u0026#39;, reported_date: 1134, ... // etc  parent: { _id: \u0026#39;district_hospital-id\u0026#39;, name: \u0026#39;THE District Hospital\u0026#39;, reported_date: 1034, ... // etc  } } } } Reports Reports are created by users filling out and submitting forms, as well as sending in SMS.\nAll reports:\n Use the data_record type Have their fields stored in the fields property Have the report author\u0026rsquo;s phone number (if it exists) stored in the from field Store the form\u0026rsquo;s identifier in the form field May have a contact property, which is a minified version of the report author\u0026rsquo;s contact and its hierarchy (see above)  Reports can be about people or places.\nReports about people should have one or more of:\n A patient shortcode, found at doc.patient_id or doc.fields.patient_id A patient record\u0026rsquo;s _id, found at doc.patient_uuid or doc.fields.patient_uuid, as well as potientially in the same locations as the shortcode  Reports about places should have a doc.place_id.\nAdditionally, SMS reports:\n Have an sms_message property which contains, among other things, the raw SMS May not have a contact property if the SMS comes from a phone number that does not have an associated contact  Additionally, XML reports:\n Have the XML file that Enketo (the XForm renderer used) generates as an attachment Have a content_type property of xml  Forms SMS forms are defined in application config.\nXML forms are stored in the database and have:\n An _id of form:\u0026lt;formname\u0026gt; The type of form The actual XML Xforms definition attached  XML forms are defined as XForm XML files\nUsers Users represent credentials and roles / permissions for accessing the application. This can either be:\n people who can log into the application, such as CHWs or Nurses or credentials granting external software restricted permissions to perform certain tasks, such as allowing an external service permission to write reports via the api.  User records have at least:\n An _id of org.couchdb.user:\u0026lt;username\u0026gt; A name which is the same as \u0026lt;username\u0026gt; above A roles array  There are two slightly different copies of this record stored.\nThe record in the _users database includes:\n The type of user The password hash and associated data  The _users database is what CouchDB uses for authentication and is only editable by administrative users, so is authoritive when it comes to roles and the like.\nThe medic database stores a copy of roles and permissions along with:\n The type of user-settings They may have a contact_id field that is the _id of the person that the user is attached to They may also have a facility_id field that is the _id of the place that the user is attached to They may also have a known field. If this field is true, it means the user has logged in once and will no longer be shown the tour by default. Otherwise, it will be undefined.  Note that SMS users do not have a users record: their phone number will be attached to a person record, but they do not have a user because they do not access the application.\nUsers then, can be represented by up to 3 docs:\n a person document that represents a physical human being in our hierarchy of places and people a users document that represents authorisation and authentication information for physical people or authenticated external services a user-settings document that ties the user and person documents together  Tasks Partner configuration code running inside the Core Framework can cause tasks to appear within the Tasks tab. Each task in the tab is powered by a task document. Task documents are:\n updated only after the data for their emitting contact changes or every 7 days created in the database for any task due within the last 60 days immutable once their state is \u0026ldquo;terminal\u0026rdquo; (Cancelled, Completed, Failed)     State Description     Draft Task has been calculated but it is scheduled in the future   Ready Task is currently showing to the user   Cancelled Task was not emitted when refreshing the requester\u0026rsquo;s data. Task has invalid partner emission.   Completed Task was emitted with { resolved: true }   Failed Task was never terminated and the endDate has past       Attribute Description     user The user settings id of the user who calculated and created the document. Used for controlling replication. (eg. org.couchdb.user:agatha)   requester The guid of the contact whose data brought about the creation of the document. Used for controlling cancellation.   owner The guid of the contact whose profile this task will appear on in the contact\u0026rsquo;s tab.   forId If completing a task\u0026rsquo;s action opens a form. Completing the form creates a report. forId is the guid of the contact information that will be passed into the form. For most forms, the resulting report will be associated with this contact.   emission Minified task data emitted from the partner code.   stateHistory Each time the state attribute changes, the time of the change is recorded in the state history.    { \u0026#34;_id\u0026#34;: \u0026#34;task~org.couchdb.user:agatha~pregReport~pregnancy-facility-visit-reminder~2~523435132468\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;task\u0026#34;, \u0026#34;authoredOn\u0026#34;: 523435132468, \u0026#34;user\u0026#34;: \u0026#34;org.couchdb.user:agatha\u0026#34;, \u0026#34;requester\u0026#34;: \u0026#34;requester-contact-guid\u0026#34;, \u0026#34;owner\u0026#34;: \u0026#34;owner-contact-guid\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Ready\u0026#34;, \u0026#34;emission\u0026#34;: { \u0026#34;_id\u0026#34;: \u0026#34;pregReport~pregnancy-facility-visit-reminder~2\u0026#34;, \u0026#34;forId\u0026#34;: \u0026#34;for-contact-guid\u0026#34;, \u0026#34;dueDate\u0026#34;: \u0026#34;2000-01-01\u0026#34;, \u0026#34;startDate\u0026#34;: \u0026#34;1999-12-29\u0026#34;, \u0026#34;endDate\u0026#34;: \u0026#34;2000-01-08\u0026#34;, ... }, \u0026#34;stateHistory\u0026#34;: [{ \u0026#34;state\u0026#34;: \u0026#34;Ready\u0026#34;, \u0026#34;timestamp\u0026#34;: 523435132468, }], } Targets Partner configuration code can configure targets to appear within the Targets/Analytics tab. Target documents are:\n one per analytics reporting period updated when the user loads the application or when they view the targets tab updated a maximum of once per day  { \u0026#34;_id\u0026#34;: \u0026#34;target~2000-01~user-contact-guid~org.couchdb.user:agatha\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;target\u0026#34;, \u0026#34;user\u0026#34;: \u0026#34;org.couchdb.user:agatha\u0026#34;, \u0026#34;owner\u0026#34;: \u0026#34;user-contact-guid\u0026#34;, \u0026#34;updated_date\u0026#34;: 523435132468, \u0026#34;targets\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;deaths-this-month\u0026#34;, ... \u0026#34;value\u0026#34;: { \u0026#34;pass\u0026#34;: 0, \u0026#34;total\u0026#34;: 15 } }, ... ] } ","excerpt":"CouchDB (and PouchDB in the browser) is a JSON-based NoSQL datastore that we use to store our data. …","ref":"/beta/core/overview/db-schema/","title":"Database schema conventions"},{"body":"","excerpt":"","ref":"/beta/apps/reference/forms/","title":"forms"},{"body":"Characteristics and Strengths  They are often led by locally elected political leaders and are motivated to demonstrate health impacts for continued political support Tend to be more accountable to local communities Have a thorough understanding of the local context and health needs of local communities They often have the legal and administrative mandate to set local health priorities, plan, allocate and mobilize resources, and deliver primary health care to their respective communities They are guided by national health strategy and community health strategy They are responsible for managing CHWs They are often motivated to adopt digital health technologies May have deployed, or are planning to deploy, digital health tools in the community health space Comparatively, they have less cumbersome bureaucratic processes and red-tape in building partnerships  Values  Health and well-being of their citizens Equitable access to quality health care services Social health protection of their constituencies Local leadership and decentralization in health Innovation and digital technologies in community health space High impact door-step health care Community participation Partnerships with non-state actors Cost-effectiveness Sustainability  Needs  Health systems strengthening support to keep up with growing population needs and tackle emerging public health challenges, e.g. NCDs Better institutional capacities to manage community health programs Regular guidance, coordination and support from the state/provincial and national governments Better data systems for evidence-based planning and monitoring Technical partnership and support to manage digital health technologies  ","excerpt":"Characteristics and Strengths  They are often led by locally elected political leaders and are …","ref":"/beta/design/personas/partners/local-governments/","title":"Local and Sub-National Governments"},{"body":"Summary of Page Tabs   Page tabs are the primary way to navigate apps built with the Core Framework. The number of tabs is variable depending on the user’s role and place in the hierarchy. For example, non-admin users don’t have Messages. The Reports tab is accessible to CHWs but often located inside the secondary menu drawer.\n People​: This is where profiles of districts, staff, CHWs and patients live Tasks​: This is a list of upcoming visits, follow-ups, or other required tasks Targets: Displays real-time visualizations of key activity and impact indicators Reports​: A detailed history of all forms submitted by CHWs and other staff Messages​: A place for community-based staff to send and exchange messages  The Menu Drawer   Tap the menu icon in the upper right corner of the header to access other pages, edit personal settings, view sync status and more.\n Admin Console: Change advanced app settings (only admin users will see this) Guided Tour: Review new features and important tips About: View your app version and other detailed database information User Settings: Update basic user information like email, phone number, and password Report Bug: Let us know if something isn’t working or you encounter errors Log Out: Sign out of the app  Sync Status   At the bottom of the menu is a notification which provides important about sync status. It lets you know whether reports are being submitted.\nIf the sync status is green and says “All reports synced,” your reports have been sent. This means you have successfully uploaded all of your data to the server. However, it doesn’t necessarily mean you have downloaded all of the most recent data from the server.\nIf the indicator is red, it means there are still reports waiting to send. This means you have not successfully uploaded all of your data to the server. You should check your internet and data connection.\n","excerpt":"Summary of Page Tabs   Page tabs are the primary way to navigate apps built with the Core Framework. …","ref":"/beta/apps/concepts/navigation/","title":"Navigating CHT Apps"},{"body":"","excerpt":"","ref":"/beta/apps/features/integrations/openmrs/","title":"OpenMRS"},{"body":"This section provides an overview and reference of the Core Framework used to develop digital health apps in the Community Health Toolkit (CHT).\n","excerpt":"This section provides an overview and reference of the Core Framework used to develop digital health …","ref":"/beta/core/overview/","title":"Overview of CHT Components"},{"body":"This section provides an overview and reference for development of components of the Community Health Toolkit (CHT). The primary component is the CHT Core Framework, which can be used to develop digital health applications\n","excerpt":"This section provides an overview and reference for development of components of the Community …","ref":"/beta/core/process/","title":"Process for Development"},{"body":"","excerpt":"","ref":"/beta/apps/features/integrations/rapidpro/","title":"RapidPro"},{"body":"Icons Apps can be customized by defining the icons to use for tasks, targets, and contacts.\nAdd icons to the resources folder, and include them by name in the resources.json file.\n{ \u0026quot;icon-risk\u0026quot;: \u0026quot;icon-healthcare-warning@2x.png\u0026quot;, \u0026quot;icon-treatment\u0026quot;: \u0026quot;icon-healthcare-medicine@2x.png\u0026quot;, \u0026quot;medic-clinic\u0026quot;: \u0026quot;medic-family.svg\u0026quot;, \u0026quot;medic-district-hospital\u0026quot;: \u0026quot;medic-health-center.svg\u0026quot;, \u0026quot;medic-health-center\u0026quot;: \u0026quot;medic-chw-area.svg\u0026quot;, \u0026quot;medic-person\u0026quot;: \u0026quot;medic-person.svg\u0026quot; }  See Also: Icon Library\nBuild Build the icons into the application with the upload-resources action in medic-conf.\nmedic-conf --local upload-resources\nBranding The site title, favicon, and header logo are configurable. The location to change these are in the Admin console on the images page under the branding tab.\nPartner logos Adding your partner logos can be done in the Admin console on the images page under the Partners tab. This will add partner logos on the about page.\n","excerpt":"Icons Apps can be customized by defining the icons to use for tasks, targets, and contacts.\nAdd …","ref":"/beta/apps/reference/resources/","title":"resources"},{"body":"Given that CHT apps are used around the world, the Core Framework was designed with localization in mind. The Core Framework itself is available in English, French, Hindi, Nepali, Spanish, Swahili, and Indonesian. In the app_settings.json file the default language for the application is set, along with a separate default language for outgoing messages that are sent via SMS.\nNote Please open an issue if you are interested in translating the app into a different language, as we can work together to make that language available to the community.  Translations To modify some labels in the app add the key and modified label in a custom translations file in the translations folder. All the properties files use the format messages-{language-code}.properties, where the language code is the same 2-letter code used to identify the language in the application. For instance, for English, we would have a translations/messages-en.properties file.\nNew elements in CHT apps, such as tasks, targets, profiles, and forms should be localized as well. These labels should be included in the same custom translations properties file. If a translation is missing for the user\u0026rsquo;s language it will use that of the default language.\nHere is an example, including both a modified label, and a new one:\ntranslations/messages-{language-code}.properties  [Application Text] contact.type.district_hospital = Community targets.assessments.title = Assessments Completed Forms Translations for XForms are defined within the forms themselves. The XLSForm notation is documented here, and would use the corresponding 2-character language codes.\nBuild Custom translations from the properties files are added to the app with the upload-custom-translations action.\nmedic-conf --local upload-custom-translations\nUpdated translations from forms need to be added with the actions to upload forms.\nmedic-conf --local upload-contact-forms upload-app-forms\n","excerpt":"Given that CHT apps are used around the world, the Core Framework was designed with localization in …","ref":"/beta/apps/reference/translations/","title":"translations"},{"body":"Purpose of the tutorial In this tutorial you will learn how to create and edit contacts and their associated users in the CHT application using medic-conf. If you haven\u0026rsquo;t already, have a look at part 1 of this tutorial for a useful overview of key concepts.\nBrief overview of key concepts medic-conf is a command-line interface tool to manage and configure your apps built using the Core Framework of the Community Health Toolkit.\nSee more key concepts in part 1 of this tutorial.\nRequired resources You should have a functioning CHT instance and have medic-conf installed locally. Read How to set up a CHT local configuration environment\nImplementation steps In these steps you are going to create a Health Facility, CHW areas, primary contacts for the CHW areas, and their associated users.\n1. Create Health Facilities (using medic-conf\u0026rsquo;s csv-to-docs and upload-docs features) To create contacts and their associated users with medic-conf, you will need to create a CSV file with the information of the contacts and the users that you would like to create. The name of the file determines the type of doc created for rows contained in the file.\nFor example, file named place.district_hospital.csv adds the property \u0026quot;type\u0026quot;:\u0026quot;district_hospital\u0026quot; and a file named person.clinic.csv add the property \u0026quot;type\u0026quot;:\u0026quot;person\u0026quot;\nCreate a CSV file named place.district_hospital.csv and add the details of the health facilities you would like to create.\n   name     Nairobi South Facility   Nairobi West Facility   Nairobi East Facility    Save this file to a folder name csv in your project\u0026rsquo;s base directory.\nOpen terminal or command line. cd to your project\u0026rsquo;s base directory and then run the command\nmedic-conf csv-to-docs This will convert rows of the CSV files from the csv folder to JSON docs that are stored in a json-docs folder.\nTo upload the JSON docs to your local test instance, run the command\nmedic-conf --url=https://\u0026lt;username\u0026gt;:\u0026lt;password\u0026gt;@localhost --accept-self-signed-certs upload-docs Be sure to replace the values \u0026lt;username\u0026gt; and \u0026lt;password\u0026gt; with the actual username and password of your test instance.\n2. Create CHW Areas, CHW Contacts and Users (using medic-conf\u0026rsquo;s create-users feature) Next you are going to create CHW areas for the health facilities you created in the step above along with the CHW contacts and users for these CHW areas.\nCreate a CSV file named users.csv and add the details of the Users, CHW contacts, and CHW Areas you would like to create. Save this file in the base project directory.\n   username password roles name phone contact.name contact.phone contact.sex contact.age place.type place.name place.parent     mmutiso q3Z5-vH5 district_admin Mary Mutiso 0712345678 Mary Mutiso 0712345678 Female 36 health_center Mary Mutiso\u0026rsquo;s Area \u0026lt;facility uuid\u0026gt;    The value place.parent is the uuid of the Facility to which the CHW Area belongs to. You can get this value by selecting the Facility in the webapp and copying the last portion of the url.\nRun the command\nmedic-conf --url=https://\u0026lt;username\u0026gt;:\u0026lt;password\u0026gt;@localhost --accept-self-signed-certs create-users This will create the CHW area, the CHW contact, and the user that the CHW will use to log into the application.\nFrequently Asked Questions  Can one person belong to multiple places in the same hierarchy?  ","excerpt":"Purpose of the tutorial In this tutorial you will learn how to create and edit contacts and their …","ref":"/beta/apps/tutorials/contact-and-users-2/","title":"Contact and User Management - Part 2"},{"body":"The purpose of this guide is to document the standard aspects of our core framework and provide tips for consideration when choosing a design to encourage consistency by listing existing elements that can be reused.\nChanges to the styles in this document should go through product design and be implemented throughout the app before this document is updated.\nMedic in-app sample: https://github.com/medic/medic/blob/master/webapp/src/templates/partials/theme.html\nBootstrap styles: https://getbootstrap.com/docs/4.3/components/alerts/\nColor Color helps users interpret and interact with app content by establishing a hierarchy of information, highlighting actions, indicating states, and conveying meaning. It can even influence a user’s mood and perceptions.\n   ✅Do\u0026rsquo;s ❌ Don\u0026rsquo;ts     Keep the meaning of color consistent and predictable This helps users quickly and easily navigate and interpret content. Never rely on color alone to communicate meaning or emphasis\nInstead, pair color with other visual clues such as text or icons in order to ensure the meaning is conveyed even to those who can’t see the color very well or may even be color blind.   Ensure that there is adequate color contrast between foreground and background\nAccessible web design aims for high color contrast so that those with low vision or color blindness don’t have difficulty viewing content. Don\u0026rsquo;t overuse red\nRed is a very attention-grabbing color that conveys a sense of urgency, inspires action, and even increases a person’s heart rate. If red appears in too many places in the app it will lose its effectiveness.    Primary colors These are the primary colors of the navigation tabs. When necessary, use white #FFFFFF text over these colors.\n   Blue Periwinkle Pink Teal Yellow     #63A2C6 #7193EE #F47B63 #76B0B0 #E9AA22   rgb(99, 162, 198) rgb(113, 147, 238) rgb(244, 123, 99) rgb(118, 176, 176) rgb(233, 170, 34)   Messages Tasks People Targets Reports    Secondary colors These are the secondary (highlight) colors of the navigation tabs.\n   Blue Highlight Periwinkle Highlight Pink Highlight Teal Highlight Yellow Highlight     #EEF5F9 #F0F4FD #FDF1EF #DFEAEA #FCF6E7   rgb(238, 245, 249) rgb(240, 244, 253) rgb(253, 241, 239) rgb(223, 234, 234) rgb(252, 246, 231)    Status colors These are the status indication colors of the system. When necessary, use white #FFFFFF text over these colors.\n   Teal Dark Blue Dark Yellow Dark Red     #218E7F #007AC0 #C78330 #E33030   rgb(33, 142, 127) rgb(0, 122, 192) rgb(199, 131, 48) rgb(227, 48, 48)   Completed, verified, sent actions Primary button, link, info Delayed, incomplete actions Overdue, unmet, error, delete, failed, denied actions    Backgrounds    Gray Dark Gray Light Gray Medium Gray Ultra Dark Gray Ultra Light White     #777777 #E0E0E0 #A0A0A0 #333333 #F2F2F2 #FFFFFF   rgb(119, 119, 119) rgb(224, 224, 224) rgb(160, 160, 160) rgb(51, 51, 51) rgb(242, 242, 242) rgb(255, 255, 255)   Disabled statuses, secondary body text 1px line borders, action bar icons Muted or deceased contacts, cleared messages Overdue, unmet, error, delete, failed, denied actions App background, list and dropdown highlights Form background    For more information on how these colors are applied in the app, see our color variables file.\n Typography The default app font is Noto Sans. It is free, open source, supports 800 languages and was specifically designed for good web legibility. It is bundled with the app so that all users see the same font regardless of their particular device, language, browser, etc. This ensures a consistent experience for all users.\nType size: A standard minimum size for web content is 14-16 points/pixels.\nType case: Lowercase letters are easier to read than text set in all-caps.\nLine spacing: A general rule is that the line spacing value should be anything between 1.25 and 1.5 times greater than the font size.\nLine length: The optimal line length for body text is considered to be 50-60 characters per line on desktop and 30-40 on mobile, including spaces.\nAlignment: Text in the app should be left-aligned by default unless otherwise specified.\nColor: Most text in the app should be the @text-normal-color: @gray-ultra-dark color. The lighter text color @text-secondary-color: @gray-dark) is used for labels and condition card filters. Hyperlinked text color is @text-hyperlink-color: @blue-dark).\n   ✅Do\u0026rsquo;s ❌ Don\u0026rsquo;ts     Use bold to add extra emphasis to items of importance This includes patient/contact names and target titles. Do not overuse italics\nAside from Enketo forms where it is used to differentiate explanatory text or suggested actions, do not use italics.   Use underlines for links The general usability association is that underlined text is a hyperlink. Avoid using both bold and italic at the same time If you want to add emphasis to something, consider large size text in bold.    Base typeface font-family: Noto, sans-serif font-size: 16px (1rem) line-height: 1.375rem (22px) color: #333333 Type sizes H1 is the highest hierarchical level of text, and should be used sparingly. It is used for the large text underneath percentage bars.\nH1 font-size: 24px (1.5rem) line-height: 2rem (32px) \nH2 is used as a header style for main content sections on the right hand side, such as a task title, the name of a person/place on their profile, or the title of a targets widget.\nH2 font-size: 20px (1.25rem) Line-height: 1.75rem (26 px) \nH3 is the next lowest level, used for things like the titles of condition cards and section titles on the form summary page.\nH3 font-size: 18px (1.125rem) line-height: 1.5rem (24px) \nH4 is the default type size, and should be used for all normal body text throughout the app. Most text should be H4 in size - when in doubt, use H4.\nH4 (body) font-size: 16px (1rem) line-height: 1.375rem (22px) \nH5 is a smaller body text size that we use sparingly in places where space is tight, such as timestamps in the upper right of content rows, condition card filter text, “belongs to” breadcrumbs, and targets goal labels.\nH5 (small body) font-size: 14px (.875rem) line-height: 1.25rem (20px) \nAlignment Text in the app should be left-aligned by default unless otherwise specified. Left-aligned text is preferred as it provides a consistent and predictable starting place for each line of text, making text easier to read and scan.\nType style The H1 through H5 styles are used in both regular and bold weights, with the occasional italic or underlined styles. Bold is used to add extra emphasis to items of importance such as patient/contact names and target titles.\nItalic is rarely used except within Enketo forms, where it is used to differentiate explanatory text or suggested actions for the health worker. Avoid using both bold and italic at the same time.\nThe underlined style should only ever be used on actual links because of the general usability association between underlined text and hyperlinks. If you want to add emphasis to something, consider bold instead. If you are quoting the name of something, consider quotation marks instead.\nType color Most text in the app should be the @text-normal-color: @gray-ultra-dark color, as this has the best contrast and is easiest to read. The lighter text color (@text-secondary-color: @gray-dark) is used sparingly for text that is less important than the main body text, such as labels and condition card filters. Hyperlinked text is colored blue (@text-hyperlink-color: @blue-dark). On hover, it displays an underline.\nComponents Coming soon\n","excerpt":"The purpose of this guide is to document the standard aspects of our core framework and provide tips …","ref":"/beta/design/core/","title":"Guidelines for Core Developers"},{"body":"In this section we focus on how data flows through the various components of the Community Health Toolkit. The CHT is built to support the delivery of quality community health care in the hardest to reach areas. The CHT is designed to work in areas with low connectivity, which means it is an offline-first toolkit. The architectural and technology choices in the stack are mostly guided by this principle, which will be evident in the discussion of the data management pipeline.\nOverview At a high level:\n Data are collected from the device of a health worker; Data are pushed to an online instance from where data are available to other health workers, supervisors and decision makers; Data are transferred to a relational database (PostgreSQL) using couch2pg and made available for impact monitoring, data science projects and visualizations; Access to PostreSQL is given to relevant parties at this level, for example Research \u0026amp; Learning team members for impact monitoring and data science; Visualization platforms, such as Klipfolio, are then connected to PostgreSQL from where program managers and other partner representatives can access visualizations of their data for decision-making  Details of the data flow The layout detailed here is specific to how Medic Mobile supports its CHT partners at the moment. It is replicable and can be deployed as is or tweaked independent of Medic Mobile either by modifying or replacing pieces of it with other options.\nCurrent infrastructure We look at this in three general phases.\n1. Data Collection Data is collected in the community at the point of care, i.e. the community health worker interacting with the toolkit. These tools and their corresponding data stores are::-\n Mobile app -\u0026gt; PouchDB Webapp -\u0026gt; PouchDB / CouchDB Text forms / sms -\u0026gt; SMS gateway / SMS aggregator -\u0026gt; CouchDB  The mobile app and webapp, when deployed for offline first use, use a local database namely PouchDB. Similar to CouchDB, it is a document-oriented database. The data collected in PouchDB is synced to an online CouchDB upon the user connecting to the internet. Local storage is not applicable to SMS; instead, an SMS gateway or an SMS aggregator is used to help get the data to an online CouchDB instance.\nUltimately all the data ends up in a CouchDB instance deployed in the cloud whether through data synchronization with PouchDB local to the health workers devices, use of SMS aggregators or gateway. It should be mentioned that you can have a deployment supported by all of webapp, mobile app and SMS and have all the data end up in the same CouchDB instance.\n2. Data Transformation We use couch2pg to move data from CouchDB to a relational database, PostgreSQL in this case. The choice of PostgreSQL for analytics dashboard data sources is to allow use of the more familiar SQL querying. It is an open source tool that can be easily deployed. When deployed the service uses CouchDB\u0026rsquo;s changes feed which allows capturing of everything happening in CouchDB in incremental updates. It is run and monitored by the operating system where it is configured to fetch data at a configurable interval.\nData copied over to PostgreSQL is first stored as raw json (document) making use of PostgreSQL\u0026rsquo;s jsonb data type to create an exact replica of a CouchDB database. From this, default views are created at deployment of the service and refreshed during every subsequent run. Additional custom materialized views created later are also refreshed at this time.\nCustom materialized views and functions are added specific to a deployment\u0026rsquo;s needs. Generally the following naming convention is recommended:\n formview as a view of raw forms useview as a view of form data supporting a use case as defined by design contactview as a view of people and places Database functions are used as a way to join as much relevant data as possible for easier querying in analytics or dashboard visualizations.  Data in the views and functions mentioned in this section is as accurate as the accuracy of the SQL queries. Best practice is to begin the process of defining these objects at design in order to align analytics and dashboards requirements with workflows being deployed.\n3. Data Use The data in PostgreSQL is mostly either used by direct querying or via dashboard visualizations for impact monitoring and data driven-decision making. Database visualizations are built scoped to the requirements of supporting a successful deployment. The work of our Research \u0026amp; Learning team, specifically data science, is supported at the PostgreSQL level through updated contactviews, formviews, useviews and functions with access to these provided to relevant parties as and when needed. Our use of data follows our Privacy \u0026amp; Data Protection policy and is in accordance to agreements with our CHT partners.\nAs mentioned previously, formviews are built to present data in a structure similar to the data collection tool (form) used. Useviews are tailored to align with a use case, mostly using the formviews as the data sources. These are fundamentally guided by design of the workflows and should be interpreted in the context of the design materials including a document explaining the definitions of variables used.\nThe objects present here are not limited to views and functions. Additional tables can be added, for example providing mappings or supporting operations external to the functions available in the toolkit. In short, there is no limitation to the utility that can be added this level to support analytics and dashboards. That said, measures are taken to ensure controlled access, reliability and timely access of the data by the various parties. Some of these measures are:\n Roles and users allocation and deallocation done by specific roles within partner technical teams with support from Medic Mobile as needed; Access control management is left to the partner technical teams where possible; Dashboard data source refresh intervals set to align with project needs; Update of the data sources monitored to ensure updating works as expected; Review of the dashboards as part of the design process; Qualitative design activities to interrogate trends observed in the dashboards and iterate on them if need be;  Beyond Our Current Pipeline The cht-core is mostly data collection tools and is the first component of the data management pipeline. It is the core part of a deployment but the rest of the tools can be easily replaced with other preferred options. It also helps that couch2pg is an open source tool which provides the opportunity for collaboration to extend its functionality to support other implementations. Klipfolio, the tool that we currently use for visualizations, is a proprietary tool but there are many open source options, such as Apache Superset that are worth exploring and building into future iterations of our impact monitoring and analytics support for the CHT.\nBackup The machines running each of CouchDB and PostgreSQL instances are backed up daily.\n","excerpt":"In this section we focus on how data flows through the various components of the Community Health …","ref":"/beta/core/overview/data-flows-for-analytics/","title":"Data Flows for Analytics"},{"body":"","excerpt":"","ref":"/beta/apps/features/","title":"Features of CHT Applications"},{"body":"Forms are a building block of all CHT apps. They are used when creating or editing contacts, and when completing a care guide or survey within the app. Forms are also used to interpret SMS interactions with the CHT.\nThere are different types of forms:\n Contact Forms: used to create and edit contacts. Defined as CHT-enhanced XForms. App Forms: serve as actions within the app, such as a task or an action. Defined as CHT-enhanced XForms. Collect Forms: used to render forms in Medic Collect. Defined as ODK XForms and need a corresponding JSON form to receive data in CHT. JSON Forms: used for data coming from external channels such as SMS, or via interoperability with other tools. Defined according to a JavaScript Object Notation schema.  Forms that can be completed in the app are built using a CHT-enhanced version of ODK XForms notation \u0026ndash; a XML definition of the structure and format for a set of questions. Since writing raw XML can be tedious, the XLSForm standard is commonly used to define forms. The medic-conf command line tool can be used to convert to the XForm format and include the form in a CHT application. The instructions on this site assume some knowledge of XLSForm.\n","excerpt":"Forms are a building block of all CHT apps. They are used when creating or editing contacts, and …","ref":"/beta/apps/concepts/forms/","title":"Forms"},{"body":"","excerpt":"","ref":"/beta/core/guides/","title":"Guides"},{"body":"Characteristics and Strengths  Set national health priorities and design large-scale national public health programs Lead health sector reform agenda Guide the production, recruitment, and deployment of human resource for health, including community health workforce Regulate both public and private health service providers Set development cooperation policies and priorities in the health sector Provide financial resources to sub-national governments Work closely with other ministries and sub-national governments to execute national health policies Compete with other ministries and government line agencies for resources Have access to large-scale funding from multilateral and bilateral international agencies Have an appreciation for the role of digital technology in healthcare May have developed and rolled-out national digital health strategy Responsible for setting digital technology and data standards Often have an institutional home to anchor national digital health programs May have some in-house capacity to deploy and implement digital health tools Are often looking to establish partnerships for leveraging digital health technologies Are leveraging data and data science to innovate on new approaches to achieving desired health outcomes Have access to health systems data from the deployment of a new model of care May have already invested significantly in proprietary locked-in software  Values  Safeguarding the health rights of the citizens International commitments in health, e.g. UHC, SDG, etc. National ownership of public health programs National capacities to govern and manage community health programs Cost-effectiveness Government adoption and sustainability  Needs  Health systems strengthening support to keep up with growing population needs and tackle emerging public health challenges, e.g. NCDs Regular political commitments for increased spending in public health Integration and interoperability of digital health technologies Better data systems for evidence-based planning and monitoring Capacity and resources to govern and manage digital health programs HCD and data science capabilities  ","excerpt":"Characteristics and Strengths  Set national health priorities and design large-scale national public …","ref":"/beta/design/personas/partners/national-governments/","title":"Ministry of Health and National Governments"},{"body":" “I heard that some branches have already had challenges with mobile phones.”\n About Christina been working at BRAC for six years. She manages four branches and works closely with the CHW Managers there. She makes sure CHW Managers are monitoring CHWs. She occasionally does random checks, driving out to villages and observing Managers with CHWs.\nValues  Visionary Integrity Good communication Respect Responsibility Wisdom Empathy  Responsibilities  Overall responsibility of the Region’s activities Oversees implementation of organisational goals Communicates organisational goals and strategies to CHW managers Liaise and ensure compliance with Ministries, NGO boards and regulatory bodies Promote advocacy efforts of the program Supervises and supports staff to attain their career goals Approval of quarterly logistic plans for CHW managers Reviews and approves CHW’s continuous education programs Evaluates programs impact and advises on key priority areas of focus Realignment of programs to changing ecosystem Budgetary planning for region’s activities Tracking branches’ and CHW manager’s performance Monthly indicators tracking to ensure realization of organisational goals  Needs  Real time access of data on supervision activities ongoing in their region Access to summary statistics on project indicators Timely submission of monthly reports on retention and turnover rates for CHWs Escalation of CHW retraining needs, challenges and proposed solutions Opportunities to conduct random checks to assess the CHWs perceptions of their managers support  Motivations  Desire to improve lives of communities Desire to practice community health strategies learnt at school Organisational goals align well with personal goals  Strengths and Assets  Provided with a company car and computer Has a welcoming heart and accessible to employees Team player  ","excerpt":" “I heard that some branches have already had challenges with mobile phones.”\n About Christina been …","ref":"/beta/design/personas/regional-manager-christina/","title":"Regional Manager, Christina"},{"body":"Care Guides   Forms are used to build “Care Guides” that take health workers through care protocols and provide decision support for their interactions with patients. App designers can use the basic form building functionality in a variety of ways.\nCare Guides also allow CHWs to register new families and people, assess a sick child, and enroll a new pregnancy into an antenatal care schedule. Care Guides can be located in many parts of your app, including the Tasks, People, and Reports tabs.\nCare Guides provided in the CHT\u0026rsquo;s Reference Applications can be configured for your app, or a new Care Guide can be written from scratch. Some configuration is probably necessary due to different local requirements, and government protocols.\nFunctionality   Care Guides consists of questions grouped into pages. They are capable of presenting many different types of questions, skip logic, images, and videos. Validation rules can require certain questions to be answered or restrict answers to a specified type or range.\nIt’s possible to reference previous information that was submitted about the person or household from within the care guide. The interaction can also conclude with a summary that includes assessment results, treatment recommendations, and referral info.\nCare Guides can include images for instructional purposes and can access a user’s camera to take a photo if needed.\nSummary   After all of the required questions have been answered, a summary page can be displayed.\nHere, health workers can review the information they entered, receive instructions for treatment, care, and referrals, and relay detailed education to the patient.\nPlease Note: The form is not submitted until the user scrolls to the very end of the summary and clicks the “Submit” button.\nExamples    While a health worker is going through the form during the care visit, you can include a family planning question only if the person who the form is about is a woman and not pregnant. You can include on-the-spot conversational prompts and advice for the CHW based on how they answer questions in the form. For instance, if a CHW answers “yes” to the question about a woman’s interest in family planning, text can automatically appear to provide information on her options. An image showing how to read a rapid test can be displayed within a form, to help health workers to correctly interpret their test results.  ","excerpt":"Care Guides   Forms are used to build “Care Guides” that take health workers through care protocols …","ref":"/beta/apps/concepts/care-guides/","title":"Care Guides"},{"body":"“People” is the generic name used for individuals in apps built with the Core Framework. They can be patients, family members, nurses or health workers. Anyone with a profile in your app is a person.\n“Places” is the generic name that represents a level in the hierarchy. “People” belong to “places” and “places” belong to other higher level “places” in the hierarchy.\nDepending on the context, a “place” might be a health facility and the “people” who get created at that level might be nurses. Most often for CHWs, these “places” are families.\nUsers can access their “people” and “places” from the People tab.\nMain List   The view on the right is what a logged-in CHW would see in when they access the “People” tab on a small screen.\nThe item at the top of the list is the “place” the user belongs to. Below that is a list of the “places” they serve, represented by families. Individual “people” are not shown here, but will appear in search results.\nBecause this list defaults to show the “places” below the user in the hierarchy, a CHW supervisor would see a different view. Instead of families, they might see a list of CHW Areas they manage.\nNew “places” can be added to this level of the hierarchy by clicking on the “Add new +” button at the bottom of the screen. This allows a CHW to add a new family to their list, or a CHW supervisor to add a new Area they manage.\nSearching Click in the search area at the top of the screen to search for a “person” or “place”. The freetext search works on all fields included in the “person” or “place” document such as patient name or patient ID. The exact fields depends on which information you’ve configured your app to collect.\nAfter entering a search term, the list filters to show matching items. Searching will only return items that are lower than you in the hierarchy and that you have permission to view.\nTo clear the search and return the default view, click on the refresh icon located to the right of the search box.\nProfiles Clicking an item on the main list will open a profile where you can see detailed information about that person or place. At the top is general information like name and phone number.\n          If you’re viewing a place profile, you’ll see a list of people or places that belong to this place in the app hierarchy, such as family members. The star signifies the primary contact.\nBeneath that, you will find tasks for this person or place. At the very bottom is a history of submitted reports for this person or place.\nFrom profiles, users can edit contact information, take actions, and, if viewing a place profile, add new people and assign a primary contact person. If a place is not at the bottom of the hierarchy, a user can add new places to the level below this.\nFields The top card on all profiles contains general information for the contact. All the fields shown in this summary card are configurable.\nSee Also: Defining Contact Summary\nCondition Cards A “condition” card displays data on a profile that’s been submitted in a report about that person or place. Data can be pulled from one report or summarize many reports.\n      Condition cards can be permanent or conditional; set to appear only when a specific type of report is submitted. They can also be set to disappear when a condition is resolved or a certain amount of time has passed. You can have as many condition cards as you like, though we recommend keeping the user’s experience in mind.\nConfigurable elements include:\n Title Label for each data point displayed Data point for the field Icon for the field, if desired Conditions under which to display  See Also: Defining Condition Cards\nCare Guides   “Care Guides” are dynamic forms that you can fill out for a person or place. You can access Care Guides by clicking on the + button at the bottom of a profile. For more info, see the Care Guides overview page.\nYou’ll see different forms here depending on which person or place you’re viewing. For example, forms for families might include a “Family Survey.” Forms for adult women might include “New Pregnancy.” Forms for adult women who have had a pregnancy report, and no delivery yet reported, would also see “ANC visit.” Forms for children might include “Under-5 Assessment” or “Growth Monitoring.”\nHealth workers can use these Care Guides at any time. If the app has scheduled a care visit or follow up, it will be listed under “Tasks.”\nSee Also: Defining Care Guides\n","excerpt":"“People” is the generic name used for individuals in apps built with the Core Framework. They can be …","ref":"/beta/apps/features/contacts/","title":"Contacts"},{"body":"The Community Health Toolkit’s Reference Apps provide organizations with a template for structuring and organizing a community health workflow, its configuration code, and testing framework. They include a foundation for forms, data fields, and even analytics, and can be deployed as-is or easily customized by a developer for your unique context.\n","excerpt":"The Community Health Toolkit’s Reference Apps provide organizations with a template for structuring …","ref":"/beta/apps/examples/","title":"Examples and Reference Implementations"},{"body":"We believe in making our simple but strong visual iconography open and accessible to all. We have assembled and designed these icons for use with the Community Health Toolkit based on our human centered design principles.\nAbout the Icon Library This collection of over 60 beautiful icons was made for use in Medic Mobile applications. We will continually update this library as new icons are developed for different workflows.\nUse the forms_tasks_targets folder to find PNG and SVG icons for application code. All instances on 2.15.0 and later should be using SVG icons because they are smaller files. If your project has families or households as the lowest level of the hierarchy, use the people_and_places folder to swap out icons as needed so your hierarchy has the correct icons.\nNOTE: For those using medic-conf to upload resources, make sure you add the correct icons for people and places to your resources.json file. Otherwise, uploading resources will inadvertently remove your people and place icons. An issue is being raised in medic-conf to solve this. You\u0026rsquo;ll need to define medic-clinic, medic-health-center, medic-district-hospital and medic-person in your resources.json and set them to the appropriate SVG files.\nThe design team has put together a resource to help with best practices when selecting and using icons in configuration. Check out the best practices to learn more about which icons can be used for which use cases and workflows.\n\nThis work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.\n","excerpt":"We believe in making our simple but strong visual iconography open and accessible to all. We have …","ref":"/beta/design/icons/","title":"Icon Library"},{"body":"About Mary has formal clinical training but a limited ability to conduct complex surgical procedures. She sees +/- 50 patients a day, sometimes in their homes. She is literate in English and understands local dialects. She is sometimes stationed far from her rural town/family in spurts and makes regular trips to districts to hand-deliver reports.\nMary lives on $5/day and depends mostly on solar power at the clinic as she may not have electricity at home. She is enthusiastic about technology but has had little exposure. She has an email address that she does not check regularly and has a basic understanding of Windows OS. She uses Facebook and M-PESA on a low-end phone.\nValues  Good health. Anyone is only able to work and therefore take care of ones and other people’s needs if and when in really good health Family is the essence of one’s existence and that each child is entitled to love that can be best provided and experienced in the family setting Education is the ticket for better, healthier and happier life for everyone  Responsibilities  Assessing patients and providing primary care Reporting service delivery statistics to health system officials Coordinating care for high-priority patients through CHWs and supervisors Initiating events to promote healthy practices in the community  Needs  Nurse Mary wants nil (zero) maternal and child mortalities in the community served by the health facility Nurse Mary needs all the community to be aware of the health care services that they can access at the health facility Nurse Mary needs everyone in the community to have access and adhere to continuous quality care provided at the health facility Nurse Mary needs all defaulters to health care available at the health facility that are in the community to be traced and re-introduced to care Nurse Mary needs to keep and get accurate data of the target population that she provides health care for Nurse Mary needs to keep abreast with new editions of nursing procedures through regular trainings/seminars  Motivations  Community enjoying services of skilled health professionals for deliveries which translates to no or very few maternal and child mortalities. More money for her to run the facility as finances for performance is a policy that is in use now in Kenya. Healthier children, with fewer neonatal, infant or child mortalities, and 100% full immunization of all under-fives. Progress within the nursing profession with continues and recognized certifications. Model health facility where other health facilities are encouraged to emulate and adopt those standards. Prompt report submissions to supervisors and the recognition by the supervisors for that.  Strengths and Assets  Literate Strong clinical knowledge Organizational skills Constant source of income-employment by the government Mobile phones: smart phones, facebook, Whatsapp and access to email Computer literacy: access email, basic understanding of the windows OS Access to either solar or electricity power at the health center  A Day in the Life Her day at work starts early as she must be on duty at 7 am, to relieve the nurse who has been on cover of the health facility at night if she is in a health facility that as at least 2 of them. In the health facility, where she is the only nurse she comes to pick up from where she left last evening, if she was “lucky” not to be woken up to attend to a patient at night.\nShe gets a report from the “night nurse” of all the in-patients-mainly women in labor, newborns born at night, children less than 5 years brought in at night for care and injuries resulting from accidents.\n8am going to 9am, the outpatient is swollen with patients: mothers with under five children bringing them to the child welfare clinic, pregnant women some with under five children coming also for antenatal care, and elderly women and men, all weak, sick looking and would pass for nutritional support-if only there were supplements for the elderly. The ones in store are for the under 5 malnourished and pregnant women.\nAnyway, she notes the need to do a health education session on how to eat a well-nourished meal using the locally available food stuffs, but now, she must do one on how to prevent contracting cholera as cholera as for the last 2 months being reported in many parts of the country. It is a regular practice to carry out health education sessions to the out patients. She will also talk to the CHEW today for a health education session with the CHWs during their monthly meeting on cholera prevention that the CHWs must disseminate to the community. She and the field CHEW must liaise consistently as they work together with the CHWs to promote the health of the community. Her role is to oversee the field CHEW and to help her meet the knowledge gap of the CHWs by consistently teaching CHWs on common local diseases and how to prevent them, identifying them, giving first aid and referring patients for specialized health care.\nThe CHWs are critical to her as they are the link between the community and the health facility that is very important. The CHWs help her trace the children under five lost to follow up, malnourished children in the community who need follow up, chronically ill patients in the community that need home based care and refer and support orphans and vulnerable children in the community. The field CHEW co-ordinates this activity, after giving her the list of the patients to be followed.\nHer next in line activity is to see the ANC mothers, she co-ordinates their care, sends them for laboratory work, prescribe treatments and supplements based to the general health assessments of the woman and the lab results. She records care given in the maternal child booklet, and advises her on when to come for her next follow up. She briefly counsels on how to take care of herself during pregnancy, feed well and the exercises to take, maintain good hygiene and to plan to deliver her baby in the health facility: the individual birth plan, must be reinforced by the CHWs who can afford some more time for a one to one talk with the woman. She keeps a record of all the pregnant women she sees, both the new and those that come for subsequent visit. She will write a report based on this at the end of the month showing the new pregnancies, those that have it 4+ANC visits, new PMTC cases among other details.\nShe will also attend to the under-fives, both those that have come for the routine immunization and growth monitoring and the sick ones who were brought for treatment. She will record all the care given in the mother child booklet and give brief advice on nutrition of the child while charting the weight on the growth monitoring chart. She will attend to the other sickly patients as well, give family planning counseling and services, and monitor the mothers in labor in the ward. Among other duties that she must attend to are emergency cases referred from the community, accompanying complicated cases to the higher level hospital for more specialized care, and assisting the doctors and clinicians in handling special cases when in facility like a hospital where these services are offered.\nThe day has not started or ended if she has not read the temperature of the thermometers of the vaccine boxes to ensure that it is in the required temperature ranges and therefore the boxes are in good order.\nHer monthly reports range from daily vaccine monitoring chart, to the ANC, immunization related records to the vaccine usage rates for the month. She places monthly based order for vaccine supplies based on the month’s usage, and must collect the vaccines from the sub-county headquarters before the end of the first week of the month. She attends a monthly visit organized by her supervisors at the sub-county district, at least monthly and frequently meets her colleagues during the irregular continuous education seminars organized by their supervisors.\nNurse Mary faces a lot of challenges, but the most pressing is the workload coupled with the intensity of the nature of the work that she faces day in, day out. She is entitled to work a maximum of 45 hours a week, but is that really what happens?\n","excerpt":"About Mary has formal clinical training but a limited ability to conduct complex surgical …","ref":"/beta/design/personas/nurse-mary/","title":"Nurse, Mary"},{"body":"A transition is javascript code that runs when a document is changed. A transition can edit the changed doc or do anything server side code can do for that matter.\nTransitions are run in series, not in parallel:\n  For a given change, you can expect one transition to be finished before the next runs.\n  You can expected one change to be fully processed by all transitions before the next starts being processed.\n  Transitions obey the following rules:\n  has a filter(doc) function that accepts the changed document as an argument and returns true if it needs to run/be applied.\n  a onMatch(change, db, auditDb, callback) function than will run on changes that pass the filter.\n  can have an init() function to do any required setup and throw Errors on invalid configuration.\n  has an onChange(change, db, audit, callback) function that makes changes to the change.doc reference (copying is discouraged). db and audit are handles to let you query those DBs. More about callback below.\n  It is not necessary for an individual transition to save the changes to change.doc to the db: the doc will be saved once, after all the transitions have edited it. If an individual transition saves the document provided at change.doc, it takes responsibility re-attaching the newly saved document (with new seq etc) at change.doc\n  guarantees the consistency of a document.\n  runs serially and in any order. A transition is free to make async calls but the next transition will only run after the previous transitions\u0026rsquo;s callback is called. If your transition is dependent on another transition then it will run on the next change. Code your transition to support two changes rather than require a specific ordering. You can optimize your ordering but don\u0026rsquo;t require it. This keeps configuration simpler.\n  is repeatable, it can run multiple times on the same document without negative effect. You can use the transitions property on a document to determine if a transition has run.\n  Callback arguments:\n  callback(err, needsSaving)\nneedsSaving is true if the change.doc needs to be saved to db by the transition runner. For instance the transition has edited the change.doc in memory. err if truthy, the error will be added to the changes.doc in memory. (Note that if needsSaving is falsy, the doc will not be saved, so that error will not be persisted).\n  Regardless whether the doc is saved or not, the transitions will all be run (unless one crashes!).\nWhen your transition encounters an error, there are different ways to deal with it. You can :\n finish your transition with callback(someError, true). This will save the error to change.doc. finish your transition with callback(someError, false). The error will be logged to the sentinel log. This will not save the error on the change.doc, so there will be no record that this transition ran. That particular change will not go through transitions again, but if the same doc has another change in the future, since there is no record of the erroring transition having run, it will be rerun. crash sentinel. When sentinel restarts, since that change did not record a successful processing, it will be reprocessed. Transitions that did not save anything to the change.doc will be rerun.  ","excerpt":"A transition is javascript code that runs when a document is changed. A transition can edit the …","ref":"/beta/core/overview/transitions/","title":"Transitions API"},{"body":"From 3.7.0 it is possible to configure what types of places and people are available by modifying the contact_types array in the app settings. Each type has the following properties.\napp_settings.json .contact_types[]    Property Description Required     id String identifier for the type. At times this will be used to sort the contacts in the UI so it is recommended to using a number prefix with gaps between numbers, eg: 10-district, 20-region, etc. Yes.   name_key The translation key used for the title for the contact profile. No, defaults to \u0026lsquo;contact.profile\u0026rsquo;.   group_key The translation key used for the title of a list of contacts of this type. Yes.   create_key The translation key used on the button for creating new contacts of this type. Yes.   edit_key The translation key used on the button for editing contacts of this type. Yes.   primary_contact_key The translation key used to identify a person as the primary contact of contacts of this type. No, defaults to \u0026lsquo;Primary contact\u0026rsquo;.   parents An array of strings of IDs of parent types. If more than one then this type can appear in different places in the hierarchy. If more than one type lists the same type as a parent then a user will get a dropdown of places to create. If no parents then contacts of this type will be at the top of the hierarchy and cannot be added as a child of any contact. No, defaults to no parents.   icon The string ID for the icon to show beside contacts of this type. Yes.   create_form The string ID for the xform used to create contacts of this type. Yes.   edit_form The string ID for the xform used to edit contacts of this type. No, defaults to the create_form.   count_visits Whether or not to show a count of visits for contacts of this type. Requires UHC to be enabled. No, defaults to false.   person Whether this is a person type or a place type. No, defaults to false.    Forms When creating contacts the type will be automatically assigned based on the button the user clicked. However if the form also creates sibling or child contacts these nested sections must specify a type field with a hardcoded value of \u0026ldquo;contact\u0026rdquo; and a contact_type field with the ID of the desired contact type.\nChanging the configuration You can change any contact type configuration easily except for the IDs. To change the ID of a contact type in configuration of a project which already has contact data the contact docs will also have be updated to have a type of \u0026ldquo;contact\u0026rdquo; and a contact_type with the new ID of the contact type.\nMigration If you already have person and place documents, switching from using the fixed hierarchy requires that you also update all the exisitng docs. Each contact and report holds the IDs of ancestors in their hierarchy so they will all need to be updated to be consistent with the changes you\u0026rsquo;ve made. You can use the medic-conf move-contacts command to help with this migration.\n","excerpt":"From 3.7.0 it is possible to configure what types of places and people are available by modifying …","ref":"/beta/apps/reference/app-settings/hierarchy/","title":".contact_types"},{"body":"From 3.9.0 it is possible to integrate with DHIS2 by modifying the dhisDataSets property in app_settings.json.\nSee Also: DHIS2 Integration\napp_settings.js .dhisDataSets[]    Property Type Description Required     id string The data set id from DHIS2 with which to integrate Yes   translation_key string The translation key of the DHIS2 data set name to be displayed Yes    Code samples Configure the id and translation_key of the DHIS2 data set. The id corresponds to the id of the data set in the DHIS2 instance you want to integrate with. The translation_key corresponds to the name of the DHIS2 data set as it appears in the dropdown in the App Management app.\napp_settings.js \u0026#34;dhisDataSets\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;VMuFODsyWaO\u0026#34;, \u0026#34;translation_key\u0026#34;: \u0026#34;dhis.dataset.moh515\u0026#34; } ], ","excerpt":"From 3.9.0 it is possible to integrate with DHIS2 by modifying the dhisDataSets property in …","ref":"/beta/apps/reference/app-settings/dhis2/","title":".dhisDataSets"},{"body":"JSON Forms are used for parsing reports from formatted SMS, SIM applications, and Medic Collect. JSON form definitions are also used for interoperability with third-party systems. Each form is defined as an JSON form object according to the following schema.\napp_settings.json .forms[]    property type description required     meta object Information about the report. yes   meta.code string The unique form identifier, which will be sent with all reports of this form. Must be the same as the form\u0026rsquo;s key. yes   meta.icon string Name of the icon resource shown in the app. no   meta.translation_key string Name of the form shown in the app. no   fields object Collection of field objects included in the form. yes   fields.${field} object Field that is part of the form. yes   fields.${field}.type string Data type of field:\n- \u0026quot;integer\u0026quot;: a whole number\n- \u0026quot;string\u0026quot;: any collection of characters\n- \u0026quot;date\u0026quot;: a date in the format YYYY-mm-dd, for example \u0026ldquo;2019-01-28\u0026quot;\n- \u0026quot;boolean\u0026quot;: true or false, represented by the digit 1 and 0 respectively (native JSON booleans are also supported if sending via JSON)\n- \u0026quot;custom\u0026quot;: Only possible for JSON forms that are passed as actual JSON (not an SMS that gets parsed into JSON). Effectively any non-specific data structure, which will be taken without validation. yes   fields.${field}.labels object  no   fields.${field}.labels.short string, object with translation_key field, or translation object Label shown for field in the app, seen when report is viewed in Reports tab. If missing, label will default to a translation key of report.${form_name}.${field_name} (eg report.f.patient_id) which can be translated in the app languages. no   fields.${field}.labels.tiny string Unique identifier within the form for this field. Used in form submission to bind values to fields. Not required for all submission formats. no   fields.${field}.position integer Zero based order of this field for incoming reports. no   fields.${field}.flags object Additional instructions that could be used by form renderers. For instance { \u0026quot;input_digits_only\u0026quot;: true } indicated to SIM applications to show the number keyboard. Obsolete. no   fields.${field}.length array with two integers Inclusive range accepted for length of the field. no   fields.${field}.required boolean Determines if a report without this field is considered valid. no   public_form boolean Determines if reports will be accepted from phone numbers not associated to a contact. Set to false if you want to reject reports from unknown senders. Default: true. no   facility_reference string The form field whose value is to be used to match the incoming report to a contact\u0026rsquo;s rc_code. Useful when reports are sent on behalf of a facility by unknown or various phone numbers. Requires the update_clinics transition. no    Code Sample The following form has two fields, one for the patient ID, another for notes.\napp_settings.json \u0026#34;forms\u0026#34;: [ { \u0026#34;F\u0026#34;: { \u0026#34;meta\u0026#34;: { \u0026#34;code\u0026#34;: \u0026#34;F\u0026#34;, \u0026#34;icon\u0026#34;: \u0026#34;risk\u0026#34;, \u0026#34;translation_key\u0026#34;: \u0026#34;form.flag.title\u0026#34; // displayed in the webapp }, \u0026#34;fields\u0026#34;: { \u0026#34;patient_id\u0026#34;: { // this is used for the property name when the report doc is created \u0026#34;labels\u0026#34;: { \u0026#34;short\u0026#34;: { \u0026#34;translation_key\u0026#34;: \u0026#34;form.flag.patient_id.short\u0026#34; }, // displayed in the webapp \u0026#34;tiny\u0026#34;: \u0026#34;pid\u0026#34; // used in form submission to bind values to fields - not required for all submission formats }, \u0026#34;position\u0026#34;: 0, // specifies where in the SMS this value should be \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;length\u0026#34;: [ 5, 13 ], \u0026#34;required\u0026#34;: true }, \u0026#34;notes\u0026#34;: { \u0026#34;labels\u0026#34;: { \u0026#34;short\u0026#34;: { \u0026#34;translation_key\u0026#34;: \u0026#34;form.flag.notes.short\u0026#34; }, \u0026#34;tiny\u0026#34;: \u0026#34;form.flag.notes.tiny\u0026#34; }, \u0026#34;position\u0026#34;: 1, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;length\u0026#34;: [ 1, 100 ], \u0026#34;required\u0026#34;: false } }, \u0026#34;public_form\u0026#34;: true } } ] ","excerpt":"JSON Forms are used for parsing reports from formatted SMS, SIM applications, and Medic Collect. …","ref":"/beta/apps/reference/app-settings/json-forms/","title":".forms"},{"body":"Outbound is only available in Medic 3.5.0 and above\nOutbound push allows configurers to have the creation or editing of CouchDB documents trigger outbound REST requests using the data in that document. For example, upon receiving a referral report you could send that referral to an external facility system that will manage and process that event.\nThese triggers can apply to all document types (not just common types such as reports or contacts) and as such care should be taken to only send the documents you intend (see configuration of relevant_to below).\nThis feature is experimental, and may be replaced by some third party technology over time as we discover the feature-set we\u0026rsquo;re looking for.\nConfiguration For outbound pushes to occur, you must enable the mark_for_outbound transition in config:\n{ \u0026#34;transitions\u0026#34;: { \u0026#34;mark_for_outbound\u0026#34;: true } } The rest of the configuration is against the outbound configuration property, which allows you to configure as many outbound pushes as you like, keyed off a unique name:\n{ \u0026#34;outbound\u0026#34;: { \u0026#34;first config\u0026#34;: { \u0026#34;relevant_to\u0026#34;: \u0026#34;...\u0026#34;, \u0026#34;destination\u0026#34;: {}, \u0026#34;mapping\u0026#34;: {} }, \u0026#34;second config\u0026#34;: { } } } Each outbound push configuration contains the following properties: relevant_to, destination and mapping.\nrelevant_to An \u0026ldquo;expression\u0026rdquo; (some JS code that resolves to a truthy or falsy value) that determines whether this configuration is relevant to a document. The document is passed to the expression as doc, and if relevant is fully hydrated before being passed (i.e. the attached contact, its parents etc are fully attached instead of just being stubs).\nExample: you want to send a referral to a facility\u0026rsquo;s EMR system when a CHW refers a patient:\n{ \u0026#34;relevant_to\u0026#34;: \u0026#34;doc.type === \u0026#39;data_record\u0026#39; \u0026amp;\u0026amp; doc.form === \u0026#39;referral\u0026#39;\u0026#34; } Note: all documents that Sentinel processes can be picked up by your configuration, so it\u0026rsquo;s important to correctly configure relevant_to. Checking the document type as shown above is probably a good start.\ndestination A complex property that defines the details of the connection to the external service. It currently supports several authentication types: basic authentication, HTTP authorization request header, and a custom authentication mode for Muso SIH.\nBasic auth example:\n{ \u0026#34;destination\u0026#34;: { \u0026#34;base_url\u0026#34;: \u0026#34;https://example.com\u0026#34;, \u0026#34;auth\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;password_key\u0026#34;: \u0026#34;example.com\u0026#34; }, \u0026#34;path\u0026#34;: \u0026#34;/api/v1/referral\u0026#34; } } Here password_key is a key used to find the password in CouchDB\u0026rsquo;s node-based configuration. See Credentials section below.\nIf you don\u0026rsquo;t provide an authentication parameter then the request will be sent without authentication.\nAs of 3.9, the header type is also supported, which sends authentication credentials via a HTTP request header: Authorization: '\u0026lt;value\u0026gt;'. The value is set in the CouchDB configuration, and referred to by the value_key, similarly to the password_key. The value must match the credentials needed for the third party tool, and is generally formatted as \u0026lt;type\u0026gt; \u0026lt;credentials\u0026gt;. For instance, to send data to RapidPro, the value in the configuration would be set to the complete RapidPro API Token: eg Token 123456789abcdef.\nHeader auth example:\n{ \u0026#34;destination\u0026#34;: { \u0026#34;base_url\u0026#34;: \u0026#34;https://example.com\u0026#34;, \u0026#34;auth\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;header\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Authorization\u0026#34;, \u0026#34;value_key\u0026#34;: \u0026#34;example.com\u0026#34; }, \u0026#34;path\u0026#34;: \u0026#34;/api/v1/referral\u0026#34; } } mapping A complex property that declares how the payload to be sent to the destination should be created.\nEach key is a string object path to a location in the payload, and each value is either:\n a string object path to the location of the source data in the report being processed, where the value is required to exist an object with either a path property that represents a string object path as above, or an expr property which is an expression similar to relevant_to to determine the resulting value. If you wish for the value to be optional (that is to say it\u0026rsquo;s OK if path or expr evaluate to undefined) you may also set optional to true  A mapping example Given the following example (incomplete) report:\n{ \u0026#34;id\u0026#34;: \u0026#34;abc-1234\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;data_record\u0026#34;, \u0026#34;form\u0026#34;: \u0026#34;referral\u0026#34;, \u0026#34;reported_date\u0026#34;: 1555069530966, \u0026#34;fields\u0026#34;: { \u0026#34;patient_id\u0026#34;: \u0026#34;12345\u0026#34;, \u0026#34;patient_temp_deg_F\u0026#34;: 100, \u0026#34;danger_signs\u0026#34;: [\u0026#34;V\u0026#34;, \u0026#34;BL\u0026#34;, \u0026#34;D\u0026#34;, \u0026#34;IG\u0026#34;] }, \u0026#34;contact\u0026#34;: { \u0026#34;_id\u0026#34;: \u0026#34;def-5678\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Jane CHW\u0026#34;, \u0026#34;parent\u0026#34;: { \u0026#34;_id\u0026#34;: \u0026#34;hij-9012\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;...\u0026#34; } } } The following mapping configuration:\n{ \u0026#34;mapping\u0026#34;: { \u0026#34;patient_id\u0026#34;: \u0026#34;doc.fields.patient_id\u0026#34;, \u0026#34;chw_id\u0026#34;: \u0026#34;doc.contact._id\u0026#34;, \u0026#34;event.temp_c\u0026#34;: { \u0026#34;expr\u0026#34;: \u0026#34;((doc.fields.patient_temp_deg_F - 32) * (5.0/9.0)).toFixed(2)\u0026#34; }, \u0026#34;event.in_danger\u0026#34;: { \u0026#34;expr\u0026#34;: \u0026#34;doc.fields.danger_signs.length \u0026gt;= 3 ? true : undefined\u0026#34;, \u0026#34;optional\u0026#34;: true }, \u0026#34;event.additional_notes\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;doc.fields.notes\u0026#34;, \u0026#34;optional\u0026#34;: true } } } Would create the following JSON payload to send:\n{ \u0026#34;patient_id\u0026#34;: \u0026#34;12345\u0026#34;, \u0026#34;chw_id\u0026#34;: \u0026#34;def-5678\u0026#34;, \u0026#34;event\u0026#34;: { \u0026#34;temp_c\u0026#34;: 37.78, \u0026#34;in_danger\u0026#34;: true } } This example makes a few points:\n The report that is being used to generate the outbound push is referenced as doc in both path and expr properties To define a property that is itself an object, you can make the mapping key a JSON path. If you define a property as optional, it won\u0026rsquo;t exist at all in the payload if the resulting value is undefined, either because that is the result of executing the expr, or the path doesn\u0026rsquo;t exist. Note that if the event.in_danger expression was instead doc.fields.danger_signs.length \u0026gt;= 3 the property in_danger would always exist and would either be true or false  Other Notes  Your report will be hydrated before being passed to the mapper. This gives you access to the contact and its parents object paths that may have undefined properties need to be dealt with differently depending on if you are using a path or an expr. Given doc.foo.bar.smang as a path where any of those properties may not exist in the doc: If you\u0026rsquo;re using path just use the path as is, if any part of the path is undefined the resulting value will safely be undefined However, in expr you do need to handle this situation: doc.foo \u0026amp;\u0026amp; doc.foo.bar \u0026amp;\u0026amp; doc.foo.bar.smang If any of your expr expressions throw an exception (for example because you didn\u0026rsquo;t handle potentially undefined properties as noted above) your push will fail If any of your path declarations result in an undefined value and you have not also declared that property optional your push will fail  Credentials To securely store credentials, we\u0026rsquo;ll be using CouchDB\u0026rsquo;s config storage, as this is a convenient location that only CouchDB administrators can access.\nPasswords are stored under the medic-credentials section, under the key declared in config.\nIn the following example:\n{ \u0026#34;destination\u0026#34;: { \u0026#34;base_url\u0026#34;: \u0026#34;https://example.com\u0026#34;, \u0026#34;auth\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;password_key\u0026#34;: \u0026#34;example.com\u0026#34; }, \u0026#34;path\u0026#34;: \u0026#34;/api/v1/referral\u0026#34; } } We have our key configured to example.com. This means that in CouchDB\u0026rsquo;s admin config we would expect to find a password at medic-credentials/example.com.\nTo add the credential to the admin config you need to either PUT the value using curl or similar:\ncurl -X PUT https://\u0026lt;user\u0026gt;:\u0026lt;pass\u0026gt;@\u0026lt;domain\u0026gt;/_node/couchdb@127.0.0.1/_config/medic-credentials/example.com -d \u0026#39;\u0026#34;the-real-password\u0026#34;\u0026#39; (Note that couchdb@127.0.0.1 is the local node name, and may be different for you depending on your setup.)\nYou can also add it via Fauxton:\n Navigate to the Config screen Click Add Option The Section should be medic-credentials, the Name should be (in this example) example.com and the value should be the password Click Create You should then be able to see your credential in the list of configuration shown\\  Flow Outbound pushes happen in two stages:\n Sentinel picks up the report and runs transitions over it. Any outbound configuration that is relevant (via executing the relevant_to expression) will be added to a task queue Every 5 minutes sentinel will check its task queue. For each outbound push that is queued, sentinel will perform the mapping and attempt to send the resulting payload (via POST) to the configured web address  If the push succeeds it will be taken out of the task queue If the push fails (i.e. the response is not 2xx) it remains in the task queue, to be tried again in 5 minutes    Inbound? The outbound feature is used for sending data to an external service. If you are looking to receive data from an external service, take a look at the records api.\n","excerpt":"Outbound is only available in Medic 3.5.0 and above\nOutbound push allows configurers to have the …","ref":"/beta/apps/reference/app-settings/outbound/","title":".outbound"},{"body":"The patient_reports key contains the actions to take when reports about people are received.\napp_settings.json .patient_reports[]    property description required     form Form ID of the patient form. yes   name Descriptive name of the form. This is not currently used in the app, but can be a helpful annotation. no   format Guide of how the form can be used. This is not currently used in the app, but can be a helpful annotation. no   silence_type A comma separated list of schedules to mute. no   silence_for Duration from when the report was submitted for which messages should be muted. It is structured as a string with an integer value followed by a space and the time unit. For instance 8 weeks or 2 days. The units available are seconds, minutes, hours, days, weeks, months, years, and their singular forms as well. When a message is muted all messages belonging to the same group will be muted, even if it falls outside of this time period. See messages[].group in Schedules for related info. no   fields Descriptive list of form fields. This is not currently used in the app, but can be a helpful annotation. no   validations A set of validations to perform on incoming reports. More information about validation rules can be found here. no   validations.join_responses A boolean specifying whether validation messages should be combined into one message. no   validations.list[] An array of validation rules a report should pass to be considered valid. no   validations.list[].property Report field for which this validation rule will be applied. no   validations.list[].rule Validation condition to be applied to the property field. More information about rules can be found here. no   validations.list[].translation_key Translation key for the message reply to be sent if a report fails this rule. no   messages An array of automated responses to incoming reports. no   messages[].translation_key Translation key for the message text associated with this event no   messages[].event_type An event that will trigger sending of this message. Typical values are: report_accepted when the report has been successfully validated, registration_not_found when the patient ID supplied in the report doesn\u0026rsquo;t match any patient ID issued by Medic. on_mute and on_unmute are used in the context of muting as described here no   messages[].recipient Who the message should be sent to. Use reporting_unit for the sender of the report, clinic for clinic contact, and parent for the parent contact. no    Code sample This sample shows a V report clearing schedules that have messages within 8 days of the report being received. The sample also defines the response messages if the report is accepted or if the patient is not found.\n\u0026#34;patient_reports\u0026#34;: [ { \u0026#34;form\u0026#34;: \u0026#34;V\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Visit (SMS)\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;V \u0026lt;patientid\u0026gt;\u0026#34;, \u0026#34;silence_type\u0026#34;: \u0026#34;ANC Reminders, ANC Reminders LMP, ANC Reminders LMP from App\u0026#34;, \u0026#34;silence_for\u0026#34;: \u0026#34;8 days\u0026#34;, \u0026#34;fields\u0026#34;: [ { \u0026#34;field_name\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;\u0026#34; } ], \u0026#34;validations\u0026#34;: { \u0026#34;join_responses\u0026#34;: true, \u0026#34;list\u0026#34;: [ { \u0026#34;property\u0026#34;: \u0026#34;patient_id\u0026#34;, \u0026#34;rule\u0026#34;: \u0026#34;regex(\u0026#39;^[0-9]{5,13}$\u0026#39;)\u0026#34;, \u0026#34;translation_key\u0026#34;: \u0026#34;messages.generic.validation.patient_id\u0026#34; } ] }, \u0026#34;messages\u0026#34;: [ { \u0026#34;translation_key\u0026#34;: \u0026#34;messages.v.report_accepted\u0026#34;, \u0026#34;event_type\u0026#34;: \u0026#34;report_accepted\u0026#34;, \u0026#34;recipient\u0026#34;: \u0026#34;reporting_unit\u0026#34; }, { \u0026#34;translation_key\u0026#34;: \u0026#34;messages.generic.registration_not_found\u0026#34;, \u0026#34;event_type\u0026#34;: \u0026#34;registration_not_found\u0026#34;, \u0026#34;recipient\u0026#34;: \u0026#34;reporting_unit\u0026#34; } ] } ] ","excerpt":"The patient_reports key contains the actions to take when reports about people are received. …","ref":"/beta/apps/reference/app-settings/patient_reports/","title":".patient_reports"},{"body":"app_settings.json .permissions{}    Property Description Default     placeholder      ","excerpt":"app_settings.json .permissions{}    Property Description Default     placeholder      ","ref":"/beta/apps/reference/app-settings/user-permissions/","title":".permissions"},{"body":"The registrations key contains actions that need to be performed for incoming reports of the specified form.\napp_settings.json .registrations[]    property description required     form Form ID that should trigger the schedule. yes   events An array of event object definitions of what should happen when this form is received. yes   event[].name Name of the event that has happened. The only supported event is on_create which happens when a form is received. yes   event[].trigger What should happen after the named event. assign_schedule will assign the schedule named in params to this report. Similarly clear_schedule will permanently clear all messages for a patient that are part of schedules listed in the params field. The full set of trigger configuration directives are described here. yes   event[].params Any useful information for the event. In our case, it holds the name of the schedule to be triggered. no   event[].bool_expr A JavaScript expression that will be cast to boolean to qualify execution of the event. Leaving blank will default to always true. CouchDB document fields can be accessed using doc.key.subkey. Regular expressions can be tested using pattern.test(value) e.g. /^[0-9]+$/.test(doc.fields.last_menstrual_period). In our example above, we\u0026rsquo;re making sure the form has an LMP date. no   validations A set of validations to perform on incoming reports. More information about validation rules can be found here. no   validations.join_responses A boolean specifying whether validation messages should be combined into one message. no   validations.list[] An array of validation rules a report should pass to be considered valid. no   validations.list[].property Report field for which this validation rule will be applied. no   validations.list[].rule Validation condition to be applied to the property field. More information about rules can be found here. no   validations.list[].translation_key Translation key for the message reply to be sent if a report fails this rule. no   messages An array of automated responses to incoming reports. no   messages[].translation_key Translation key for the message text associated with this event. no   messages[].event_type An event that will trigger sending of this message. Typical values are: report_accepted when the report has been successfully validated and registration_not_found when the patient ID supplied in the report doesn\u0026rsquo;t match any patient ID issued by Medic. no   messages[].recipient Who the message should be sent to. Use reporting_unit for the sender of the report, clinic for clinic contact, and parent for the parent contact. no    Code sample This sample shows how a schedule would be triggered by a pregnancy report if the last_mentrual_period value is set.\n\u0026#34;registrations\u0026#34;: [ { \u0026#34;form\u0026#34;: \u0026#34;pregnancy\u0026#34;, \u0026#34;events\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;on_create\u0026#34;, \u0026#34;trigger\u0026#34;: \u0026#34;assign_schedule\u0026#34;, \u0026#34;params\u0026#34;: \u0026#34;ANC Visit Reminders\u0026#34;, \u0026#34;bool_expr\u0026#34;: \u0026#34;doc.fields.last_menstrual_period\u0026#34; } ], \u0026#34;validations\u0026#34;: {}, \u0026#34;messages\u0026#34;: [] } ] ","excerpt":"The registrations key contains actions that need to be performed for incoming reports of the …","ref":"/beta/apps/reference/app-settings/registrations/","title":".registrations"},{"body":"Replications are defined under the replications key as an array of replication objects.\napp_settings.json .replications    property description required     fromSuffix The suffix of the source table(s). Regular expression may be used. yes   toSuffix The suffix of the target table. yes   text_expression Any valid text expression. For more information, see LaterJS no if cron provided   cron Any valid Cron expression. For more information, see LaterJS no if text_expression provided    Code sample The definition takes the typical form below:\n\u0026#34;replications\u0026#34;: [ { \u0026#34;fromSuffix\u0026#34;: \u0026#34;user-[^\\\\-]+-meta\u0026#34;, \u0026#34;toSuffix\u0026#34;: \u0026#34;users-meta\u0026#34;, \u0026#34;text_expression\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;cron\u0026#34;: \u0026#34;0 2 * * *\u0026#34; } ] ","excerpt":"Replications are defined under the replications key as an array of replication objects. …","ref":"/beta/apps/reference/app-settings/replication/","title":".replications"},{"body":"Each user is assigned one of the defined roles. Roles can be defined using the App Management app, which is represented by the roles object of the app-settings.json file. Each role is defined by an identifier as the key, and an object with the following properties:\napp_settings.json .roles{}    Property Description Required     name The translation key for this role Yes   offline Determines if user will be an online or offline user. Set to false for users to be \u0026ldquo;online\u0026rdquo; users. No, default true    ","excerpt":"Each user is assigned one of the defined roles. Roles can be defined using the App Management app, …","ref":"/beta/apps/reference/app-settings/user-roles/","title":".roles"},{"body":"The schedules key contains an array of schedule objects, each representing the messages to send based on a registration.\napp_settings.json .schedules[]    property description required     name A unique string label that is used to identify the schedule. Spaces are allowed. yes   summary Short description of the of the schedule. no   description A narrative for the schedule. no   start_from The base date from which the messages[].offset is added to determine when to send individual messages. You could specify any property on the report that contains a date value. The default is reported_date, which is when the report was submitted. no   start_mid_group Whether or not a schedule can start mid-group. If not present, the schedule will not start mid-group. In other terms, the default value is false no   messages Array of objects, each containing a message to send out and its properties. yes   messages[].translation_key The translation key of the message to send out. Available in 2.15+. yes   messages[].messages Array of message objects, each with content and locale properties. From 2.15 on use translation_key instead. no   messages[].group Integer identifier to group messages that belong together so that they can be cleared together as a group by future reports. For instance a series of messages announcing a visit, and following up for a missed visit could be grouped together and cleared by a single visit report. yes   messages[].offset Time interval from the start_from date for when the message should be sent. It is structured as a string with an integer value followed by a space and the time unit. For instance 8 weeks or 2 days. The units available are seconds, minutes, hours, days, weeks, months, years, and their singular forms as well. Note that although you can specify seconds, the accuracy of the sending time will be determined by delays in the processing the message on the server and on the gateway. yes   messages[].send_day String value of the day of the week on which the message should be sent. For instance, to send a message at the beginning of the week setting it to \u0026quot;Monday\u0026quot; will make sure the message goes out on the closest Monday after the start_date + offset. no   messages[].send_time Time of day that the message should be sent in 24 hour format. no   messages[].recipient Recipient of the message. It can be set to reporting_unit (sender of the form), clinic (clinic that the sender of the form is attached to), parent (parent of the sender of the form), or a specific phone number. no    Code Sample This sample shows a schedule with a single message, which will be sent on Monday 9am 4 weeks after the LMP date on the report that triggers this schedule:\n\u0026#34;schedules\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;ANC Visit Reminders\u0026#34;, \u0026#34;summary\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;start_from\u0026#34;: \u0026#34;lmp_date\u0026#34;, \u0026#34;start_mid_group\u0026#34;: true, \u0026#34;messages\u0026#34;: [ { \u0026#34;translation_key\u0026#34;: \u0026#34;messages.schedule.registration.followup_anc_pnc\u0026#34;, \u0026#34;group\u0026#34;: 1, \u0026#34;offset\u0026#34;: \u0026#34;4 weeks\u0026#34;, \u0026#34;send_day\u0026#34;: \u0026#34;monday\u0026#34;, \u0026#34;send_time\u0026#34;: \u0026#34;09:00\u0026#34;, \u0026#34;recipient\u0026#34;: \u0026#34;reporting_unit\u0026#34; } ] } ] ","excerpt":"The schedules key contains an array of schedule objects, each representing the messages to send …","ref":"/beta/apps/reference/app-settings/schedules/","title":".schedules"},{"body":"SMS settings are defined under the sms key, as an object supporting the following properties:\napp_settings.json .sms    property default description     outgoing_service medic-gateway Defines the service to use to send SMS messages. Currently supports \u0026ldquo;medic-gateway\u0026rdquo; and \u0026ldquo;africas-talking\u0026rdquo;. Read more about \u0026ldquo;africas-talking\u0026rdquo; configuration here.   duplicate_limit 5 The number of identical sms message allowed to be sent to the same recipient.    Code sample The definition takes the typical form below:\n\u0026#34;sms\u0026#34;: { \u0026#34;outgoing_service\u0026#34;: \u0026#34;medic-gateway\u0026#34;, \u0026#34;duplicate_limit\u0026#34;: \u0026#34;2\u0026#34; } Duplicate SMS messages handling Every time a service (API or Sentinel) creates an SMS, we cache the recipient, and the message content, along with the current timestamp. When more than duplicate_limit messages have been created for the same pair of recipient+content, within the cache time limit, we mark the new message with a \u0026ldquo;duplicate\u0026rdquo; status. Such messages are never sent. The cache is cleared 30 minutes after the last SMS message for a specific pair was generated.\n","excerpt":"SMS settings are defined under the sms key, as an object supporting the following properties: …","ref":"/beta/apps/reference/app-settings/sms/","title":".sms"},{"body":"When sentinel detects a document has changed it runs transitions against the doc. These transitions can be used to generate a short form patient id or assign a report to a facility.\nConfiguration By default all transitions are disabled. They can be enabled by configuring the transitions property to have a key with the transitions name and a truthy value, eg:\n{ \u0026#34;transitions\u0026#34;: { \u0026#34;a\u0026#34;: { }, \u0026#34;b\u0026#34;: true, \u0026#34;c\u0026#34;: { \u0026#34;disable\u0026#34;: false }, \u0026#34;d\u0026#34;: { \u0026#34;disable\u0026#34;: true } } } In this example the d transition will not be applied, but the other three will be.\nAvailable transitions The following transitions are available and executed in order.\n   Key Description     maintain_info_document Records metadata about the document such as when it was replicated. Enabled by default.   update_clinics Adds a contact\u0026rsquo;s info to a new data record. This is used to attribute an incoming SMS message or report to the appropriate contact. The rc_code value on the contact is used to match to the value of the form field set as the facility_reference in the JSON form definition. This matching is useful when reports are sent on behalf of a facility by unknown or various phone numbers. If facility_reference is not set for a form, the contact match is attempted using the sender\u0026rsquo;s phone number.   registration For registering a patient to a schedule. Performs some validation and creates the patient document if the patient does not already exist. Can create places (as of 3.8.x).   accept_patient_reports Validates reports about a patient and silences relevant reminders.   generate_shortcode_on_contacts Automatically generates the patient_id on all person documents and the place_id on all place documents. Available since 3.8.x.   generate_patient_id_on_people Deprecated in 3.8.x Automatically generates the patient_id on all person documents. As of 3.8.x, also generates the place_id on all place documents and is an alias for generate_shortcode_on_contacts.   default_responses Responds to the message with a confirmation or validation error.   update_sent_by Sets the sent_by field of the report based on the sender\u0026rsquo;s phone number.   update_sent_forms Deprecated in 3.7.x Update sent_forms property on facilities so we can setup reminders for specific forms. As of 3.7.x, reminders no longer require this transition   death_reporting Updates the deceased status of patients.   conditional_alerts Executes the configured condition and sends an alert if the condition is met.   multi_report_alerts Similar to conditional_alerts, with more flexible configuration, including using different form types for the same alert.   update_notifications Deprecated in 3.2.x Mutes or unmutes scheduled messages based on configuration.   update_scheduled_reports If a report has a month/week/week_number, year and clinic then look for duplicates and update those instead.   resolve_pending Sets the state of pending messages to sent. It is useful during builds where we don\u0026rsquo;t want any outgoing messages queued for sending.   muting Implements muting/unmuting actions of people and places. Available since 3.2.x.   mark_for_outbound Enables outbound pushes. Available since 3.5.x   self_report Maps patient to sender. Available since 3.9.x    Transition Configuration Guide Guides for how to setup specific transitions.\nmulti_report_alerts Send alert messages by SMS when specific conditions are received through reports. More flexible than simple Alerts.\nExample: send SMS to the district manager when 2 CHWs within the same district report cholera or diarrhea symptoms within the last week.\nUnderstanding the different types of reports used in the configuration:\n previous suspected_cholera alert was sent | | latest_report comes in, suspected_cholera alert is sent | | v v ---[---*-o---*--*--o-o---*]-------\u0026gt; time 1 0 [] : time window\n* and o : reports : any report that came in to the server.\n* : counted_reports : reports that came in that passed the is_report_counted filter function.\n0, 1 : new_reports : counted_reports that came in since the previous alert was sent. They haven\u0026rsquo;t been messaged about yet.\nConfiguration \u0026quot;multi_report_alerts\u0026quot; : [ { \u0026quot;name\u0026quot;: \u0026quot;suspected_cholera\u0026quot;, \u0026quot;is_report_counted\u0026quot;: \u0026quot;function(report, latest_report) { return latest_report.contact.parent.parent._id === report.contact.parent.parent._id; }\u0026quot;, \u0026quot;num_reports_threshold\u0026quot;: 2, \u0026quot;message\u0026quot;: \u0026quot;{{num_counted_reports}} patients with {{alert_name}} in {{time_window_in_days}} days reported at {{new_reports.0.contact.parent.name}}. New reports from: {{new_reports.0.contact.name}}, {{new_reports.1.contact.name}}, {{new_reports.2.contact.name}}.\u0026quot;, \u0026quot;recipients\u0026quot;: [ \u0026quot;+123456\u0026quot;, \u0026quot;new_report.contact.phone\u0026quot;, // sender of each report in new_reports \u0026quot;new_report.contact.parent.parent.contact.phone\u0026quot;, // contact person for the parent place of the sender of each report in new_reports. // If it's the same for several reports, only one message will be sent (recipient phone numbers are deduplicated before generating messages). ], \u0026quot;time_window_in_days\u0026quot;: 7, \u0026quot;forms\u0026quot;: [\u0026quot;C\u0026quot;, \u0026quot;D\u0026quot;] // Only Cholera and Diarrhea forms. } ] Note that we are using Mustache templates for our message templates (anything with {{}}), and they use a . notation to access items in an array (e.g. new_reports.1) rather than a [] notation as in conventional javascript (new_reports[1]).\nFor performance reasons the num_reports_threshold cannot exceed 100.\ndeath_reporting Updates patient documents with a date_of_death field which updates how the patient is displayed in the UI.\nConfiguration Configuration is stored in the death_reporting field of the settings.\n   Property Description     mark_deceased_forms An array of form codes which will cause patients to be recorded as deceased.   undo_deceased_forms An array of form codes which will remove the deceased date from the patient. Optional.   date_field The path to the field in the report document which has the date the patient died. Optional: if not configured it defaults to the reported_date of the report.    Example \u0026#34;death_reporting\u0026#34;: { \u0026#34;mark_deceased_forms\u0026#34;: [ \u0026#34;death\u0026#34; ], \u0026#34;undo_deceased_forms\u0026#34;: [ \u0026#34;undo-death\u0026#34; ], \u0026#34;date_field\u0026#34;: \u0026#34;fields.death_date\u0026#34; } Registration Configuration is held at app_settings.registrations, as a list of objects connecting forms to validations, events and messages.\nEvents Lists different events.\non_create This is the only supported event.\nTriggers add_patient Sets the patient_id on the root of the registration document and creates the person doc if required. Can be configured to either use a provided ID or generate a new unique one.\nExternal Patient ID If you are providing the patient id instead of having Sentinel generate you one, name the field in a patient_id_field key in \u0026quot;params\u0026quot;:\n{ \u0026#34;name\u0026#34;: \u0026#34;on_create\u0026#34;, \u0026#34;trigger\u0026#34;: \u0026#34;add_patient\u0026#34;, \u0026#34;params\u0026#34;: \u0026#34;{\\\u0026#34;patient_id_field\\\u0026#34;: \\\u0026#34;external_id\\\u0026#34;}\u0026#34;, \u0026#34;bool_expr\u0026#34;: \u0026#34;\u0026#34; } In this example the provided id would be in fields.external_id on the registration document.\nNB: this field must not be called patient_id. NB: the JSON passed in \u0026quot;params\u0026quot; should still be a string. Support for raw JSON as shown below exists, but is in beta and may not always work correctly in all situations, because kanso.json does not support it:\n{ \u0026#34;params\u0026#34;: {\u0026#34;patient_id_field\u0026#34;: \u0026#34;external_id\u0026#34;}, } Alternative Name Location To provide an alternative location for the patient name, either provide a patient_name_field in \u0026quot;params\u0026quot; or provide it directly into the \u0026quot;params\u0026quot; field as a String:\n{ \u0026#34;params\u0026#34;: \u0026#34;{\\\u0026#34;patient_name_field\\\u0026#34;: \\\u0026#34;full_name\\\u0026#34;}\u0026#34;, } { \u0026#34;params\u0026#34;: \u0026#34;full_name\u0026#34;, } The first format is required if you wish to also provide other params:\nContact Type If you have changed from the default contact hierarchy you will need to specify which type of contact the registration should create.\n{ \u0026#34;params\u0026#34;: \u0026#34;{ \\\u0026#34;contact_type\\\u0026#34;: \\\u0026#34;patient\\\u0026#34; }\u0026#34; } Specific Parent as of 3.8.0 By default, the newly created person will have the same parent as the report submitter. A different parent may be selected by providing a location for the parent id. This field should contain the place_id of the place in question. If the selected parent is invalid - does not exist or does not respect the configured hierarchy\n the report is rejected as invalid and the person document is not created. As such , report_accepted event should check if the report has a patient property (or similar).  { \u0026#34;params\u0026#34;: \u0026#34;{ \\\u0026#34;parent_id\\\u0026#34;: \\\u0026#34;parent_id\\\u0026#34; }\u0026#34; } Events  parent_field_not_provided - triggered when the report does not have the required parent_id field parent_invalid - triggered when selected parent is invalid (parent document is found and either does not have a configured type or its type is not configured to be a parent to the person type to be created) parent_not_found - triggered when selected parent is not found  The selected parent (if found) can be accessed by using the parent path in error messages: Cannot create a person type \u0026quot;patient\u0026quot; under parent {{parent.place_id}}({{parent.contact_type}})\nadd_patient_id Deprecated in favour of add_patient. Previously this only added a patient_id to the root of the registration form. This functionality has been merged into add_patient. Now, using this event will result in the same functionality as described in add_patient above.\nadd_expected_date add_birth_date assign_schedule clear_schedule add_place as of 3.8.0 Sets the place_id on the root of the registration document and creates the place doc with the provided type.\nBy default, the created place would have the same parent as the submitter. If such a combination is invalid - for example a contact under a \u0026ldquo;clinic\u0026rdquo; attempts to create a new \u0026ldquo;health_center\u0026rdquo; - the report will be rejected as errored and the place document will not be created. As such, report_accepted event should check if the report has a place property (or similar).\nThe created place does not have a primary contact. The created place can be accessed by the place path in messages: Place {{place.name}}({{place.place_id}}) added to {{place.parent.name}}({{place.parent.place_id}})\nContact Type Specifying the contact type is required, even if not using configurable hierarchies. The selected contact type must be a configured place type.\n{ \u0026#34;params\u0026#34;: \u0026#34;{ \\\u0026#34;contact_type\\\u0026#34;: \\\u0026#34;clinic\\\u0026#34; }\u0026#34; } Specific Parent By default, the newly created place will have the same parent as the report submitter. A different parent may be selected by providing a location for the parent id. This field should contain the place_id of the place in question. If the selected parent is invalid - does not exist or is not an acceptable parent to the selected type in the configured hierarchy - the report will be rejected as errored.\n{ \u0026#34;params\u0026#34;: \u0026#34;{ \\\u0026#34;parent_id\\\u0026#34;: \\\u0026#34;parent_id\\\u0026#34; }\u0026#34; } Events  parent_field_not_provided - triggered when the report does not have the required parent_id field parent_invalid - triggered when selected parent is invalid (parent document is found and either does not have a configured type or its type is not configured to be a parent to the place type to be created) parent_not_found - triggered when selected parent is not found  The selected parent (if found) can be accessed by using the parent path in error messages: 'Cannot create a place type \u0026quot;health_center\u0026quot; under parent {{parent.place_id}}({{parent.contact_type}})'\nAlternative Name Location The created place\u0026rsquo;s name is provided in the place_name field by default. To provide an alternative location for the place name, provide a place_name_field in \u0026quot;params\u0026quot;:\n{ \u0026#34;params\u0026#34;: \u0026#34;{\\\u0026#34;place_name_field\\\u0026#34;: \\\u0026#34;clinic_name\\\u0026#34;}\u0026#34;, } Generate Shortcode on Contacts No custom configuration for generate_shortcode_on_contacts.\nGenerate Patient ID On People Deprecated since 3.8.x in favor of generate_shortcode_on_contacts\nNo custom configuration for generate_patient_id_on_people.\nupdate_notifications Deprecated in favor of Muting\nConfiguration \u0026quot;notifications\u0026quot;: { \u0026quot;off_form\u0026quot;: \u0026quot;OFF\u0026quot;, \u0026quot;on_form\u0026quot;: \u0026quot;ON\u0026quot;, \u0026quot;validations\u0026quot;: { \u0026quot;join_responses\u0026quot;: true, \u0026quot;list\u0026quot;: [] }, \u0026quot;messages\u0026quot;: [ { \u0026quot;translation_key\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;event_type\u0026quot;: \u0026quot;on_mute\u0026quot;, \u0026quot;recipient\u0026quot;: \u0026quot;reporting_unit\u0026quot; }, { \u0026quot;translation_key\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;event_type\u0026quot;: \u0026quot;on_unmute\u0026quot;, \u0026quot;recipient\u0026quot;: \u0026quot;reporting_unit\u0026quot; }, { \u0026quot;translation_key\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;event_type\u0026quot;: \u0026quot;patient_not_found\u0026quot;, \u0026quot;recipient\u0026quot;: \u0026quot;reporting_unit\u0026quot; } ] } Muting Implements muting/unmuting of persons and places. Supports multiple forms for each action, for webapp and sms workflows.\nMuting action:\n updates target contact and all its descendants[1], setting the muted property equal to the current date in ISO format[2] adds a muting_history entry to Sentinel info docs for every updated contact[7] updates all connected registrations[3], changing the state of all unsent[4] scheduled_tasks to muted  Unmuting action:\n updates target contact\u0026rsquo;s topmost muted ancestor[1][5] and all its descendants, removing the muted property adds a muting_history entry to Sentinel info docs for every updated contact[7] updates all connected registrations[3], changing the state of all present/future[6] muted scheduled_tasks to scheduled  [1] Contacts that are already in the correct state are skipped. This applies to updates to the contact itself, updates to the Sentinel muting_history and to the connected registrations (registrations of a contact that is already in the correct state will not be updated). [2] The date represents the moment Sentinel has processed the muting action [3] target contact and descendants\u0026rsquo; registrations [4] scheduled_tasks being in either scheduled or pending state [5] Because the muted state is inherited, unmuting cascades upwards to the highest level muted ancestor. If none of the ancestors is muted, unmuting cascades downwards only. [6] scheduled_tasks which are due today or in the future. All scheduled_tasks with a due date in the past will remain unchanged.\n[7] Muting history Each time the muted state of a contact changes, an entry is added to a muting_history list saved in Sentinel info docs (stored as an array property with the same name). Entries in muting_history contain the following information:\n   Property Description     muted Boolean representing the muted state   date Date in ISO Format   report_id An _id reference to the report that triggered the action    Configuration Configuration is stored in the muting field of app_settings.json.\n   Property Description     mute_forms An array of form codes which will trigger muting. Required   unmute_forms An array of form codes which will trigger unmuting. Optional.   validations List of form fields validations. All mute \u0026amp; unmute forms will be subjected to these validation rules. Invalid forms will not trigger muting/unmuting actions. Optional.   messages List of tasks/errors that will be created, determined by event_type. Optional.    Supported events_types are:\n   Event Type Trigger     mute On successful mute action   unmute On successful unmute action   already_muted On mute action, when target contact is already muted   already_unmuted On unmute action, when target contact is already unmuted   contact_not_found Either mute or unmute actions when target contact is not found    Example \u0026quot;muting\u0026quot;: { \u0026quot;mute_forms\u0026quot;: [\u0026quot;mute_person\u0026quot;, \u0026quot;mute_clinic\u0026quot;], \u0026quot;unmute_forms\u0026quot;: [\u0026quot;unmute_person\u0026quot;, \u0026quot;unmute_clinic\u0026quot;], \u0026quot;validations\u0026quot;: { \u0026quot;join_responses\u0026quot;: true, \u0026quot;list\u0026quot;: [] }, \u0026quot;messages\u0026quot;: [ { \u0026quot;translation_key\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;event_type\u0026quot;: \u0026quot;mute\u0026quot;, \u0026quot;recipient\u0026quot;: \u0026quot;reporting_unit\u0026quot; }, { \u0026quot;translation_key\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;event_type\u0026quot;: \u0026quot;unmute\u0026quot;, \u0026quot;recipient\u0026quot;: \u0026quot;reporting_unit\u0026quot; }, { \u0026quot;translation_key\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;event_type\u0026quot;: \u0026quot;already_muted\u0026quot;, \u0026quot;recipient\u0026quot;: \u0026quot;reporting_unit\u0026quot; }, { \u0026quot;translation_key\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;event_type\u0026quot;: \u0026quot;already_unmuted\u0026quot;, \u0026quot;recipient\u0026quot;: \u0026quot;reporting_unit\u0026quot; }, { \u0026quot;translation_key\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;event_type\u0026quot;: \u0026quot;contact_not_found\u0026quot;, \u0026quot;recipient\u0026quot;: \u0026quot;reporting_unit\u0026quot; } ] } self_report Updates a data_record to set its patient to its sender. The resulting doc will have fields.patient_uuid and fields.patient_id filled with the sender\u0026rsquo;s information. Provides hydrated patient information to subsequent transitions. The sender is the contact associated with the phone number that sent the original SMS.\nIf a doc already contains a patient field, does not have a sender or its form is not configured to be enabled for this transition, it will be ignored.\nConfiguration Configuration is stored in the self_report field of app_settings.json as a list of objects connecting forms to messages. Every object should have this structure:\n   Property Description     form Form code. Required   messages List of tasks/errors that will be created, determined by event_type. Optional.    Supported events_types are:\n   Event Type Trigger     report_accepted On successful sender updating   sender_not_found Sender not found    Example \u0026#34;self_report\u0026#34;: [ { \u0026#34;form\u0026#34;: \u0026#34;FORM\u0026#34;, \u0026#34;messages\u0026#34;: [ { \u0026#34;event_type\u0026#34;: \u0026#34;report_accepted\u0026#34;, \u0026#34;recipient\u0026#34;: \u0026#34;reporting_unit\u0026#34;, \u0026#34;translation_key\u0026#34;: \u0026#34;messages.form.report_accepted\u0026#34; }, { \u0026#34;event_type\u0026#34;: \u0026#34;sender_not_found\u0026#34;, \u0026#34;recipient\u0026#34;: \u0026#34;reporting_unit\u0026#34;, \u0026#34;translation_key\u0026#34;: \u0026#34;messages.form.sender_not_found\u0026#34; } ] }, { \u0026#34;form\u0026#34;: \u0026#34;OTHER\u0026#34;, \u0026#34;messages\u0026#34;: [ { \u0026#34;event_type\u0026#34;: \u0026#34;report_accepted\u0026#34;, \u0026#34;recipient\u0026#34;: \u0026#34;reporting_unit\u0026#34;, \u0026#34;translation_key\u0026#34;: \u0026#34;messages.other.report_accepted\u0026#34; }, { \u0026#34;event_type\u0026#34;: \u0026#34;sender_not_found\u0026#34;, \u0026#34;recipient\u0026#34;: \u0026#34;reporting_unit\u0026#34;, \u0026#34;translation_key\u0026#34;: \u0026#34;messages.other.sender_not_found\u0026#34; } ] } ] ","excerpt":"When sentinel detects a document has changed it runs transitions against the doc. These transitions …","ref":"/beta/apps/reference/app-settings/transitions/","title":".transitions"},{"body":"App forms are used for care guides within the web app, whether accessed in browser or via the Android app. When a user completes an app form, the contents are saved in the database with the type data_record. These docs are known in the app as Reports.\nApp forms are defined by the following files:\n A XML form definition using a CHT-enhanced ODK XForm format A XLSForm form definition, easier to write and converts to the XForm (optional) Meta information in the {form_name}.properties.json file (optional) Media files in the {form_name}-media directory (optional)  XForm A CHT-enhanced version of the ODK XForm standard is supported.\nData needed during the completion of the form (eg patient\u0026rsquo;s name, prior information) is passed into the inputs group. Reports that have at least one of place_id, patient_id, and patient_uuid at the top level will be associated with that contact.\nA typical form ends with a summary group (eg group_summary, or group_review) where important information is shown to the user before they submit the form.\nIn between the inputs and the closing group is the form flow - a collection of questions that can be grouped into pages. All data fields submitted with a form are stored, but often important information that will need to be accessed from the form is brought to the top level. To make sure forms are properly associated to a contact, make sure at least one of place_id, patient_id, and patient_uuid is stored at the top level of the form.\nSee Also: Content and Layout\nXLSForm Since writing raw XML can be tedious, we suggest creating the forms using the XLSForm standard, and using the medic-conf command line configurer tool to convert them to XForm format.\n   type name label relevant appearance calculate \u0026hellip;     begin group inputs Inputs ./source = \u0026lsquo;user\u0026rsquo; field-list     hidden source        hidden source_id        begin group contact        db:person _id Patient ID  db-object     string patient_id Medic ID  hidden     string name Patient Name  hidden     end group         end group         calculate _id    ../inputs/contact/_id    calculate patient_id    ../inputs/contact/patient_id    calculate name    ../inputs/contact/name    \u0026hellip;         begin group group_summary Summary  field-list summary     note r_patient_info **${patient_name}** ID: ${r_patient_id}       note r_followup Follow Up \u0026lt;i class=\u0026quot;fa fa-flag\u0026rdquo;\u0026gt;\u0026lt;/i\u0026gt;       note r_followup_note ${r_followup_instructions}       end group          CHT XForm Widgets Some XForm widgets have been added or modified for use in the app:\n Bikram Sambat Datepicker: Calendar widget using Bikram Sambat calendar. Used by default for appropriate languages. Countdown Timer: A visual timer widget that starts when tapped/clicked, and has an audible alert when done. To use it create a string field with an appearance set to countdown-timer. The duration of the timer is the field\u0026rsquo;s value, which can be set in the XLSForm\u0026rsquo;s default column. If this value is not set, the timer will be set to 60 seconds. Contact Selector: Select a contact, such as a person or place, and save their UUID in the report. To use create a field of type db:{{contact_type}} (eg db:person, db:clinic) with appearance db-object. Rapid Diagnostic Test capture: Take a picture of a Rapid Diagnotistic Test and save it with the report. Works with rdt-capture Android application. To use create a string field with appearance mrdt-verify. Simprints registration: Register a patient with the Simprints biometric tool. To include in a form create a string field with appearance of simprints-reg. Requires the Simprints app connected with hardware, or mock app. Demo only, not ready for production since API key is hardcoded.  The code for these widgets can be found in the Medic repo.\nContact Selector Using a contact selector allows you to get data off the selected contact(person or place) or search for an existing contact.\nWhen using with the appearance column set to db-object. The contact selector will display as a search box allowing you to search for the type of contact specified when building the report. EX: db-person will only search for contacts with type of person.\nWhen used as a field you can pull the current contact. This is can be used to link reports to a person or place where you started the form from. Getting the data of _id or patient_id and setting those to patient_id or patient_uuid on the final report will link that report so it displays on their contact summary page.\nExample of getting the data from the contact and assigning it to the fields neccessary to link the report.\n   type name label relevant appearance calculate \u0026hellip;     begin group contact        db:person _id Patient ID  db-object     string patient_id Medic ID  hidden     string name Patient Name  hidden     end group         calculate patient_uuid Patient UUID   ../contact/_id    calculate patient_id Patient ID   ../contact/patient_id     CHT XPath Functions difference-in-months Calculates the number of whole calendar months between two dates. This is often used when determining a child\u0026rsquo;s age for immunizations or assessments.\nz-score In Enketo forms you have access to an XPath function to calculate the z-score value for a patient.\nUploading Binary Attachments Forms can include arbitrary binary data which is submitted and included in the doc as an attachment. If this is an image type it\u0026rsquo;ll then be displayed inline in the report UI.\nTo mark an element as having binary data add an extra column in the XLSForm called instance::type and specify binary in the element\u0026rsquo;s row.\nProperties The meta information in the {form_name}.properties.json file defines the form\u0026rsquo;s title and icon, as well as when and where the form should be available.\nforms/app/{form_name}.properties.json    property description required     title The form\u0026rsquo;s title seen in the app. Uses a localization array using the 2-letter code, not the translation keys discussed in the Localization section. yes   icon Icon associated with the form. The value is the image\u0026rsquo;s key in the resources.json file, as described in the Icons section yes   context The context defines when and where the form should be available in the app no   context.person Boolean determining if the form can be seen in the Action list for a person\u0026rsquo;s profile. This is still subject to the expression. no   context.place Boolean determining if the form can be seen in the Action list for a person\u0026rsquo;s profile. This is still subject to the expression. no   context.expression A JavaScript expression which is evaluated when a contact profile or the reports tab is viewed. If the expression evaluates to true, the form will be listed as an available action. The inputs contact, user, and summary are available. By default, forms are not shown on the reports tab, use \u0026quot;expression\u0026quot;: \u0026quot;!contact\u0026quot; to show the form on the Reports tab since there is no contact for this scenario. no    Code sample In this sample properties file, the associated form would only show on a person\u0026rsquo;s page, and only if their sex is unspecified or female and they are between 10 and 65 years old:\nforms/app/pregnancy.properties.json { \u0026#34;title\u0026#34;: [ { \u0026#34;locale\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;New Pregnancy\u0026#34; }, { \u0026#34;locale\u0026#34;: \u0026#34;hi\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;नई गर्भावस्था\u0026#34; } ], \u0026#34;icon\u0026#34;: \u0026#34;pregnancy-1\u0026#34;, \u0026#34;context\u0026#34;: { \u0026#34;person\u0026#34;: true, \u0026#34;place\u0026#34;: false, \u0026#34;expression\u0026#34;: \u0026#34;contact.type === \u0026#39;person\u0026#39; \u0026amp;\u0026amp; (!contact.sex || contact.sex === \u0026#39;female\u0026#39;) \u0026amp;\u0026amp; (!contact.date_of_birth || (ageInYears(contact) \u0026gt;= 10 \u0026amp;\u0026amp; ageInYears(contact) \u0026lt; 65))\u0026#34; } } Build Convert and build the app forms into your application using the convert-app-forms and upload-app-forms actions in medic-conf.\nmedic-conf --local convert-app-forms upload-app-forms  ","excerpt":"App forms are used for care guides within the web app, whether accessed in browser or via the …","ref":"/beta/apps/reference/forms/app/","title":"app"},{"body":"The settings which control CHT apps are defined in the app_settings.json file, and stored in the settings doc in the database. Some settings can be modified in the App Management app, which updates the same settings file in the database.\nThe app_settings.json file can be manually edited to modify individual settings. The code for some components, like tasks and targets, gets compiled into this file with the compile-app-settings action in the medic-conf tool.\nMost sections are described on their own in the Reference Documentation.\nBuild To include your settings into your app, you must compile them to include modular components, then upload them to your instance.\nmedic-conf --local compile-app-settings backup-app-settings upload-app-settings   Optional Settings The following settings do not need to be specified. They should only be defined when the default implementation needs to be changed.\napp_settings.json    Setting Description Default Version     phone_validation \u0026quot;full\u0026rdquo;: full validation of a phone number for a region using length and prefix information.\u0026quot;partial\u0026rdquo;: quickly guesses whether a number is a possible phone number by using only the length information, much faster than a full validation.\u0026quot;none\u0026rdquo;: allows almost any values but still fails for any phone that contains a-z chars. \u0026ldquo;full\u0026rdquo; 3.1.0   uhc.contacts_default_sort \u0026quot;alpha\u0026rdquo;: Sort contacts alphanumerically\u0026quot;last_visited_date\u0026rdquo;: sort contacts by the date they were most recently visited. \u0026ldquo;alpha\u0026rdquo; 2.18.0   uhc.visit_count.month_start_date The date of each month when the visit count is reset to 0. 1 2.18.0   uhc.visit_count.visit_count_goal The monthly visit count goal. 0 2.18.0   outgoing_deny_list All outgoing messages will be denied (unsent) if the recipient phone number starts with an entry in this list. A comma delimited list. (eg. outgoing_deny_list=\u0026quot;253,ORANGE\u0026quot; will deny all messages sent to 253 543 4448 and ORANGE NET) \u0026quot;\u0026rdquo;    outgoing_deny_shorter_than Deny all messages to recipient phone numbers which are shorter than this value. Intended to avoid message loops with short codes used by gateways (eg. 60396). An integer. 6 3.3.0   outgoing_deny_with_alphas When true, deny all messages to recipient phone numbers containing letters (eg. Safaricom). Intended to avoid message loops with non-numeric senders used by gateways. A boolean. true 3.3.0   outgoing_deny_with_alphas When true, deny all messages to recipient phone numbers containing letters (eg. Safaricom). Intended to avoid message loops with non-numeric senders used by gateways. A boolean. true 3.3.0   task_day_limit The number of days before a task is due to show the due date. 4 3.9.0    SMS Workflows Workflows involving SMS are configured by defining schedules, registrations, and patient reports. Schedules of automated messages can be sent from the server at specificied times in the future, and reports can be associated to contacts.Forms can also be configured to clear the schedule, or silence it for a period of time.\nVariables Outgoing messages can use Mustache templating to insert variables and specify data formats.\nAll the fields on the report doc are available as variables. Additionally, the contact variable is the sender of the report.\nCode sample The following translation label includes the name field of contact, along with the submitted patient_name field, and the generated patient_id field.\ntranslations/messages-en.properties messages.registration.report_accepted = Thank you {{contact.name}} for registering {{patient_name}}. Their ID is {{patient_id}}. Date Format Filters The following filter functions are available for formating dates.\n   filter description     date Displays dates according to the date_format specified in app_settings. See doc for Moment.js format for details.   datetime Displays dates according to the reported_date_format specified in app_settings. See doc for Moment.js format for details.   bikram_sambat_date Displays dates in Bikram Sambat calendar (most commonly used calendar in Nepal). Currently display format is hardcoded to e.g. \u0026ldquo;१५ चैत २०७३\u0026rdquo;.    Validations Validation rules are code fragments used to determine if some input is valid. For example, to say a field is only valid if the value has at least five characters, you would use the lenMin(5). They are used in registrations[].validations.list[].rule and patient_reports[].validations.list[].rule to determine if an incoming report is accepted. A report is accepted as valid only if all rules return true. If any validation rule returns false then the report is marked as invalid, and a message is automatically sent to the submitter. The content for the message is set in the translation_key associated to each rule. If a report fails multiple validations then each message will be sent. These can be combined into a single SMS by specifying \u0026quot;*.validations.join_responses\u0026quot; : true.\nOperators The available operators are:\n   Operator Description     \u0026amp;\u0026amp; and   || or   ! not   a ? b : c ternary, ie: if \u0026lsquo;a\u0026rsquo; is true, then check \u0026lsquo;b\u0026rsquo;, otherwise check \u0026lsquo;c\u0026rsquo;   () nested blocks, eg: \u0026lsquo;a \u0026amp;\u0026amp; (b    Rules Validation settings may consist of Pupil.js rules and rules specific to Medic Mobile. These two types of rules cannot be combined as part of the same rule.\nNot OK: rule: \u0026quot;regex(\\d{5}) \u0026amp;\u0026amp; unique('patient_id')\u0026quot;\nOK: rule: \u0026quot;regex(\\d{5}) \u0026amp;\u0026amp; max(11111)\u0026quot;\nIf for example you want to validate that patient_id is 5 numbers and it is unique (or some other custom validation) you need to define two validation configs/separate rules in your settings. Example validation settings:\n[ { property: \u0026quot;patient_id\u0026quot;, rule: \u0026quot;regex(\\d{5})\u0026quot;, message: [{ content: \u0026quot;Patient ID must be 5 numbers.\u0026quot;, locale: \u0026quot;en\u0026quot; }] }, { property: \u0026quot;patient_id\u0026quot;, rule: \u0026quot;unique('patient_id')\u0026quot;, message: [{ content: \u0026quot;Patient ID must be unique.\u0026quot;, locale: \u0026quot;en\u0026quot; }] } ] validate() modifies the property value of the second item to patient_id_unique so that pupil.validate() still returns a valid result. Then we process the result once more to extract the custom validation results and error messages.\nPupil.js validation functions Available validation functions are available at https://www.npmjs.com/package/pupil#validation-functions\nThe following functions are available by default:\n   Function Description     equals Comparison   iEquals Case insensitive comparison   sEquals Type sensitive equals   siEquals Type sensitive case insensitive equals   lenMin Minimum length   lenMax Maximum length   lenEquals Exact length   min Minimum value   max Maximum value   between Minimum and maximum value   in One of the provided values   required Must have a value   optional Always valid   numeric Numbers only   integer Integer numbers only   alpha Letters only   alphaNumeric Numbers and letters only   email Email address format   regex A custom regular expression   equalsTo Compare to another field by its key    Sample usage For case-insensitive comparison iEquals function in Pupil, And you can use || for logical OR : https://www.npmjs.com/package/pupil#rule-strings\nSo you can do this : rule: 'iEquals(\u0026quot;mary\u0026quot;) || iEquals(\u0026quot;john\u0026quot;)' matches \u0026ldquo;mary\u0026rdquo;, \u0026ldquo;Mary\u0026rdquo;, \u0026ldquo;john\u0026rdquo;, \u0026ldquo;John\u0026rdquo;, \u0026ldquo;JOhN\u0026rdquo;, etc. Not \u0026ldquo;maryjohn\u0026rdquo;\nCHT validation functions    Function Description     unique(*fields) Returns true if no existing valid report has the same value for all of the listed fields. Fields are compared to those at the top level and within fields for every report doc. To include the form type use 'form' as one of the fields. Eg uniqueWithin('form', 'patient_id', '1 week') checks that the same report wasn\u0026rsquo;t submitted for this patient in the past week.   uniqueWithin(*fields, time_period) Same as unique but the last argument is the time period in which to search. Eg uniqueWithin('form', 'patient_id') checks that this report was never submitted for this patient.   exists(form_id, field) Returns true if a report matches the form_id and value for field. This is useful to check that a patient was registered for a service before reporting about it. Eg exists('REG', 'patient_id') checks that a REG form was already submitted for a patient. As of 2.12 most uses of this function are obsolete because checking for a valid patient_id is done automatically by the accept_patient_report transition using registration_not_found in the messages.event_type.   isISOWeek(weekFieldName[, yearFieldName]) Returns true if the current report has a week value that is less or equal to the number of ISO weeks of the current year or the year value of the same report. The first parameter is the field name for the week and the second parameter is the field name for the year: isISOWeek('week', 'year'). If the second parameter is not specified, then the current year is used: isISOWeek('week').    ","excerpt":"The settings which control CHT apps are defined in the app_settings.json file, and stored in the …","ref":"/beta/apps/reference/app-settings/","title":"app_settings.json"},{"body":"ODK XForms are used to render forms in the Medic Collect Android app. These forms cannot use any Medic-specific XForm notations. All Medic Collect forms are processed as SMS (even when submitted over a wifi) therefore a corresponding JSON form with matching fields is used to interpret the incoming report.\nCollect forms must be in the forms/collect folder to be processed by medic-conf\u0026lsquo;s convert-collect-forms and upload-collect-forms actions. Once uploaded to the server, they can be downloaded by the Medic Collect app. These forms can also be included in Medic Collect builds for users without a data connection to get forms.\nXForms require a couple minor changes to be compatible with Medic Collect so that they can properly be received by a Medic instance. The changes can be done either manually in the XForm\u0026rsquo;s XML, or automatically with XLSForm forms using medic-conf.\nAutomatic changes with XLSForms If using a XLSForm and using medic-conf to convert to XForm, the necessary fields will be automatically added to the resulting XForm. You can override the default prefix and separator by declaring sms_keyword and sms_seperator respectively in the Settings tab.\nManual changes in XForm Collect forms need prefix and delimiter values added to the XForm\u0026rsquo;s XML. This is done where the form ID is declared in the instance\u0026rsquo;s data model. For example, the following:\n\u0026lt;instance\u0026gt; \u0026lt;data id=\u0026quot;myform\u0026quot; \u0026gt; ... becomes:\n\u0026lt;instance\u0026gt; \u0026lt;data id=\u0026quot;myform\u0026quot; prefix=\u0026quot;J1!FORM_CODE!\u0026quot; delimiter=\u0026quot;#\u0026quot;\u0026gt; ... Note that FORM_CODE should be replaced with the form code as defined in the JSON forms version of the form. If the form code is ABCD the prefix value would be J1!ABCD!, resulting in prefix=\u0026quot;J1!ABCD!\u0026quot;. In case you are curious, the J1 lets the Medic Mobile server know that version 1 of the JavaRosa parser should be used on the incoming SMS.\n","excerpt":"ODK XForms are used to render forms in the Medic Collect Android app. These forms cannot use any …","ref":"/beta/apps/reference/forms/collect/","title":"collect"},{"body":"Contact forms are used for the creation and editing of each contact. The type associated to people is person, and there are three types of places corresponding to levels in the app: district_hospital \u0026gt; health_center \u0026gt; clinic. The display names for the place levels can be changed via custom translations, and wherever they are defined in the contact forms. Each contact type has its own XForm where it defines the fields that it wants to store/edit for the contact:\n- /forms/contact/person-create.xml - /forms/contact/person-edit.xml - /forms/contact/clinic-create.xml - /forms/contact/clinic-edit.xml - /forms/contact/health_center-create.xml - /forms/contact/health_center-edit.xml - /forms/contact/district_hospital-create.xml - /forms/contact/district_hospital-edit.xml  To create the above XForm files it is recommended to use XLSForms. Also, if the contact forms will be similar for all places, you can use a PLACE_TYPE-create.xlsx file for creation, a PLACE_TYPE-edit.xlsx for editing, and have medic-conf generate the individual forms. For this you would also need forms/contact/places.json, where you would define the place names. From the XLSForm you can refer to the place type with PLACE_TYPE, and the place name with PLACE_NAME. You can even use the place type for conditional behaviour in the form. The base files needed would therefore be:\n- /forms/contact/person-create.xlsx - /forms/contact/person-edit.xlsx - /forms/contact/PLACE_TYPE-create.xlsx - /forms/contact/PLACE_TYPE-edit.xlsx - /forms/contact/places.json  Here is an example of a places.json files:\n{ \u0026quot;clinic\u0026quot;: \u0026quot;Village Clinic\u0026quot;, \u0026quot;health_center\u0026quot;: \u0026quot;Health Center\u0026quot;, \u0026quot;district_hospital\u0026quot;: \u0026quot;District Hospital\u0026quot; }  Convert and build the contact forms into your application using the convert-contact-forms and upload-contact-forms actions in medic-conf.\n medic-conf --local convert-contact-forms upload-contact-form\n ","excerpt":"Contact forms are used for the creation and editing of each contact. The type associated to people …","ref":"/beta/apps/reference/forms/contact/","title":"contact"},{"body":"Contact profile pages display basic information about the contact along with their history and upcoming tasks. A contact\u0026rsquo;s profile page is defined by the Fields, Cards, and Care Guides available.\nThe following variables are available:\n   variable description     contact Doc of the currently selected contact. This has minimal stubs for the contact.parent, so if you want to refer to a property on the parent use lineage below.   reports Array of reports for the contact.   lineage Array of the contacts parents (added in 2.13.0). lineage[0] is the parent, lineage[1] is the grandparent, etc. Each lineage entry has full information for the contact, so you can use lineage[1].contact.phone for example.   targetDoc Doc with target document of the contact, hydrated with the config information of every target it contains a value for. If there is no target document available (for example when viewing a contact that does not upload targets), this value will be undefined. This value might also be undefined if the contact has not yet synced the current target document. Added in 3.9.0.    Contact Summary Each field that can be shown on a contact\u0026rsquo;s profile is defined as an object in the fields array of contact-summary.templated.js. The properties for each object determine how and when the field is shown.\ncontact-summary.templated.js .fields[]    property type description required     label string A translation key which is shown with the field. yes   icon string The name of the icon to display beside this field, as defined through the Configuration \u0026gt; Icons page. no   value string The value shown for the field. yes   filter string The display filter to apply to the value, eg: { value: '2005-10-09', filter: 'age' } will render as \u0026ldquo;11 years\u0026rdquo;. Common filters are: age, phone, weeksPregnant, relativeDate, relativeDay, fullDate, simpleDate, simpleDateTime, lineage, resourceIcon, translate. For the complete list of filters, and more details on what each does, check out the code in medic/webapp/src/js/filters dir. no   width integer The horizontal space for the field. Common values are 12 for full width, 6 for half width, or 3 for quarter width. Default 12. no   translate boolean Whether or not to translate the value. Defaults to false. no   context object When translate: true and value uses translation variables, this value should provide the translation variables. no   appliesIf function() or boolean Return true if the field should be shown. no   appliesToType string[] Filters the contacts for which appliesIf will be evaluated. For example, ['person'] or ['clinic', 'health_center']. no    Condition Cards Each condition card is defined as a card object in the cards array of contact-summary.templated.js. The properties for each object determine how and when the card and its fields are shown.\ncontact-summary.templated.js .cards[]    property type description required     label translation key Label on top of card. yes   appliesToType string[] A filter, so appliesIf is called only if the contact\u0026rsquo;s type matches one or more of the elements. For example, ['person']. Please, note that ['report'] is also allowed to create a report card. But, you cannot use it in conjunction with a contact\u0026rsquo;s type. no   appliesIf function() or boolean Return true if the field should be shown. no   modifyContext function(context) Used to modify or add data which is passed as input to forms filled from the contact page. no   fields Array[] of fields The content of the card. yes   fields[n].appliesIf boolean or function(report) Same as Fields.appliesIf above.    fields[n].label string or function(report) Label shown with the field. yes   fields[n].icon string or function(report) The name of the icon to display beside this field, as defined through the Configuration \u0026gt; Icons page. no   fields[n].value string or function(report) The value shown for the field. yes   fields[n].filter string or function(report) The display filter to apply to the value, eg: { value: '2005-10-09', filter: 'age' } will render as \u0026ldquo;11 years\u0026rdquo;. Common filters are: age, phone, weeksPregnant, relativeDate, relativeDay, fullDate, simpleDate, simpleDateTime, lineage, resourceIcon, translate. For the complete list of filters, and more details on what each does, check out the code in medic/webapp/src/js/filters dir. no   fields[n].width integer or function(report) The horizontal space for the field. Common values are 12 for full width, 6 for half width, or 3 for quarter width. Default 12. no   fields[n].translate boolean or function(report) Whether or not to translate the value. Defaults to false. no   fields[n].context object When translate: true and value uses translation variables, this value should provide the translation variables. Only supports properties count and total on cards. no    Care Guides Each care guide accessible from a contact profile is defined as an App Form. Context information can be provided to forms via the context object of contact-summary.templated.js.\nTo show an App Form on a contact\u0026rsquo;s profile, the form\u0026rsquo;s expression field in its properties file must evaluate to true for that contact. The context infomation from the profile is accessible as the variable summary.\nThe context data is also available directly within the app forms\u0026rsquo; XForm calculations, as instance('contact-summary')/context/${variable}. For instance if context.is_pregnant is used in the contact summary, it can be accessed in an XForm field\u0026rsquo;s calculation as instance('contact-summary')/context/is_pregnant. Note that these fields are not available when editing a previously completed form, or when accessing the form from outside of the profile page.\nCode samples The following samples show how fields, cards, and care guide context comes together in the contact-summary.templated.js file.\ncontact-summary.templated.js module.exports = { context: { use_cases: { anc: isCoveredByUseCaseInLineage(lineage, \u0026#39;anc\u0026#39;), pnc: isCoveredByUseCaseInLineage(lineage, \u0026#39;pnc\u0026#39;), }, }, fields: [ { appliesToType:\u0026#39;person\u0026#39;, label:\u0026#39;patient_id\u0026#39;, value:contact.patient_id, width: 4 }, { appliesToType:\u0026#39;person\u0026#39;, label:\u0026#39;contact.age\u0026#39;, value:contact.date_of_birth, width: 4, filter: \u0026#39;age\u0026#39; }, { appliesToType:\u0026#39;person\u0026#39;, label:\u0026#39;contact.parent\u0026#39;, value:lineage, filter: \u0026#39;lineage\u0026#39; }, { appliesToType:\u0026#39;!person\u0026#39;, appliesIf:function() { return contact.parent \u0026amp;\u0026amp; lineage[0]; }, label:\u0026#39;contact.parent\u0026#39;, value:lineage, filter:\u0026#39;lineage\u0026#39; }, ], cards: [ { label: \u0026#39;contact.profile.pregnancy\u0026#39;, appliesToType: \u0026#39;report\u0026#39;, appliesIf: extras.isActivePregnancy, fields: [ { label: \u0026#39;contact.profile.edd\u0026#39;, value: function(r) { return r.fields.edd_8601; }, filter: \u0026#39;relativeDay\u0026#39;, width: 12 }, { label: \u0026#39;contact.profile.visit\u0026#39;, value: \u0026#39;contact.profile.visits.of\u0026#39;, translate: true, context: { count: function(r) { return extras.getSubsequentVisits(r).length; }, total: 4, }, width: 6, }, { label: \u0026#39;contact.profile.risk.title\u0026#39;, value: function(r) { return extras.isHighRiskPregnancy(r) ? \u0026#39;high\u0026#39;:\u0026#39;normal\u0026#39;; }, translate: true, width: 5, icon: function(r) { return extras.isHighRiskPregnancy(r) ? \u0026#39;risk\u0026#39; : \u0026#39;\u0026#39;; }, }, ], modifyContext: function(ctx) { ctx.pregnant = true; // don\u0026#39;t show Create Pregnancy Report button  }, }, ], }; contact-summary-extras.js module.exports = { isActivePregnancy : function (r) { // ...  }, isCoveredByUseCaseInLineage: function(lineage, usecase) { // ...  }, isHighRiskPregnancy: function(pregnancy) { // ...  }, getSubsequentVisits: function (r) { // ...  }, }; Build To update the Contact profiles for an app, changes must be compiled into app-settings, then uploaded.\nmedic-conf --local compile-app-settings backup-app-settings upload-app-settings\n","excerpt":"Contact profile pages display basic information about the contact along with their history and …","ref":"/beta/apps/reference/contact-page/","title":"contact-summary.templated.js"},{"body":" “It’s all about training them. The Community Health Workers are just villagers and farmers, so it’s training and more training.”\n About Paul has worked at BRAC for two years. He’s very focused on his career and has lots of IT projects running. He is responsible for training the branches on how to use the mobile phones. Right now Paul is looking for the right quality of phones. He also wants to understand how the database will ensure reliable syncing.\nValues  Critical thinker Strong communication skills Integrity Creativity Accuracy and attention to detail Problem solving skills Team player  Responsibilities  Collating health system data from the field Verifying data for accuracy and completeness Aggregating data and providing reports to nurses, supervisors, and health system officials with raw numbers and trends on key metrics Designing and maintaining data systems and databases Using statistical tools to interpret data sets Preparing reports that effectively communicate trends, patterns and interesting observations  Needs  Accurate data reported by CHWs and verified by CHW Supervisors Systems that check the completeness of data Access to statistical tools Robust systems that can handle large data sets  Motivations  Helping the organisation to make data driven decisions Employing new skills learnt from colleagues  Strengths and Assets  Statistical expertise Presentation skills Data visualization techniques Methodological  ","excerpt":"“It’s all about training them. The Community Health Workers are just villagers and farmers, so it’s …","ref":"/beta/design/personas/data-manager-paul/","title":"Data Manager, Paul"},{"body":"","excerpt":"","ref":"/beta/design/","title":"Design System"},{"body":"","excerpt":"","ref":"/beta/core/faq/","title":"Frequently Asked Questions"},{"body":"Messaging is a quick way to coordinate with other health workers. The Messages tab allows users to send a SMS message to any person or group of people in the app. Common uses of messages include asking questions, coordinating care logistics, providing encouragement or confirming training times.\nThe main list is a combination of both outgoing and incoming messages. Messages exchanged with the same person or group are organized into a thread, similar to messages in a phone’s messaging app.\nThe features on the Messages tab are best supported on desktop and most often used by someone in a supervisor role.\nMain List   On the main list of messages, the first line of bold text is the name and / or phone number of the sender. The second line is an excerpt from the most recent message, and the third line, if applicable, is the place(s) that the sender belongs to.\nIn the upper right corner, a timestamp displays when the most recent message was sent. An unread message is indicated by a blue line and bold blue timestamp. Messages are sorted by date with the most recent at the top of the list.\nTo send a new message that starts a brand new conversation thread, select the “Send Message +” button at the bottom of the screen. On the new message screen, enter the phone number you would like to send the message to or select a person in the app from the drop-down list. Then, type out your message text. Detail Page   Clicking on a message in the main list will take you to a detail tab where you can see the full text of the conversation. Underneath each individual message in the conversation, you will see the message status which tells you whether or not the message was successfully delivered or received and at what time.\nTo reply to a message, tap or click in the box at the bottom of the conversation that says “Reply to…” and start typing. Each message is limited to 160 characters but you may send more than one message if necessary.\nIt is also possible to configure auto-responses and for schedules of personalized, automated messages to be triggered upon submission of a form (e.g., a pregnancy registration triggers a schedule of personalized Antenatal care messages). ","excerpt":"Messaging is a quick way to coordinate with other health workers. The Messages tab allows users to …","ref":"/beta/apps/features/messaging/","title":"Messaging"},{"body":"All targets are defined in the targets.js file as an array of objects according to the Targets schema defined below. Each object corresponds to a target widget that shows in the app. The order of objects in the array defines the display order of widgets on the Targets tab. The properties of the object are used to define when the target should appear, what it should look like, and the values it will display.\nSee Also: Targets Overview\ntargets.js    property type description required     id string An identifier for the target. Used for querying task completeness. yes, unique   icon string The icon to show alongside the task. Should correspond with a value defined in resources.json. no   translation_key translation key Translation key for the title of this target. no, but recommended   subtitle_translation_key translation key Translation key for the subtitle of this target. If none supplied the subtitle will be blank. no   percentage_count_translation_key translation key Translation key for the percentage value detail shown at the bottom of the target, eg \u0026ldquo;(5 of 6 deliveries)\u0026quot;. The translation context has pass and total variables available. If none supplied this defaults to targets.count.default. no   context string A string containing a JavaScript expression. This widget will only be shown if the expression evaluates to true. Details of the current user is available through the variable user. no   type 'count' or 'percent' The type of the widget. yes   goal integer For targets with type: 'percent', an integer from 0 to 100. For type: 'count', any positive number. If there is no goal, put -1. yes   appliesTo 'contacts' or 'reports' Do you want to count reports or contacts? This attribute controls the behavior of other attributes herein. yes   appliesToType If appliesTo: 'reports', an array of form codes. If appliesTo: 'contacts', an array of contact types. Filters the contacts or reports for which appliesIf will be evaluated. For example, ['person'] or ['clinic', 'health_center']. For example, ['pregnancy'] or ['P', 'pregnancy']. no   appliesIf function(contact, report) If appliesTo: 'contacts', this function is invoked once per contact and report is undefined. If appliesTo: 'reports', this function is invoked once per report. Return true to count this document. For type: 'percent', this controls the denominator. no   passesIf function(contact, report) For type: 'percent', return true to increment the numerator. yes, if type: 'percent'. Forbidden when groupBy is defined.   date 'reported' or 'now' or function(contact, report) When 'reported', the target will count documents with a reported_date within the current month. When 'now', target includes all documents. A function can be used to indicate when the document should be counted. Default is 'reported'. no   idType 'report' or 'contact' or function(contact, report) The target\u0026rsquo;s values are incremented once per unique ID. To count individual contacts that have one or more reports that apply, use 'contact'. Use 'report' to count all reports, even if there are multiple that apply for a single contact. If you need more than a single count for each applying contact or report then a custom function can be used returning an array with unique IDs — one element for each count. no   groupBy function(contact, report) returning string Allows for target ids to be aggregated and scored in groups. Not required for most targets. Use with passesIfGroupCount. no   passesIfGroupCount object The criteria to determine if the target ids within a group should be counted as passing yes when groupBy is defined   passesIfGroupCount.gte number The group should be counted as passing if the number of target ids in the group is greater-than-or-equal-to this value yes when groupBy is defined   dhis object or object[] Settings relevant to the DHIS2 Integration no   dhis[n].dataElement string The hash id of a data element configured in the DHIS2 data set you\u0026rsquo;re integrating with yes   dhis[n].dataSet string The hash id of the data set that contains the data element you\u0026rsquo;re integrating with. If this is left undefined, the data element will appear in all data sets. no   visible boolean Whether the target is visible in the targets page. Default: true no   aggregate boolean As of 3.9, defines whether the target will be displayed on the TargetAggregates page no    Code Samples This sample targets.js generates three widgets, and uses functions written in the targets-extras.js file.\ntargets.js const { isHealthyDelivery, countReportsSubmittedInWindow } = require(\u0026#39;./targets-extras\u0026#39;); module.exports = [ // BIRTHS THIS MONTH  { id: \u0026#39;births-this-month\u0026#39;, type: \u0026#39;count\u0026#39;, icon: \u0026#39;infant\u0026#39;, goal: -1, translation_key: \u0026#39;targets.births.title\u0026#39;, subtitle_translation_key: \u0026#39;targets.this_month.subtitle\u0026#39;, appliesTo: \u0026#39;reports\u0026#39;, appliesIf: isHealthyDelivery, date: \u0026#39;reported\u0026#39;, }, // % DELIVERIES ALL TIME WITH 1+ VISITS  { id: \u0026#39;delivery-with-min-1-visit\u0026#39;, type: \u0026#39;percent\u0026#39;, icon: \u0026#39;nurse\u0026#39;, goal: 100, translation_key: \u0026#39;targets.delivery_1_visit.title\u0026#39;, subtitle_translation_key: \u0026#39;targets.all_time.subtitle\u0026#39;, appliesTo: \u0026#39;reports\u0026#39;, idType: \u0026#39;report\u0026#39;, appliesIf: isHealthyDelivery, passesIf: function(c, r) { var visits = countReportsSubmittedInWindow(c.reports, antenatalForms, r.reported_date - MAX_DAYS_IN_PREGNANCY*MS_IN_DAY, r.reported_date); return visits \u0026gt; 0; }, date: \u0026#39;now\u0026#39;, }, { id: \u0026#39;2-home-visits-per-family\u0026#39;, icon: \u0026#39;home-visit\u0026#39;, type: \u0026#39;percent\u0026#39;, goal: 100, translation_key: `target.2-home-visits-per-family`, context: \u0026#39;user.role === \u0026#34;chw\u0026#34;\u0026#39;, date: \u0026#39;reported\u0026#39;, appliesTo: \u0026#39;contacts\u0026#39;, appliesToType: \u0026#39;person\u0026#39;, idType: contact =\u0026gt; { // Determines the target ids which will be in the group.  // eg. \u0026#34;family1~2000-02-15\u0026#34; and \u0026#34;family1~2000-02-16\u0026#34;  const householdVisitDates = new Set(contact.reports.map(report =\u0026gt; toDateString(report.reported_date))); const familyId = contact.contact.parent._id; return Array.from(householdVisitDates).map(date =\u0026gt; `${familyId}~${date}`); }, groupBy: contact =\u0026gt; contact.contact.parent._id, passesIfGroupCount: { gte: 2 }, } ] targets-extras.js module.exports = { isHealthyDelivery(c, r) { return r.form === \u0026#39;D\u0026#39; || (r.form === \u0026#39;delivery\u0026#39; \u0026amp;\u0026amp; r.fields.pregnancy_outcome === \u0026#39;healthy\u0026#39;); }, countReportsSubmittedInWindow(reports, form, start, end) { var reportsFound = 0; reports.forEach(function(r) { if (form.indexOf(r.form) \u0026gt;= 0) { if (r.reported_date \u0026gt;= start \u0026amp;\u0026amp; r.reported_date \u0026lt;= end) { reportsFound++; } } }); return reportsFound; }, }; Build To build your targets into your app, you must compile them into app-settings, then upload them to your instance.\nmedic-conf --local compile-app-settings backup-app-settings upload-app-settings\n","excerpt":"All targets are defined in the targets.js file as an array of objects according to the Targets …","ref":"/beta/apps/reference/targets/","title":"targets.js"},{"body":"Tasks are configured in the tasks.js file. This file is a JavaScript module which defines an array of objects conforming to the Task schema detailed below. When defining tasks, all the data about contacts on the device (both people and places) along with all their reports are available. Tasks are available only for users of type \u0026ldquo;restricted to their place\u0026rdquo;. Tasks can pull in fields from reports and pass data as inputs to the form that opens when the task is selected, enabling richer user experiences.\nSee Also: Tasks Overview\ntasks.js    property type description required     name string A unique identifier for the task. Used for querying task completeness. yes, unique   icon string The icon to show alongside the task. Should correspond with a value defined in resources.json. no   title translation key The title of the task (labeled above). yes   appliesTo 'contacts' or 'reports' Do you want to emit one task per report, or one task per contact? This attribute controls the behavior of other properties herein. yes   appliesIf function(contact, report) If appliesTo: 'contacts', this function is invoked once per contact and report is undefined. If appliesTo: 'reports', this function is invoked once per report. Return true if the task should appear for the given documents. no   appliesToType string[] Filters the contacts or reports for which appliesIf will be evaluated. If appliesTo: 'reports', this is an array of form codes. If appliesTo: 'contacts', this is an array of contact types. For example, ['person'] or ['clinic', 'health_center']. For example, ['pregnancy'] or ['P', 'pregnancy']. no   contactLabel string or function(contact, report) Controls the label describing the subject of the task. Defaults to the name of the contact (contact.contact.name). no   resolvedIf function(contact, report, event, dueDate) Return true to mark the task as \u0026ldquo;resolved\u0026rdquo;. A resolved task uses memory on the phone, but is not displayed. yes   events object[] An event is used to specify the timing of the task. yes   events[n].id string A descriptive identifier. Used for querying task completeness. yes, unique   events[n].days integer Number of days after the doc\u0026rsquo;s reported_date that the event is due yes, if dueDate is not set   events[n].dueDate function(event, contact, report) Returns a Date object for the day when this event is due. yes, if days is not set   events[n].start integer Number of days to show the task before it is due. yes   events[n].end integer Number of days to show the task after it is due. yes   actions object[] The actions (forms) that a user can access after clicking on a task. If you put multiple forms here, the user will see a task summary screen where they can select which action they would like to complete. yes   actions[n].type 'report' or 'contact' When 'report', the action opens the given form. When 'contact', the action redirects to a contact\u0026rsquo;s profile page. Defaults to \u0026lsquo;report\u0026rsquo;. no   actions[n].form string The code of the form that should open when you select the action. yes   actions[n].label translation key The label that should appear on the task summary screen if multiple actions are present. no   actions[n].modifyContent function (content, contact, report) Set the values on the content object to control the data which will be passed as inputs to the form which opens when the action is selected. no   priority object or function(contact, report) returning object of same schema Controls the \u0026ldquo;high risk\u0026rdquo; line seen above. no   priority.level high or medium Tasks that are high will display a high risk icon with the task. Default: medium. no   priority.label translation key Text shown with the task associated to the risk level. no    Code samples Basic task This sample tasks.js generates two postnatal-visit tasks for each delivery form. The tasks are due 7 and 14 days after the delivery report was submitted. Each task is displayed for 2 days before the due date and 2 days after the due date.\ntasks.js module.exports = [ { icon: \u0026#39;mother-child\u0026#39;, title: \u0026#39;task.postnatal_followup\u0026#39;, appliesTo: \u0026#39;reports\u0026#39;, appliesToType: [ \u0026#39;delivery\u0026#39; ], actions: [ { form: \u0026#39;postnatal_visit\u0026#39; } ], events: [ { days:7, start:2, end:2, }, { days:14, start:2, end:2, } ] } ]; Tasks with functions These samples show more complex tasks which use functions kepts in a separate nools-extras.js file\ntasks.js const extras = require(\u0026#39;./nools-extras\u0026#39;); const { isFormFromArraySubmittedInWindow } = extras; module.exports = [ // PNC TASK 1: If a home delivery, needs clinic tasks  { icon: \u0026#39;mother-child\u0026#39;, title: [ { locale:\u0026#39;en\u0026#39;, content:\u0026#39;Postnatal visit needed\u0026#39; } ], appliesTo: \u0026#39;reports\u0026#39;, appliesToType: [ \u0026#39;D\u0026#39;, \u0026#39;delivery\u0026#39; ], appliesIf: function(c, r) { return isCoveredByUseCase(c.contact, \u0026#39;pnc\u0026#39;) \u0026amp;\u0026amp; r.fields \u0026amp;\u0026amp; r.fields.delivery_code \u0026amp;\u0026amp; r.fields.delivery_code.toUpperCase() !== \u0026#39;F\u0026#39;; }, actions: [{ form:\u0026#39;postnatal_visit\u0026#39;, // Pass content that will be used within the task form  modifyContent: function(content, c, r) { content.delivery_place = \u0026#39;home\u0026#39;; } }], events: [ { days:0, start:0, end:4, } ], priority: { level: \u0026#39;high\u0026#39;, label: [ { locale:\u0026#39;en\u0026#39;, content:\u0026#39;Home Birth\u0026#39; } ], }, resolvedIf: function(c, r, event, dueDate) { // Resolved if there a visit report received in time window or a newer pregnancy  return r.reported_date \u0026lt; extras.getNewestDeliveryTimestamp(c) || r.reported_date \u0026lt; extras.getNewestPregnancyTimestamp(c) || isFormFromArraySubmittedInWindow(c.reports, extras.postnatalForms, Utils.addDate(dueDate, -event.start).getTime(), Utils.addDate(dueDate, event.end+1).getTime()); }, }, // Option 1a: Place-based task: Family survey when place is created, then every 6 months  { icon: \u0026#39;family\u0026#39;, title: \u0026#39;task.family_survey.title\u0026#39;, appliesTo: \u0026#39;contacts\u0026#39;, appliesToType: [ \u0026#39;clinic\u0026#39; ], actions: [ { form:\u0026#39;family_survey\u0026#39; } ], events: [ { id: \u0026#39;family-survey\u0026#39;, days:0, start:0, end:14, } ], resolvedIf: function(c, r, event, dueDate) { // Resolved if there a family survey received in time window  return isFormFromArraySubmittedInWindow(c.reports, \u0026#39;family_survey\u0026#39;, Utils.addDate(dueDate, -event.start).getTime(), Utils.addDate(dueDate, event.end+1).getTime()); }, }, // Regular check for infants  { icon: \u0026#39;infant\u0026#39;, title: \u0026#39;task.infant.title\u0026#39;, appliesTo: \u0026#39;contacts\u0026#39;, appliesToType: [ \u0026#39;person\u0026#39; ], actions: [ { form:\u0026#39;infant_assessment\u0026#39; } ], events: [ { id: \u0026#39;infant_asssessment-q1\u0026#39;, days:91, start:7, end:14, }, { id: \u0026#39;infant_asssessment-q2\u0026#39;, days:182, start:7, end:14, }, { id: \u0026#39;infant_asssessment-q3\u0026#39;, days:273, start:7, end:14, }, { id: \u0026#39;infant_asssessment-q4\u0026#39;, days:365, start:7, end:14, } ] }, // Option 2: Place-based task: Family survey every 6 months  { icon: \u0026#39;family\u0026#39;, title: \u0026#39;task.family_survey.title\u0026#39;, appliesTo: \u0026#39;contacts\u0026#39;, appliesToType: [ \u0026#39;clinic\u0026#39; ], appliesIf: extras.needsFamilySurvey, // function returns true if family doesn\u0026#39;t have survey in previous 6 months  actions: [ { form:\u0026#39;family_survey\u0026#39; } ], events: [ { id: \u0026#39;family-survey\u0026#39;, start:0, end:14, dueDate: extras.getNextFamilySurveyDate // function gets expected date of next family survey  } ], resolvedIf: function(c, r, event, dueDate) { // Resolved if there a family survey received in time window  return isFormFromArraySubmittedInWindow(c.reports, \u0026#39;family_survey\u0026#39;, Utils.addDate(dueDate, -event.start).getTime(), Utils.addDate(dueDate, event.end+1).getTime()); }, }, ] nools-extras.js module.exports = { isCoveredByUseCase: function (contact, usecase) { // ...  }, getNewestDeliveryTimestamp: function (c) { // ...  }, getNewestPregnancyTimestamp: function (c) { // ...  }, isFormFromArraySubmittedInWindow: function (reports, formsArray, startTime, endTime) { // ...  }, }; Build To build your tasks into your app, you must compile them into app-settings, then upload them to your instance.\nmedic-conf --local compile-app-settings backup-app-settings upload-app-settings\n","excerpt":"Tasks are configured in the tasks.js file. This file is a JavaScript module which defines an array …","ref":"/beta/apps/reference/tasks/","title":"tasks.js"},{"body":"Apps built with CHT Core are localized so that users can use it in the language of their choice. It is currently available in English, French, Hindi, Nepali, Spanish, and Swahili. The goal of this doc is to help our team manage these and future translations.\nOverview Like the rest of our code, the translation files live in our GitHub repo. These translation files are properties files, which are a series of keys and their corresponding values. We use the English file as our default, and as such contains the entire set of keys. If any key is missing from another language file the English value is used.\nIn order to collaboratively edit the translations we use POEditor.com. Translators can be given access to specific languages so that we can more effectively edit language text to be included in Medic Mobile. Once the text is ready it can be exported from POEditor to GitHub and included in the next release of our app.\nNote that \u0026ldquo;keys\u0026rdquo; in .properties files are referred to as terms in POEditor.\nAdding new languages New languages must be added and configured in several places:\n In GitHub  Create a new medic/translations/messages-XX.properties file, replacing XX with the 2 or 3 letter language code. Add the language to the LOCAL_NAME_MAP in api. Use the language code for the key, and the local name followed by the English name for the language in brackets, eg: \u0026ldquo;fr: \u0026lsquo;Français (French)'\u0026quot;. Import the moment language pack in the root app.js file. If moment doesn\u0026rsquo;t provide the required language pack you may need to contribute it upstream to the moment library.   In POEditor  In the Medic Mobile project, add the language Add translations for a new language in the POEditor app Export file from POEditor to GitHub, as described below    Adding new keys In order to trace the addition of new terms and also updates to existing translations, the default translation file (messages-en.properties) must be updated directly. Our GitHub repo provides with a command line tool (CLI) to import updates into the POEditor app. If you don\u0026rsquo;t have an API token, please contact a Medic Mobile developer, product manager, or CTO. Please do not disclose this API token to anyone else.\nTranslating static text All text in the app is internationalised.\n Pick a key.  First check if an appropriate key already exists in messages-en.properties (medic/config/standard/translations). Otherwise create a new key and default English value. Keys must be all lower case, dot separated, and descriptive but not verbose. The values should include as much text as possible (eg: trailing punctuation), and must not contain any markup. Don\u0026rsquo;t add any values for other languages as this will be done later in the POEditor app.   Use the translation. In angular this is done using angular-translate, and ideally using the translate directive to reduce the number of watchers, eg: \u0026lt;h3 translate\u0026gt;date.incorrect.title\u0026lt;/h3\u0026gt;.  Translating help pages Because help pages are too large to manage easily through the standard translation mechanism, and we want to include lots of markup, help pages are translated by providing md documents for each language. This isn\u0026rsquo;t yet up and running so ask for help.\nTranslating configurations Much of the app is configurable (eg: forms and schedules). Because the specifics of the configuration aren\u0026rsquo;t known during development time these can\u0026rsquo;t be provided via messages. Instead we allow configurers to provide a map of locale to value for each translated property. Then use the translateFrom filter to translate from the configured map using the user\u0026rsquo;s language.\nModifying any existing translation values To be done only by updating messages-en.properties, importing to POEditor through the CLI tool and updating the other language translations through the POEditor app.\nModifying or removing translation keys: To be done only by updating messages-en.properties and importing to POEditor through the CLI tool.\nExporting changes from POEditor to GitHub To be done only by exporting all translations through the CLI tool. If you don\u0026rsquo;t have an API token, please contact a Medic Mobile developer, product manager, or CTO. Please do not disclose this API token to anyone else.\n","excerpt":"Apps built with CHT Core are localized so that users can use it in the language of their choice. It …","ref":"/beta/core/overview/translations/","title":"How To Manage Translations"},{"body":"","excerpt":"","ref":"/beta/apps/tutorials/","title":"Step-by-Step Tutorials"},{"body":"Workflows can be defined within apps built with the Core Framework to connect actions and data with people. Forms are the main building block of tasks and messaging workflows, and are useful in creating reminders for follow-up visits or referrals.\nTasks   Tasks within the app can drive a workflow, ensuring that the right actions are taken for people at the right time. Tasks indicate a recommended action to the user. They indicate who the user should perform the action with, and the recommended timeframe of that action. When the user taps the task, they are directed to a form where the details of the action are captured.\nTasks can be triggered by a set of conditions, such as contact details or submitted reports. Tasks are accessible in the Tasks tab and the profile in the Contact tab, and initiate a follow up action to complete a form. More information on building app workflows is available in the Tasks section.\nData submitted in one form can generate several tasks at once, for example, multiple ANC visits following one pregnancy registration. Some workflows involve a series of sequential forms and tasks, such as a child health assessment form, a follow up task scheduled 48 hours later, a referral form (only if the child’s condition hasn’t improved), and then a referral follow up task. Tasks are accessible on the Tasks tab, as well as the Tasks section of profiles.\nSee Also: Defining Tasks\nSMS Messaging   Workflows can include notifications and interactions with CHWs, nurses, supervisors, and patients via SMS. A report can trigger SMS messages to be sent immediately or upon a set schedule. Responses via SMS or the app can update the workflows.\nInteroperability Workflows can incorporate other digital tools, such as a facility-based electronic medical record system for referral workflows. New contacts or reports can trigger an interoperabilty workflow using the outbound push feature. Data can be received as reports using the CHT API\n","excerpt":"Workflows can be defined within apps built with the Core Framework to connect actions and data with …","ref":"/beta/apps/concepts/workflows/","title":"Building Workflows"},{"body":"About App builders and technical organizations have in-house or contracted software developers. They deploy health technology solutions for implementing partners such an iNGOs, Governments, UN agencies etc in the community health space. They have limited familiarity with end-users such as CHWs and HCD.\nValues  Aligned with CHT principles and willing to contribute back to the CHT in the future Believe in building open-source technologies Integrity Likeable personality Open-mindedness Strong work ethic  Responsibilities  Build and deliver user experiences centered on the CHT Steward the CHT app developer’s experience CHT Capacity Builders Technical support Speak the language of the business  Needs  Capacity and expertise with the CHT Flexible technology (and tooling) to help build holistic digital health interventions  Motivations  Build awesome and bug-free user experiences using the CHT Adoption of the CHT as the technology of choice for building community health apps Delivering effective interventions Novel projects or interventions Developing skills  Strengths and Assets  Diversity in skills sets: HCD, software development, database management, dashboard development Resourcefulness: bend the CHT\u0026rsquo;s capabilities to meet a given need Passion for problem solving An inquisitive mind  ","excerpt":"About App builders and technical organizations have in-house or contracted software developers. They …","ref":"/beta/design/personas/app-builder/","title":"App Builders"},{"body":"The Core Framework requires a hierarchy to organize the information in the app. It is often based on the hierarchy of a health system within a particular geographic region.\nLarge deployment sites often need three or more levels of place hierarchy, while some small sites need fewer than three levels. For this reason, the Core Framework’s information hierarchies are configurable to meet a users needs.\nA user logging into their app will see a custom set of people, tasks, reports, and analytics based on the hierarchy level that they belong to. This allows appropriate data sharing based on the role of the user in the health system.\nThe information hierarchy is configured in the administration console. The hierarchy levels can be given different titles depending on a particular health system’s program or reporting structures.\nPlaces This is an example of a simple hierarchy that includes a CHW Supervisor area, CHW area, and families as levels which serve as “places” or units of organizing people.\nUser roles can be assigned to log in at any of these levels. For example, it would be customary for a CHW to log in at the CHW Area level and view the families, and below that the people, i.e. patients or family members, who belong there.\nPeople The hierarchy can be modeled after the health system, health program and/or the community. All people are associated with a place and these places can be associated to each other.\nFor example, a Family Member is part of a Family. A Family and CHWs are part of a CHW Area. A Family Member, a Family, and CHWs are part of a CHW Supervisor Area.\nAdditional hierarchy levels may be added as needed and each section of the hierarchy is configurable. For instance, many large projects have unbalanced hierarchies, which is to say, some parts of the hierarchy have more or different layers than others. The Admin level operates outside of the hierarchy structure and enables access to all levels and people within the hierarchy.\n","excerpt":"The Core Framework requires a hierarchy to organize the information in the app. It is often based on …","ref":"/beta/apps/concepts/hierarchy/","title":"Configurable Hierarchies"},{"body":"","excerpt":"","ref":"/beta/apps/guides/","title":"Quick Guides for Implementers"},{"body":"The Reports tab is where you can access submitted data. Depending on how often you anticipate a user needing to access this tab, you can configure it to show in the main tabs list (preferable for admin users) or in the secondary hamburger menu (preferably for CHW users).\nThe permissions set for your role and your placement in the hierarchy will determine which reports you’re able to see on this tab. As a rule, you can only view reports submitted by yourself or those below you in the hierarchy. Therefore, CHWs will only see reports that they submitted on this tab, while supervisors will see reports that they submitted as well as those submitted by their CHWs.\nMain List   The first line of bold text is the name of the person whom the report is about. The second line of text is the name of the report, and the third line of text is the hierarchy of place to which that person belongs. In the upper right corner, a timestamp displays when the report was submitted. Reports are sorted by submission date, with the most recent reports at the top. If a report is unread, the timestamp will be bold blue and there will be a horizontal blue line above it.\nApps built with the Core Framework have a “review” feature that allows managers to indicate whether a report has been reviewed and if it contains errors. If a manager has marked a report as “correct,” a green checkmark will show below the timestamp. If a report is marked as “has errors,” a red ‘X’ will show. This same icon is used for invalid SMS messages.\nFilters \u0026amp; Search   The toolbar at the top of the page includes filters and search to help users narrow down the list or search for and find a specific report. These filters are configurable and could include:\n Report Types (e.g. pregnancy registration, visits, delivery report) Places (e.g. districts, health centers or CHW areas) Date of Submission Status (e.g. not reviewed, has errors, correct, valid SMS, invalid SMS)  Using the search box, you can search for reports by patient name, phone number, ID number and more. To reset the filters or the search and view the full list of forms, click on the reset icon on the right side of the toolbar.\nAction Buttons   The action buttons at the bottom of the screen are configurable. Options include adding or completing a care guide, bulk select \u0026amp; export.\nClicking the “+” button opens a menu of forms a user can choose to complete. “Bulk Select,” represented by a checkmark icon within a circle, allows you to bulk select and delete multiple reports at a time.\nPlease Note: Bulk delete cannot be undone. If in doubt, do not delete! You can restrict a user’s access to this feature in the permissions for their role.\nClicking on the “Export” button will download a CSV file with all of the data from the reports.\nDetail Pages   You can click on any report to view a report detail page. Here you\u0026rsquo;ll find the name and phone number of the user who submitted the report as well as responses to the questions within it. If the report initiated a schedule of SMS messages, you will see the messages queued to send.\nThe buttons at the bottom are configurable. The ones you see will depend on your user role, permissions, and hierarchy.\n Send a Message​: Opens the Messages page to send a message to the person who submitted the report Review: Mark as “correct” or “has errors” Edit: Opens the form to edit it Delete: Deletes a report ( cannot be undone)  Defining Forms The reports shown in your app are the completed and submitted forms. These forms must be defined and included with the application. There are two types of form definitions for reports:\n App forms: actions within the app, such as a completed task, or an action on a contact\u0026rsquo;s profile or reports tab. App forms are defined as XForms. JSON forms: data coming from external channels such as SMS, or via interoperability with other tools. JSON forms are defined using a JavaScript Object Notation schema.  ","excerpt":"The Reports tab is where you can access submitted data. Depending on how often you anticipate a user …","ref":"/beta/apps/features/reports/","title":"Reports"},{"body":"Code Writing Where possible, follow our coding style guide.\nAim for self-documenting code. Where code cannot be made self-documenting add commenting. Usually comments are useful when they explain why some code exists, and should not be explaining what some code is doing.\nReviewing The author and reviewer should use this guide to code reviewing.\nTesting All features and bug fixes must have at least one unit test. All features must have at least one end-to-end test.\nMigrating When the schema is changed you must also provide a migration so when instances are upgraded existing data is compatible with the new code.\nCommits The main branch is master which must be kept stable so as not to impact other developers and so we can take a release branch as needed. To achieve this we do (almost) all development in a branch and submit a PR for code review. This means the CI runs and another developer has signed off on the change before it hits the master branch.\nFormat your commit messages according to Git standards. First line should be a short title/summary (50 characters or so) with more details in a separate paragraph, respecting 79 character line widths. Using git commit -v is recommended to review your diff while you write your commit message.\nSee tips on How to Write a Git Commit Message and add your favorites here.\n Every good commit message should be able to complete the following sentence:\nWhen applied, this commit will: {{YOUR COMMIT MESSAGE}}\n Never force push remote. Prefer rebasing over merging as it makes for a cleaner history.\nCommit reformats and refactors separately from actual code changes to make reviewing easier.\nFor more help with Git see: Using Git.\nBranches  The main branch is master and is the github default branch and contains the latest code. Release branches have the form \u0026lt;major\u0026gt;.\u0026lt;minor\u0026gt;.x and should be stable. Feature branches have the form \u0026lt;issue-number\u0026gt;-\u0026lt;issue-description\u0026gt; and are work in progress.  Note: When backporting changes to an earlier release branch you should git cherry-pick the appropriate commit(s) from master into the release branch. Then use a pull request to make sure tests pass on Travis before merging (you do not need to get the pull request approved if there were no conflicts when cherry-picking).\nIssues Issues are managed in Github. Issues should be created in the repository where the changes need to be made. If it is not clear in which repo to open an issue the default should be the medic repository. If it is a security or sensitive issue it should be opened in the private medic-projects repository.\nWhen creating issues add the appropriate Priority and Type labels.\nProject States When the issue is scheduled for development it will be added to the appropriate organisation project named after the webapp version it will be released with. Each column in the project represents the state the issue is in.\nTo do Issues in this column have been scheduled to be released with this webapp version. The issue has all the detail needed to begin design and development and it is free for anyone to start work on. If you start work on an issue assign it to yourself and move it to \u0026ldquo;In progress\u0026rdquo;.\nIn progress Issues in this column are being actively worked on, which includes development, design, and code reviews.\nAny code should be in a feature branch in each of the repositories you update. The name of the feature branch should be in the form \u0026lt;issue-number\u0026gt;-\u0026lt;readable-name\u0026gt;, for example 1104-inclusive-export. Once you\u0026rsquo;re satisfied with your changes:\n Submit a PR for each of the repositories. Each PR message and description will become the commit message and description so keep the message consise, describe what and why rather than how, and link to the issue in the description (eg: \u0026ldquo;medic/cht-core#123\u0026rdquo;). If AT is required update the issue with AT instructions. Wait for the builds to succeed and ensure there are no conflicts with the master branch so the PR can be merged. Pick at least one Reviewer for the PR and work with them until the code passes review. If the issue requires AT then move the issue to \u0026ldquo;Ready for AT\u0026rdquo; for QA to test. Otherwise merge the PR, delete the branch, and close the issue.  Ready for AT Issues in this column are ready to be acceptance tested by a Quality Assurance engineer. When picking up an issue for AT:\n Check that the PR has no merge conflicts with master and all required builds have passed. If not, notify the original developer to fix the branch and find another issue to AT. Assign it to yourself. Move it to the \u0026ldquo;AT in progress\u0026rdquo; column  AT in progress Issues in this column are in the process of being acceptance tested by a Quality Assurance engineer. To complete AT:\n Install the PR branch to test against. If the issue fails AT then notify the original developer and move the issue back to \u0026ldquo;In progress\u0026rdquo;. Once the issue passes AT move the issue to \u0026ldquo;Ready to merge\u0026rdquo; the notify the original developer to merge the PR.  Ready to merge Issues in this column have passed AT and can be merged as soon as possible. The original developer will then:\n Write a useful commit message in the PR. Click the button to \u0026ldquo;Squash and Merge\u0026rdquo; the PR. Delete the PR branch. If a backport is required cherry-pick the merged commit back to the release branches it\u0026rsquo;s required in. Close the issue. This will automatically move it to \u0026ldquo;Done\u0026rdquo;.  Done Issues in this column have passed acceptance testing and been merged into master and/or release branches ready for release.\nTriaging old issues We periodically run a script against medic issues. We do this to catch two situations:\n Issues that do not have the three labels they need (Type, Priority and Status) Issues that have not been touched in 90 days  The plan is to keep cruft in our issue DB to a minimum, and have them curated into a colletion of detailed clear issues that can and should be actionable in the near to mid future.\nYou will occasionally get assigned issues and asked to deal with one or both of the above problems.\nWhat do I do when I get one of these issues? Use your judgement (or someone else\u0026rsquo;s, feel free to pull in others either directly on the issue or via Slack etc) to decide:\n Is its description too vague? Is it detailed enough to be actionable? Is this something we want to do in the near future? Does it fit with our product etc? If this is an older issue, do you think it is still relevant? Is there still interest? (If there is no interest it can be closed: it can always be re-opened or re-written in the future) Is this covered by existing issues, or existing plans? If it\u0026rsquo;s a bug, does it have: steps to reproduce; expected behaviour; actual behaviour; server info, browser info, screenshots etc where applicable?  From this decide if you need to go back to the issue creator for more information, or close the issue (using one of the Won't Fix labels), or keep it.\nAdditionally, if there are missing labels:\n Type should be reasonably obvious: which of those labels most fits the issue Status should almost certainly be Status: 1 - Triaged Priority is dependent on the severity of the problem: if it\u0026rsquo;s a production issue it\u0026rsquo;s probably high, if it\u0026rsquo;s a minor thing it\u0026rsquo;s probably low, medium for everything else (but use your judgement)  Anything else? Regardless of what you do with the issue, please:\n Remove the Needs Triage label once triage is complete Document the reasoning by commenting in the issue. This will help reduce mistakes, as the reasoning will be available for everyone to read, and any mistakes there can be rectified.  Workflow for contributing to medic-docs Unlike the above development workflow, the workflow for contributing to medic-docs does not involve release management and Acceptance Testing. In order to streamline the process of contributing to docs while still maintaining quality, please submit a pull request with any changes to medic-docs. One of the repository\u0026rsquo;s maintainers will review the PR, request additional changes as needed, and merge the PR when it is ready.\nWhere possible, please follow our docs style guide.\n","excerpt":"Code Writing Where possible, follow our coding style guide.\nAim for self-documenting code. Where …","ref":"/beta/core/process/workflow/","title":"Development Workflow"},{"body":"","excerpt":"","ref":"/beta/apps/reference/","title":"Reference Documentation"},{"body":"CHT core Create an issue for either a Major/Minor or Patch release issue template and assign it to the release manager to follow the process.\nmedic-conf Follow the instructions in the readme.\nAndroid apps All medic Android projects automatically build, sign, and publish builds via Travis. To create a new release:\n Determine what version the build will be. This should be a valid semver (eg. v1.1.1). Increment the semver appropriately based on the latest release version:  medic-android medic-gateway medic-collect rdt-capture   Tag the commit in master which you\u0026rsquo;d like to release. Use git tag v1.1.1 with the version from above and then run git push --tags. Wait for the build to complete. You can monitor the build via travis-ci.org. To Release via the Google Play Store - Login to the Google Play Console and select the app flavor for release. Navigate to \u0026ldquo;Release Management \u0026gt; Alpha\u0026rdquo; and click \u0026ldquo;Release to Beta\u0026rdquo;. Repeat this for each flavor. To Side-Load (for Collect and Gateway) - Navigate to the GitHub Releases page (linked above) and download the relevant APKs for distribution.  ","excerpt":"CHT core Create an issue for either a Major/Minor or Patch release issue template and assign it to …","ref":"/beta/core/process/releasing/","title":"Releasing"},{"body":"Tasks help CHWs plan their day by prompting them to complete follow-up visits and other activities. The list might include upcoming scheduled ANC or Immunization visits, treatment or referral follow-ups, or other required activities such as a household survey.\nMain List   On the Tasks tab is a consolidated list of tasks for all people and families that the user looks after. The task definition determines how long the task will show on this list before and after it is due.\nEach task has an icon on the left side which indicates which type of task it is. The first bold line of text is the person or family that the task is about. The second line of text is the name of the task. The due date for the task is located in the upper right hand corner. If a task is overdue, the due date will be red.\nTasks are listed in order of due date. Tasks that are past due will appear at the top of the list. CHWs should strive to complete tasks before they are overdue. Many programs add targets to track task completion and timeliness.\nCare Guides When a CHW clicks on a task, the care guide configured for that task displays. CHWs are then guided through questions for that specific workflow.\n          For more information on Care Guides, see the “Decision Support for Care Guides” section of this overview.\nWhen the user completes the care guide, the task will be cleared from the Tasks tab, and the report will be accessible from the Reports page or on the profile of the person or place whom the report is about.\nProfile Page  Tasks are also accessed from a the People tab in the app.\nTasks for a particular person or place can be viewed on the contact’s profile in the “Tasks” section. Filters allow you to choose how many tasks you’d like to view for each due date.\n","excerpt":"Tasks help CHWs plan their day by prompting them to complete follow-up visits and other activities. …","ref":"/beta/apps/features/tasks/","title":"Tasks"},{"body":"Apps built with the Core Framework use roles and permissions to determine who has access to what data. User roles are general categories you can use to assign a collection of broad permissions to users. There are two classes of roles: online and offline. Generally speaking, CHWs are usually offline users, while managers and nurses are usually online users. SMS users do not use the app, and thus do not have a user role.\nRoles Differing levels of access and permissions are assigned to each persona. A user role is created to provide them with access to the information they need. Offline and online access, storage limitations, and data privacy are taken into account.\n   Persona Hierarchy Device Permissions     Program Officer Logs in as Admin Computer Admin users, usually Program Officers, are online-only admin users not associated to a particular level. They have access to all people, places, and records in the app, but since they are online-only users, they cannot view any tasks or targets.   CHW Supervisors Logs in at Health Facility level Tablet User at this level have online and offline access to view CHWs, fill out reports about them, and view tasks and targets related to them. Due to storage limitations, they aren’t able to view households or submit reports and review tasks and targets about them.   CHWs Logs in at CHW Area level Phone Users at this level have online and offline access to view households and family members, submit reports about them, and view tasks and targets about them.   Family members Registered at Household level, does not log in Messaging Family members might include fathers, mothers, children, and other adults. The program model determines which family members should be registered in the app. However, they are not users of the app, and do not log in themselves.    Online Users Online roles are for users who need access to a lot of data and need to maintain the system or update system settings. An internet connection is required.\nOffline Users Offline roles are for users who need to be able to access data on the go in the field, don’t need to maintain the system, and don’t have a reliable internet connection. All the data they have access to will be synced to their device.\nPermissions   User Permissions are settings that can be individually toggled on or off to allow users with a particular Role to do a certain action or see a certain thing. CHT app developers and administrators can add as many User Roles as needed to grant permissions to different groups of users.\nViewing permissions determine which page tabs a user sees in the app and which types of data they do and don’t have access to. User action permissions include who can create (e.g., create new users), who can delete (e.g., delete reports), who can edit (e.g., edit profiles), and who can export (e.g., export server logs).\n","excerpt":"Apps built with the Core Framework use roles and permissions to determine who has access to what …","ref":"/beta/apps/concepts/users/","title":"Users"},{"body":"Every minor release we update dependencies to get the latest fixes and improvements. We do this early in the release cycle so that we have some more time to find regressions and issues. This is done on all folders with a package.json, including:\n cht-core  / (root) /admin /api /sentinel /shared-libs/* /webapp   medic-conf  Steps  git checkout master \u0026amp;\u0026amp; git pull - get the latest code git checkout -b \u0026quot;\u0026lt;issue\u0026gt;-update-dendencies\u0026quot; - make a branch  Then for each folder go through these steps.\n npm ci - update your local node_modules to match expected npm outdated - report on any dependencies which aren\u0026rsquo;t at the latest npm install --save[-dev] package@version - install the latest version (be careful and read the release notes if the new version is a major change from the current) npm dedupe - remove duplicated dependencies npm audit fix - automatically fix any nested dependencies with vulnerabilities npm audit - get a report on any remaining vulnerabilities and manually scan it to see if there\u0026rsquo;s anything else you can do  Problems  Don\u0026rsquo;t update bootstrap to 4+ as it has many breaking changes. One day we will either raise an issue to upgrade it or migrate off it, but that is outside the scope of this change. Don\u0026rsquo;t update bootstrap-daterangepicker. Don\u0026rsquo;t update select2 as the latest patch always seems to fail. Make sure the version of api/enketo-xslt is the same as webapp/enketo-core/enketo-transformer/enketo-xslt. Make sure the version of webapp/jquery is the same as webapp/enketo-core/jquery. If you have trouble upgrading any other dependency and you think it\u0026rsquo;ll be challenging to fix it then raise a new issue to upgrade just that dependency. Don\u0026rsquo;t hold up all the other upgrades you\u0026rsquo;ve made.  Troubleshooting npm errno -17 If npm ci errors with \u0026ldquo;errno -17\u0026rdquo; in shared-libs you may need to manually remove the nested dependencies from the package-lock.json. This needs move investigation to work out why this is happening.\nselect2 is not a function If you get TypeError: \u0026quot;$(...).select2 is not a function\u0026quot; then either:\n You bumped select2. For some reason this breaks it. You have multiple jquery libraries and select2 is getting attached to one but not the other. Make sure the jquery versions in enketo-core and webapp match and you\u0026rsquo;ve run dedupe to remove the enketo-core copy.  ","excerpt":"Every minor release we update dependencies to get the latest fixes and improvements. We do this …","ref":"/beta/core/process/update-dependencies/","title":"Updating Dependencies"},{"body":"Interoperability and Integration are often used interchangeably but mean different things. This article offers a useful delineation between the two.\n With interoperability, systems work together, even if they weren’t designed specifically to work together, because standard communication protocol techniques are applied. Two (or more) systems that weren\u0026rsquo;t designed to be interoperable require integration.\n OpenHIE, HL7 FHIR, ICD-10, LOINC, etc\u0026hellip; are examples of healthcare related protocols and standards used to achieve interoperability. CHT Core can be configured to support many of these standards and also exchange data with other systems through integrations.\n","excerpt":"Interoperability and Integration are often used interchangeably but mean different things. This …","ref":"/beta/apps/concepts/interoperability/","title":"Interoperability"},{"body":"","excerpt":"","ref":"/beta/design/personas/partners/","title":"Partner Personas"},{"body":"Targets is a user dashboard or analytics tab. These widgets provide a summary or analysis of the data in reports that have been submitted. These widgets can be configured to track metrics for an individual CHW or for an entire health facility. Currently, the user must have access to the report in order to generate the widget with its data.\nFor CHWs, the Targets tab can provide a quick summary of their progress towards their goals. For supervisors, nurses, and other facility-based users, these widgets might display important insights into how their community unit is performing.\nTargets can be configured for any user that has offline access.\nTypes of Widgets   There are two basic types of widgets: counts and percentages. Count widgets display a number while percentage widgets display a horizontal bar that represents 100%. Every element is configurable, including the text, the icon, the presence of a goal (or not), the value of the goal, the time frame, and the total number of widgets.\nThe data for both widgets is calculated as either “this month” (resets back to 0 at the beginning of each month) or “all time” (a cumulative total). The time frame is per widget level so there can be a mix of date ranges on the Targets page.\nAdditionally, each widget can have a goal and there can be a mix of widgets with and without goals. If goals are set, the widgets have conditional color styling to show whether a goal is unmet (red) or met (green) based on configured rules.\nCount Widgets The count widget shows a tally of a particular report that’s been submitted or data within a report that matches a set of criteria.\nFor example, you could count the number of active pregnancies, the number of facility-based deliveries, or the number of households or people registered that month.\nCounts without a goal display a simple black number count. Counts with a goal display the value of the goal on the right side and a colored count (green if the count is above the goal, or red if the count is below the goal).\nPercent Widgets Percentage widgets provide insight into how much data matches a specific criteria against data that does not. This is calculated based on a true / false statement. This is often configured to represent accomplishment. For example, newborns should be visited within the first three days of life (“true”) can be displayed next to newborns that were not visited within the first three days (“false”).\nNext to the percentage, the count of reports used in the calculation are shown (e.g. 16 of 20 [newborn visits] on-time). CHWs have found this helpful in interpreting this information.\nAn optional goal can be set, such as “70% of newborns should be visited within the first three days.” Conditional styling can be configured to show green if a goal has been met and red if the goal has not been met.\n","excerpt":"Targets is a user dashboard or analytics tab. These widgets provide a summary or analysis of the …","ref":"/beta/apps/features/targets/","title":"Targets"},{"body":"App Management is an interface for non-technical administrative users. With it they can manage users and make minor changes to the app, such as setting the SMS gateway phone number, and changing the default language for the app.\nThe App Management pages are a desktop-only interface meant for users with a reliable internet connection.\n  Page Tabs These sections of the App can be configured from within the Admin Console:\n Settings: Change basic settings like gateway phone number \u0026amp; country code Languages: Set default app language, update translations Forms: Upload XML and JSON forms Import \u0026amp; Export: Import and export settings Upgrade Instance: Install a newer app version Users: View and edit users of the system Icons: View and edit icons used in the app Targets: Modify performance or activity targets Roles \u0026amp; Permissions: Fine tuned control of user roles and permissions  App Management vs medic-conf In general, everything that can be done in the Admin Console can also be done in command line tools, but not everything in the command line tools can be done in the Admin Console.\nThe Admin Console does not track changes. For most app development, we recommend using command line tools such as medic-conf and tracking files using a version control system.\nIn Admin Console But Not Command Line Tools:\n User management ~Upgrades~  In Command Line Tools But Not Admin Console:\n Most of the JSON settings XLS → Xform conversion  ","excerpt":"App Management is an interface for non-technical administrative users. With it they can manage users …","ref":"/beta/apps/features/admin/","title":"App Management"},{"body":"There are no set prerequisites for users of CHT apps, yet the following are helpful for developing CHT applications.\nTest Instance To build your own application using the Core Framework you will need an instance set up for testing. You can set up a local instance by following these instructions).\nBuild tool The build tool for applications using the Core Framework is medic-conf. To set it up, follow the installation instructions. To properly use the tool you will need your application files in set locations within a folder. Once you are set up with the basic file structure you can edit the files, and rebuild the application by compiling or converting components as needed, and uploading them to your test instance.\nBackground skills To build applications with the Core Framework the follow skills are helpful, ordered by importance:\nXLSForms and XForms Many workflows in your application, including completing tasks and creating contacts, will be generated using ODK XForms. Many app developers use XLSForms as an easier way to generate XForms. A strong knowledge of XLSForm standard is very useful in building your own application.\nJSON JSON (JavaScript Object Notation) is a format for storing structured text. Understanding JSON will help with minor modification of existing applications.\nJavascript Many key aspects are defined with JavaScript code and expressions. This includes managing profile pages, creating tasks and targets, and setting the condition for when to show forms. Unless you are only doing minor modification to an existing application, a good understanding of JavaScript is required.\nCouchDB A free and open source NoSQL database we use to store all our data, configuration, and even the application code. CouchDB is really good at replication which is the process of sending the data to another database, such as PouchDB in the client application, and back again. Although building your own app using the Core Framework does not require knowledge or experience with CouchDB it can be useful to be familiar with general concepts as a document store.\nSQL Although the application you build uses a NoSQL database, a parallel PostgreSQL database is available in the Core Framework to make querying data easier. Familiarity with SQL is needed to set up and query the database.\n","excerpt":"There are no set prerequisites for users of CHT apps, yet the following are helpful for developing …","ref":"/beta/apps/concepts/prerequisites/","title":"Prerequisites for App Development"},{"body":"This is a guide, not a law - use your discretion. Mostly based on Felix Geisendörfer\u0026rsquo;s guide with our own tweaks.\nIndention Use 2 spaces for indenting your code and swear an oath to never mix tabs and spaces - a special kind of hell is awaiting you otherwise.\nNewlines Use UNIX-style newlines (\\n), and a newline character as the last character of a file. Windows-style newlines (\\r\\n) are forbidden inside any repository.\nNo trailing whitespace Just like you brush your teeth after every meal, you clean up any trailing whitespace in your JS files before committing. Otherwise the rotten smell of careless neglect will eventually drive away contributors and/or co-workers.\nUse Semicolons According to scientific research, the usage of semicolons is a core value of our community. Consider the points of the opposition, but be a traditionalist when it comes to abusing error correction mechanisms for cheap syntactic pleasures.\nUse single quotes Use single quotes, unless you are writing JSON.\nRight:\nconst foo = \u0026#39;bar\u0026#39;; Wrong:\nconst foo = \u0026#34;bar\u0026#34;; Opening braces go on the same line Your opening braces go on the same line as the statement, with whitespace before and after the condition, followed by a new line.\nRight:\nif (true) { console.log(\u0026#39;winning\u0026#39;); } Wrong:\nif (true) { console.log(\u0026#39;losing\u0026#39;); } if (true) { console.log(\u0026#39;losing\u0026#39;); } if(true){ console.log(\u0026#39;winning\u0026#39;); } Method chaining One method per line should be used if you want to chain methods.\nYou should also indent these methods so it\u0026rsquo;s easier to tell they are part of the same chain.\nRight:\nUser .findOne({ name: \u0026#39;foo\u0026#39; }) .populate(\u0026#39;bar\u0026#39;) .exec(() =\u0026gt; true); Wrong:\nUser .findOne({ name: \u0026#39;foo\u0026#39; }) .populate(\u0026#39;bar\u0026#39;) .exec(() =\u0026gt; true); User.findOne({ name: \u0026#39;foo\u0026#39; }) .populate(\u0026#39;bar\u0026#39;) .exec(() =\u0026gt; true); User.findOne({ name: \u0026#39;foo\u0026#39; }).populate(\u0026#39;bar\u0026#39;) .exec(() =\u0026gt; true); User.findOne({ name: \u0026#39;foo\u0026#39; }).populate(\u0026#39;bar\u0026#39;) .exec(() =\u0026gt; true); Use lowerCamelCase for variables, properties, and function names Variables, properties and function names should use lowerCamelCase. They should also be descriptive. Single character variables and uncommon abbreviations should generally be avoided.\nRight:\nconst adminUser = db.query(); Wrong:\nconst admin_user = db.query(); Use UpperCamelCase for class names Class names should be capitalized using UpperCamelCase.\nRight:\nfunction BankAccount() { } Wrong:\nfunction bank_Account() { } Use const and let There is no longer a good reason to use var. Use const whenever you can, and let when you must. Hardcoded constants should be named in all UPPERCASE.\nRight:\nconst DELAY = 10 * 1000; const output = input * 10; let temp = 50; let unknown; Wrong:\nvar DELAY = 10 * 1000; Use arrow functions Use arrow functions as much as possible for cleaner code and better scoping. Omit the return keyword when the entire function definition fits on one line. Omit the parens when taking a single parameter.\nThere are exceptions to this rule including when you want to access arguments or this, or when you want to be able to debug browserified code.\nRight:\nlet result = \u0026#39;\u0026#39;; const append = a =\u0026gt; { result += a; }; const combine = (a, b) =\u0026gt; { result = a + b; }; const getResult = () =\u0026gt; result; Wrong:\nlet result = \u0026#39;\u0026#39;; const append = (a) =\u0026gt; { result += a; }; const combine = function(a, b) { result = a + b; }; const getResult = () =\u0026gt; result; Object / Array creation Put short declarations on a single line. For long declarations put a line break after each comma.\nRight:\nconst a = [\u0026#39;hello\u0026#39;, \u0026#39;world\u0026#39;]; const b = { good: \u0026#39;code\u0026#39;, \u0026#39;is generally\u0026#39;: \u0026#39;pretty\u0026#39;, }; Wrong:\nconst a = [ \u0026#39;hello\u0026#39;, \u0026#39;world\u0026#39; ]; const b = {\u0026#34;good\u0026#34;: \u0026#39;code\u0026#39; , is generally: \u0026#39;pretty\u0026#39; }; const c = [\u0026#39;one\u0026#39;, \u0026#39;two\u0026#39;, \u0026#39;three\u0026#39;, \u0026#39;four\u0026#39;]; Use the === operator Programming is not about remembering stupid rules. Use the triple equality operator as it will work just as expected.\nRight:\nif (a !== \u0026#39;\u0026#39;) { console.log(\u0026#39;winning\u0026#39;); } Wrong:\nif (a == \u0026#39;\u0026#39;) { console.log(\u0026#39;losing\u0026#39;); } Do not extend built-in prototypes Do not extend the prototype of native JavaScript objects. Your future self will be forever grateful.\nRight:\nconst a = []; if (!a.length) { console.log(\u0026#39;winning\u0026#39;); } Wrong:\nArray.prototype.empty = function() { return !this.length; } const a = []; if (a.empty()) { console.log(\u0026#39;losing\u0026#39;); } Use descriptive conditions Any non-trivial conditions should be assigned to a descriptively named variable or function:\nRight:\nconst isValidPassword = password.length \u0026gt;= 4 \u0026amp;\u0026amp; /^(?=.*\\d).{4,}$/.test(password); if (isValidPassword) { console.log(\u0026#39;winning\u0026#39;); } Wrong:\nif (password.length \u0026gt;= 4 \u0026amp;\u0026amp; /^(?=.*\\d).{4,}$/.test(password)) { console.log(\u0026#39;losing\u0026#39;); } Write small functions Keep your functions short. A good function fits on a slide that the people in the last row of a big room can comfortably read. So don\u0026rsquo;t count on them having perfect vision and limit yourself to ~15 lines of code per function.\nReturn early from functions To avoid deep nesting of if-statements, always return a function\u0026rsquo;s value as early as possible.\nRight:\nfunction isPercentage(val) { if (val \u0026lt; 0) { return false; } if (val \u0026gt; 100) { return false; } return true; } Wrong:\nfunction isPercentage(val) { if (val \u0026gt;= 0) { if (val \u0026lt; 100) { return true; } else { return false; } } else { return false; } } Or for this particular example it may also be fine to shorten things even further:\nfunction isPercentage(val) { var isInRange = (val \u0026gt;= 0 \u0026amp;\u0026amp; val \u0026lt;= 100); return isInRange; } Adding documentation comments To add documentation comments that will be built using jsdocs, use jsdoc block tags. For angular code use the angular tags, see examples.\nTry to write comments that explain higher level mechanisms or clarify difficult segments of your code. Don\u0026rsquo;t use comments to restate trivial things.\nRight:\n/** * \u0026#39;ID_SOMETHING=VALUE\u0026#39; -\u0026gt; [\u0026#39;ID_SOMETHING=VALUE\u0026#39;, \u0026#39;SOMETHING\u0026#39;, \u0026#39;VALUE\u0026#39;] * @type {boolean} */ const matches = item.match(/ID_([^\\n]+)=([^\\n]+)/)); /** * Loads a user. This function has a nasty side effect where a failure to increment a * redis counter used for statistics will cause an exception. This needs * to be fixed in a later iteration. * @param {string} id the user id * @param {function} cb a callback function that applied to the user */ function loadUser(id, cb) { ... } Wrong:\n/** * Execute a regex */ const matches = item.match(/ID_([^\\n]+)=([^\\n]+)/); /** * Usage: loadUser(5, function() { ... }) */ function loadUser(id, cb) { ... } /** * Check if the session is valid */ const isSessionValid = (session.expires \u0026lt; Date.now()); /** If the session is valid */ if (isSessionValid) { ... } Object.freeze, Object.preventExtensions, Object.seal, with, eval Crazy stuff that you will probably never need. Stay away from it.\nGetters and setters Do not use setters, they cause more problems for people who try to use your software than they can solve.\nFeel free to use getters that are free from side effects, like providing a length property for a collection class.\n","excerpt":"This is a guide, not a law - use your discretion. Mostly based on Felix Geisendörfer\u0026rsquo;s guide …","ref":"/beta/core/process/style-guide/","title":"Coding Style Guide"},{"body":"Medic gateway supports Android 4.1 and above. To have it up and fully working, follow the below steps.\n  Install the app from the playstore from this link or by searching \u0026ldquo;Medic Gateway\u0026rdquo; on the Android Playstore.\n  Open the app. You will get a Warning:medic-gateway is not set as the default messaging app on this device if you are installing the app for the first time or afresh. Select HELP ME CHANGE and agree to the folloup system prompt about changing the default messaging app.\n  If you\u0026rsquo;re configuring medic-gateway(v1.00 and above) for use with hosted medic, with a URL of e.g. https://myproject.dev.medicmobile.org and a username of my_gateway_user and a password of topSecret, fill in the settings as follows:\n   Instance name: myproject [dev] (if https://myproject.app..., select \u0026lsquo;app\u0026rsquo;) Username: my_gateway_user Password: topSecret\n  N:B If you\u0026rsquo;re configuring medic-gateway(v 0.62 and below - recommended if you have a non-medicmobile hosted instance) you will need to use the generic build of medic-gateway - links to download are here. Find out the value for webapp URL from your tech support then configure as below WebappUrl: https://my_gateway_user:topSecret@myproject.some-subdomain.mydomain.org\n Power Saving Care should be taken to disable all power-saving modes on the phone, as these may affect medic-gateway's ability to check in with the server regularly.\nOn different versions of Android, power saving options may be found in different places. Sometimes they will be per-app, and sometimes phone-wide. Some places you might find the settings:\n WiFi \u0026gt; MORE \u0026gt; Keep WiFi on during sleep \u0026gt; ALWAYS (increases battery usage) Smart Manager \u0026gt; Battery \u0026gt; App Power Saving \u0026gt; OFF, or Smart Manager \u0026gt; Battery \u0026gt; App Power Saving \u0026gt; Detail \u0026gt; Medic Gateway \u0026gt; Disable  ","excerpt":"Medic gateway supports Android 4.1 and above. To have it up and fully working, follow the below …","ref":"/beta/apps/guides/gateway/configuration/","title":"Configuration"},{"body":"","excerpt":"","ref":"/beta/apps/features/integrations/","title":"Integrations"},{"body":"This style guide provides a set of editorial guidelines for anyone writing developer documentation for Medic Mobile or Community Health Toolkit projects. These are guidelines, not rules. Use your best judgment.\nNote: medic-docs does not involve release management and acceptance testing. Help us maintain the quality of our documentation by submiting a pull request (PR) with any suggested changes. One of the repository\u0026rsquo;s maintainers will review the PR, request additional changes as needed, and merge the PR when it is ready.\nTable of Contents  Table of Contents Language General guidelines and best practices  Present tense Active voice Simple and direct language Address the reader as \u0026ldquo;you\u0026rdquo; Latin phrases   Practices to avoid  Using \u0026ldquo;we\u0026rdquo; Using jargon and idioms Using statements about the future Using statements that will soon be out of date   Formatting standards  Angle brackets for placeholders Bold for user interface elements Italics to define or introduce new terms Code style for filenames, directories, and paths British standard for punctuation inside quotes   Inline code formatting  Code style for inline code and commands   Code snippet formatting  Don\u0026rsquo;t include the command prompt Separate commands from output   Medic Mobile word list  Language Documentation for Medic Mobile and Community Health Toolkit projects is written is American English.\nGeneral guidelines and best practices This section contains suggested best practices for clear, concise, and consistent content.\nPresent tense  DoDon't CouchDB converts this to a properly hashed password when you save.CouchDB will convert this to a properly hashed password on save.  Exception: Use future or past tense if it is required to convey the correct meaning.\nActive voice  DoDon't Stop everything and delete the medic DB to clear your database.Clear your db by stopping everything and deleting the medic DB. Replicate your local production database into a new medic database to bootstrap your data.Bootstrap your data by replicating your local PROD DB into a new medic database.  Exception: Use passive voice if active voice leads to an awkward construction.\nSimple and direct language Use simple and direct language. Avoid using unnecessary phrases, such as saying \u0026ldquo;please.\u0026rdquo;\n DoDon't To create a database, ...In order to create a database, ... See the configuration file.Please see the configuration file. View the logs.With this next command, we'll view the logs.  Address the reader as \u0026ldquo;you\u0026rdquo;  DoDon't You can create a database by ...We'll create a database by ... In the preceding output, you can see...In the preceding output, we can see ...  Latin phrases Prefer English terms over Latin abbreviations.\n DoDon't For example, ...e.g., ... That is, ...i.e., ...  Exception: Use \u0026ldquo;etc.\u0026rdquo; for et cetera.\nPractices to avoid Using \u0026ldquo;we\u0026rdquo; Using \u0026ldquo;we\u0026rdquo; in a sentence can be confusing, because the reader might not know whether they\u0026rsquo;re part of the \u0026ldquo;we\u0026rdquo; you\u0026rsquo;re describing.\n DoDon't Version 3.0 includes ...In version 3.0, we have added ... Medic Mobile provides a new feature to reduce the time to load contacts.We made several changes to reduce the time to load contacts. This page teaches you how to use medic-gateway.In this page, we are going to learn about medic-gateway.  Using jargon and idioms Some readers speak English as a second language. Avoid jargon and idioms to help them understand better.\n DoDon't To get started, ...To get up and running with no fuss, ... Internally, ...Under the hood, ... Create a new database.Turn up a new database.  Using statements about the future Avoid giving hints about the future. If you need to talk about an alpha or beta feature, put the text under a heading that identifies it as alpha or beta information.\nUsing statements that will soon be out of date Avoid words like \u0026ldquo;currently\u0026rdquo; and \u0026ldquo;new.\u0026rdquo; A feature that is new today might not be considered new in a few months.\n DoDon't In version 3.4, ...In the current version, ... The Log user statistics feature provides ...The new Log user statistics feature provides ...  Formatting standards Angle brackets for placeholders Use angle brackets for placeholders. Tell the reader what a placeholder represents.\n Create a file named \u0026lt;project_name\u0026gt;-medic-os-compose.yml. Where \u0026lt;project_name\u0026gt; is the name of one of your project.  Bold for user interface elements  DoDon't Click Fork.Click \"Fork\". Select Other.Select 'Other'.  Italics to define or introduce new terms  DoDon't By default CouchDB runs in admin party mode, which means you do not need users to read or edit any data.By default CouchDB runs in \"admin party\" mode, which means you do not need users to read or edit any data. The keys in .properties files are referred to as terms in POEditor.The \"keys\" in .properties files are referred to as terms in POEditor.  Code style for filenames, directories, and paths  DoDon't Open messages-en.properties file.Open messages-en.properties file. The file is located in /config/standard directory.The file is located in /config/standard directory. Create medic/translations/messages-en.properties file.Create medic/translations/messages-en.properties file.  British standard for punctuation inside quotes  DoDon't The doc in the database is a \"record\".The doc in the database is a \"record.\" The copy is called a \"fork\".The copy is called a \"fork.\"  Inline code formatting Code style for inline code and commands For inline code in an HTML document, use the \u0026lt;code\u0026gt; tag. In a Markdown document, use the backtick (`).\n DoDon't The grunt dev-webapp command builds and deploys the webapp.The \"grunt dev-webapp\" command creates a Deployment. To upload the configuration from your current directory, use medic-conf --local.To upload the configuration from your current directory, use \"medic-conf --local\". Enclose code samples with triple backticks. (```)Enclose code samples with any other syntax.  Code snippet formatting Don\u0026rsquo;t include the command prompt  DoDon't export COUCH_NODE_NAME=couchdb@127.0.0.1$ export COUCH_NODE_NAME=couchdb@127.0.0.1  Separate commands from output Verify the security settings on CouchDB:\ncurl http://localhost:5984 The output is similar to this:\n{\u0026quot;error\u0026quot;:\u0026quot;unauthorized\u0026quot;,\u0026quot;reason\u0026quot;:\u0026quot;Authentication required.\u0026quot;} Medic Mobile word list A list of Medic Mobile-specific terms and words to be used consistently across the site.\n TermUsage DockerDocker should always be capitalized. Medic MobileMedic Mobile should always be capitalized. CouchDBNo space between Couch and DB. Do not use Couchdb, Couch DB or other variations.  ","excerpt":"This style guide provides a set of editorial guidelines for anyone writing developer documentation …","ref":"/beta/docs-style-guide/","title":"Documentation Style Guide"},{"body":"How to fix e2e tests End to end (e2e) tests can be really difficult to debug - sometimes they fail seemingly at random, and sometimes they only fail on certain environments (eg: ci but not locally). This can make reproducing and reliably fixing the issue challenging, so here are some tips to help!\nRead the protractor logs Read the failure carefully - it often has really good info but sometimes it\u0026rsquo;s just hard to find. Most importantly it tells you exactly the line in the test that failed and you can look that up in the source to see what protractor was trying to do. The error message itself is also really useful. Also sometimes one error causes the next, so always start with the first test failure before looking at the others.\nKnown failure patterns  Can\u0026rsquo;t click on an element because another element would get the click. This usually means a modal dialog was being shown. 90% of the time this is the update notification modal which means some settings change has been detected after the test started execution. Stale element. This means the DOM element has been removed after protractor found it on the page but before you tried to do something with it. I generally try to get protractor to find the element just before I need it to reduce the chance of this happening.  Other logs The API and Sentinel logs are sometimes useful, particularly if API has crashed. These are available locally under /tests/logs/ and for CI builds on AWS.\nScreenshots We automatically take screenshots when a test fails and store it locally in /tests/results/ and for CI builds on AWS. These can be particularly useful if a dialog was blocking a click.\nRunning just the failing test Option 1 Running e2e tests can be quite slow so to save time modify the specs property of /tests/base.conf.js so it only finds your test. You can also change describe and it to xdescribe and xit to skip specific tests.\nOption 2 Alternatively you can run API in test mode using:\nAPI_PORT=4988 COUCH_URL=http://admin:pass@localhost:5984/medic-test node server.js Then grep for just the tests you want to run:\nprotractor /home/kenn/webapp/tests/e2e.tests.conf.js --specs='/home/kenn/webapp/tests/e2e/api/controllers/_changes.spec.js' --grep=\u0026quot;should allow DB admins to POST to _changes\u0026quot; Option 3 Use the \u0026ldquo;Protractor test runner\u0026rdquo; extension for VSCode.\nWatching the test run Running the tests locally with grunt e2e-debug will allow you to watch it run but if you interact with the page the test will fail in unexpected ways. Furthermore the browser will close after a short timeout so you won\u0026rsquo;t be able to inspect the console or DOM. To do this, force quit the process running the test before it tears down and you will be able to navigate around the app, use Chrome dev tools, and inspect the docs in the database to (hopefully) work out what\u0026rsquo;s going wrong.\n","excerpt":"How to fix e2e tests End to end (e2e) tests can be really difficult to debug - sometimes they fail …","ref":"/beta/core/guides/fixing-e2e-tests/","title":"Fixing E2E Tests"},{"body":"New to Git or need a refesher?\n A tutorial introduction to Git A tutorial introduction to Git: part two A Git core tutorial for developers  If you\u0026rsquo;re on Unix, these are also likely installed as man pages:\nman gittutorial man gittutorial-2 man gitcore-tutorial For more reading, Pro Git is available online, and Chapter 10: Git Internals is quite helpful.\nPublished a commit by mistake? GitHub has a decent writeup on that:\n Removing sensitive data from a repository  How To Extract a Module From an Existing Repo The following are the steps I used for creating medic-smsparser based off medic.\nFirst git clone using a URL scheme rather than plain file system path otherwise you will get hard links instead of a copy.\ngit clone git@github.com:medic/medic.git or\ngit clone file:///home/linus/dev/medic Then compile a list of files you are interested in. If you only have a single directory you need then read about the --subdirectory-filter option of filter-branch. In this how-to I\u0026rsquo;m using a set of files:\n$ cat files packages/kujua-sms/kujua-sms/validate.js packages/kujua-sms/views/lib/javarosa_parser.js packages/kujua-sms/views/lib/mp_parser.js packages/kujua-sms/views/lib/smsparser.js packages/kujua-sms/views/lib/textforms_parser.js packages/kujua-sms/kujua-sms/utils.js tests/nodeunit/form_definitions.js tests/nodeunit/unit/kujua-sms/smsparser.js tests/nodeunit/unit/kujua-sms/smsparser_compact_textform.js tests/nodeunit/unit/kujua-sms/textforms_parser.js tests/nodeunit/unit/kujua-sms/validate.js Next query the git history for any file renames by using --follow:\nfor i in `cat files`; do \\ git log --oneline --name-only --follow --all -- \u0026quot;$i\u0026quot; | \\ egrep -v -e '^[0-9A-Fa-f]+\\s'; \\ done | sort | uniq \u0026gt; all-files In the following commands I assume the branch we are working on is master, but this could easily be applied to any branch.\nTake a note of your original commit count.\n$ git rev-list master | wc -l 6844 Run the filter on the current branch, this might take a little while:\ngit filter-branch -f --prune-empty --index-filter '\\ git rm --cached -r -q -- . ; \\ git reset -q $GIT_COMMIT -- \\ lib/utils.js \\ packages/kujua-sms-import/kujua-sms-import/smsparser.js \\ packages/kujua-sms-import/views/lib/smsparser.js \\ packages/kujua-sms/kujua-sms/utils.js \\ packages/kujua-sms/kujua-sms/validate.js \\ packages/kujua-sms/tests/kujua-sms/smsparser.js \\ packages/kujua-sms/tests/kujua-sms/smsparser_compact_textform.js \\ packages/kujua-sms/tests/kujua-sms/textforms_parser.js \\ packages/kujua-sms/tests/kujua-sms/validate.js \\ packages/kujua-sms/views/lib/javarosa_parser.js \\ packages/kujua-sms/views/lib/mp_parser.js \\ packages/kujua-sms/views/lib/smsparser.js \\ packages/kujua-sms/views/lib/textforms_parser.js \\ tests/nodeunit/form_definitions.js \\ tests/nodeunit/unit/kujua-sms/smsparser.js \\ tests/nodeunit/unit/kujua-sms/smsparser_compact_textform.js \\ tests/nodeunit/unit/kujua-sms/textforms_parser.js \\ tests/nodeunit/unit/kujua-sms/validate.js tests/smsparser.js \\ views/lib/smsparser.js \\ ' -- --all Nice, less commits!\n$ git rev-list master | wc -l 461 Peruse git log a bit and do a few spot checks to see if things look right. The commit hashes have been rewritten and should only include commits where the files listed above were affected.\n$ git log $ git show d3b2be79 But if we query on all refs (branches/tags) our rev list is still large, hrm\u0026hellip;\n$ git rev-list --all | wc -l 7664 Local repo is also still larger than expected.\n$ du -hs .git 41M\t.git How many branches and tags do we have? Yikes, we\u0026rsquo;ve been busy.\n$ git for-each-ref | wc -l 183 Ok, we still have some work to do, lots of refs/tags/branches still holding on to trees!\nFirst order of business is to say goodbye to the origin remote, we no longer call that home.\ngit remote rm origin rm -rf .git/refs/original/ .git/refs/remotes/ .git/*_HEAD .git/logs/ Now delete all related branches and tags:\ngit for-each-ref --format=\u0026quot;%(refname)\u0026quot; refs/original/ refs/tags | \\ xargs -n1 git update-ref -d One ferocious garbage collection incantation:\n$ git -c gc.reflogExpire=0 -c gc.reflogExpireUnreachable=0 -c gc.rerereresolved=0 \\ -c gc.rerereunresolved=0 -c gc.pruneExpire=now gc --aggressive A basic check shows no errors:\n$ git fsck --full Checking object directories: 100% (256/256), done. Checking objects: 100% (2064/2064), done. Look Ma, I\u0026rsquo;m all cleaned up!\n$ git for-each-ref dbcc2677aa56c40fbf83d72e6e413b86d3b2be79 commit refs/heads/master $ git rev-list --all | wc -l 461 $ du -hs .git 384K\t.git Maybe have a play now and make sure things look right to you. Then publish your new repo!\n$ git remote add origin git@github.com:medic/medic-smsparser.git $ git push origin master Notes Once you understand a little about git internals, have a look at git-filter-branch manual (see also the checklist at the bottom):\n git-filter-branch - Rewrite branches  Ferocious GC\n How to remove unreferenced blobs from my git repo  Need to update the rm -rf command used there, the git update-ref -d that comes after takes care of most of that except the refs/logs part. Will try next time.\n","excerpt":"New to Git or need a refesher?\n A tutorial introduction to Git A tutorial introduction to Git: part …","ref":"/beta/core/guides/using-git/","title":"Using Git"},{"body":"npm Orgs We use npm Orgs to organize our npm packages. It provides a centralized way to manage a team\u0026rsquo;s published npm packages and permissions. Here are some guidelines when using this service.\nSee https://www.npmjs.com/docs/orgs/ for more information.\nOur organization is medic or using npm\u0026rsquo;s notation, @medic.\nWe also created @medicmobile but it\u0026rsquo;s not currently in use, it was created to reserve the namespace.\nAdding a Package When you publish an npm module on npmjs.com, add it to the developers team under the @medic org.\nThis can be done using the web interface:\n Login to npmjs.com then Navigate to Medic Developer\u0026rsquo;s Team and add your package there.  Or command line:\n Change your directory to where the package\u0026rsquo;s package.json lives, then run:  npm access grant read-write medic:developers  Then npm access should show the updated permissions for the team members.  $ npm access ls-collaborators { \u0026quot;mandric\u0026quot;: \u0026quot;read-write\u0026quot;, \u0026quot;estellecomment\u0026quot;: \u0026quot;read-write\u0026quot;, \u0026quot;garethbowen\u0026quot;: \u0026quot;read-write\u0026quot;, \u0026quot;scdf\u0026quot;: \u0026quot;read-write\u0026quot;, \u0026quot;alxndrsn\u0026quot;: \u0026quot;read-write\u0026quot;, } Using an Org Scoped Package A scope should be specified when a published package is a fork of an existing package, but otherwise scope is not needed since there is no conflict with the registry.\nFor example if you fork moment and you can\u0026rsquo;t get your changes merged upstream and need to publish a new package then modify the package name (in package.json) to specify a organizational scope, like @medic/moment and publish it.\nFor more info see Publishing an Org Scoped Package.\n","excerpt":"npm Orgs We use npm Orgs to organize our npm packages. It provides a centralized way to manage a …","ref":"/beta/core/guides/using-npm/","title":"Using NPM"},{"body":"First, using the webapp, create the top level places/facilities like districts/branches that the users will belong to. Save the UUIDs of these places in a spreadsheet with their names.\nThen use curl against the users API to create the user, place and contact. In this example the place and contact.parent are the same so we\u0026rsquo;re creating demo* users that can manage records associated to a specific place.\nCreate a comma separated data file like /tmp/data:\nName,Phone,Branch Name,Branch UUID,Username,Password Gary Gnu,48839938,Iganga Branch,54cc7-accd-e1cf9-ef203,demo01,keratejevu Dianna Dempsey,4999393,Meru Branch,54cc1-1a7a-ccddd-e1203,demo02,duwuradixu Create a script like users-bulk-load and edit it to include the district:\n#!/bin/sh PHONE_PREFIX=+256 #DISTRICT=5627c50f05a75003fe51685c596fefee COUCH_URL=${COUCH_URL-http://admin:secret@localhost:5988} LANG=en # no language prompt, please. KNOWN=true # no tour, please. IFS=$',' # comma delimited while IFS=$IFS read name phone district uuid username password; do \\ curl -v -H 'content-type:application/json' -d '{ \u0026quot;username\u0026quot;:\u0026quot;'\u0026quot;$username\u0026quot;'\u0026quot;, \u0026quot;password\u0026quot;:\u0026quot;'\u0026quot;$password\u0026quot;'\u0026quot;, \u0026quot;type\u0026quot;:\u0026quot;district-manager\u0026quot;, \u0026quot;place\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;'\u0026quot;$name Area\u0026quot;'\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;health_center\u0026quot;, \u0026quot;parent\u0026quot;: \u0026quot;'\u0026quot;$uuid\u0026quot;'\u0026quot; }, \u0026quot;language\u0026quot;:\u0026quot;'\u0026quot;$LANG\u0026quot;'\u0026quot;, \u0026quot;known\u0026quot;:'\u0026quot;$KNOWN\u0026quot;', \u0026quot;contact\u0026quot;:{ \u0026quot;name\u0026quot;:\u0026quot;'\u0026quot;$name\u0026quot;'\u0026quot;, \u0026quot;phone\u0026quot;: \u0026quot;'\u0026quot;$PHONE_PREFIX$phone\u0026quot;'\u0026quot; } }' \u0026quot;$COUCH_URL/api/v1/users\u0026quot;; done Load the data into the loop:\ntail -n+2 /tmp/data | COUCH_URL=https://admin:secret@myproject.app.medicmobile.org \\ users-bulk-load # tail skips header row ","excerpt":"First, using the webapp, create the top level places/facilities like districts/branches that the …","ref":"/beta/core/guides/users-bulk-load/","title":"How to bulk load users"},{"body":"We don\u0026rsquo;t actively support development on Windows, instead preferring MacOS or Linux.\nHowever, Microsoft has recently been stabilizing their Windows Subsystem for Linux, which appears to work reasonably well for development.\nInstallation instructions are mostly the same as they written in the README with a couple of caveats as of time of writing (2019-07-25), noted below.\nNote: both the Windows Subsystem for Linux and Medic\u0026rsquo;s support for developing in it is very much in beta. These are advanced instructions, expect some understanding of linux and may not always work. Be patient and raise bugs as you find them!\nInstalling Ubuntu in the Windows Subsystem for Linux. For the rest of this document we\u0026rsquo;re going to presume that you\u0026rsquo;re using Ubuntu (18.04) in WSL. Medic probably works on all distributions, but Ubuntu is likely the best supported.\nFirst, follow Microsoft\u0026rsquo;s instructions on enabling and installing linux. At the end of this process you should have a linux terminal.\nNote: for the rest of this tutorial in linux means code executing or performing actions in the WSL, while in Windows means code executing or performing actions in Windows natively.\nCouchDB As of writing CouchDB wouldn\u0026rsquo;t autostart (due to systemd not existing?), and wasn\u0026rsquo;t manually starting due to erlang errors.\nLuckily, there is a perfectly working CouchDB installation for Windows:\n Download from CouchDB and install the Windows version. This will create a Windows service. Run it either by directly executing C:\\CouchDB\\bin\\couchdb.cmd or by starting the service  Then go to http://localhost:5984/_utils/#/setup in Windows and do the single node setup. Once done head back to linux and confirm it works:\n$: curl http://localhost:5984/ {\u0026#34;couchdb\u0026#34;:\u0026#34;Welcome\u0026#34;,\u0026#34;version\u0026#34;:\u0026#34;2.3.1\u0026#34;,\u0026#34;git_sha\u0026#34;:\u0026#34;c298091a4\u0026#34;,\u0026#34;uuid\u0026#34;:\u0026#34;5f60350abaaa11c0131a5630e83ae979\u0026#34;,\u0026#34;features\u0026#34;:[\u0026#34;pluggable-storage-engines\u0026#34;,\u0026#34;scheduler\u0026#34;],\u0026#34;vendor\u0026#34;:{\u0026#34;name\u0026#34;:\u0026#34;The Apache Software Foundation\u0026#34;}} Installing NPM Start your WSL instance (Ubuntu), not WSL as they take you to two different default directories.\nThe default npm in linux is really old and doesn\u0026rsquo;t have npm ci, which we need.\nInstead use nvm to install nvm install 11.3 .\nChecking out the code We used git that\u0026rsquo;s preinstalled with Ubuntu to check out the code.\nYou can checkout cht code inside WSL itself. You can checkout anywhere you have write access. We\u0026rsquo;ll checkout inside /home/username/medic directory.\n$: mkdir ~/medic \u0026amp;\u0026amp; cd ~/medic $: git clone https://github.com/medic/cht-core.git Setup Environment Variables Using .bashrc works as expected, and so is a good place to put exports:\n# Medic stuff export COUCH_URL=http://admin:pass@localhost:5984/medic export COUCH_NODE_NAME=couchdb@localhost Everything else npm ci should just work once you\u0026rsquo;ve installed a latest version of node via nvm as noted above.\nYou won\u0026rsquo;t have grunt already installed, so install it by executing following command:\n$: npm i -g grunt-cli Also install xstproc in your WSL:\n$: sudo apt-get update $: sudo apt-get install xsltproc Now you can build the web app.\n$: cd ~/medic/cht-core/ $: npm ci $: grunt From this point, follow the setup guide from Enabling a secure CouchDB section in Development Guide.\nTo get multiple linux terminals (so you can run grunt, api and sentinel at the same time) either install and use something like Tmux, or if you click Ubuntu in the Windows start menu again it will open up a new terminal in the same linux instance.\nOnce you\u0026rsquo;re done with the default instructions and have api running, check if it works by going to http://localhost:5988 in Chrome or Firefox.\nEditing Code If you want to make changes to your code or contribute to our community health toolkit, you can do so by editing code from your favorite editor. If you editor supports UNC path, you can access and edit files inside WSL from \\\\wsl$\\Ubuntu\\\u0026lt;cht-core-location\u0026gt;. If you use Visual Studio Code, it\u0026rsquo;s even easier to edit your code. Just navigate to where you have checked out cht-core and type code . This will download VS Code Server for Ubuntu and open the project in Visual Studio Code in windows.\n$: cd ~/medic/cht-core $: code . Problems? As none of our code developers use Windows as a development environment daily this solution may not be as stable as directly using MacOS or Linux. If you encounter issues please let a developer know\n","excerpt":"We don\u0026rsquo;t actively support development on Windows, instead preferring MacOS or Linux.\nHowever, …","ref":"/beta/core/guides/using-windows/","title":"Developing on Windows"},{"body":"In order to implement the Medic Mobile Standard package at your site, you will require an Android device for the Medic gateway. You may use an existing Android device and are not required to purchase a new one. However, please note that the Android device must always stay in your organization’s office or facility, and must be connected to stable and continuous internet at all times.\nBelow is a list of recommended Android devices across a range of prices. You may find these in local mobile equipment stores as well as online through Amazon and other e-commerce sites.\nLow-cost devices:  LG L60 * Samsung Duos * Lenovo A1000  Medium-cost devices:  Samsung Galaxy J5 * Huawei Honor 4x * Huawei G Play mini * Motorola Moto X play  High-cost devices:  OnePlus 3T Nexus 6  *Devices marked with an asterisk have been tested and used by Medic Mobile and our partners before.\nAndroid OS: We also support Android version 4.1 (Jelly Beans) and above. Details of the Android history can be found here.\nWe highly recommend investing in devices that are medium to high-cost, and in models that are marked with an asterisk in the list above to ensure optimal efficiency.\n","excerpt":"In order to implement the Medic Mobile Standard package at your site, you will require an Android …","ref":"/beta/apps/guides/gateway/phones/","title":"Phones"},{"body":"In a techlead heaven, we would have immeadiate physical access to gateway phones, but alas, most of the time we have to hand them over to the partner. Fortunately, comes this guide on debugging gateway problems.\nFollow the steps as below (if you don\u0026rsquo;t have physical access to the phone, start with step 2 i.e debug from the server side first)\n  Make sure that the device:\n  Is connected to the internet. You can check this by opening any Browser app in the phone and going to https://google.com.\n  Check if the instance name, instance type and gateway user password are set correctly in the Gateway Settings app screen.\n  Has the latest Gateway version. Get the latest version by opening the Google Playstore, searching for Medic Gateway and updating the existing app\n  Medic Gatway should be set as the default app for SMS. To check, go to Settings in the Gateway app. If Medic Gateway is not the default, you will be met with the below app screen. In that case, click Help me change.\n  If messages are not going through to the server, in the To Webapp tab, select some of them and press Retry at the bottom and wait for about 5-10 minutes.\n  If messages are not going through to the users, in the From Webapp tab, select some of them and press Retry at the bottom and wait for about 5-10 minutes.\n  In CDMA networks, there are operator issues where messages get to the users in chunks of around 160 characters when the message is too long. If this is the case, go to Settings in the gateway screen and make sure you tick CDMA compatibility mode\n  Check if the phone has adequate free space\n  Restart the phone if no solution seems to work. Resetting the Adroind state sometimes resolves some persistent problems\n    When attacking the problem from the phones end does not work, move on to the server and try to solve it from there. Maybe the server has a configuration issue which hinders the processing or the acceptance of the messages by Medic-Api Follow the steps:\n Navigate to /srv/storage/gardener/logs/  Perform ls -lt to arrange the log files in order of modified date. Note the concerned file which was last modified on the date you are investigating Pipe it to grep to get only SMS logs e.g grep api/sms medic_medic_medic-api4.log. As below, note the errors and work from there.    cd /srv/storage/gardener/logs/ ls -lt grep api/sms medic_medic_medic-api4.log  If the above steps don\u0026rsquo;t yield the problem, get the Android logs using the steps outlined in the doc in this link, note the make/model/android version their gateway handset is and escalate with those details to the PM/project techlead. Tip: Insist on screenshots even for the most trivial things that partners insist they have performed as you asked. They are also good for giving you a mental image of what is happenning on the phone remotely.\n ","excerpt":"In a techlead heaven, we would have immeadiate physical access to gateway phones, but alas, most of …","ref":"/beta/apps/guides/gateway/troubleshooting/","title":"Troubleshooting"},{"body":"","excerpt":"","ref":"/beta/apps/guides/database-management/","title":"Database Management"},{"body":"","excerpt":"","ref":"/beta/apps/guides/data-management/","title":"Document Management"},{"body":"","excerpt":"","ref":"/beta/apps/guides/hosting/","title":"Hosting"},{"body":"Utils Utility functions in the Core Framework can make common tasks much easier. These are available only for Tasks and Targets. To use the function call Utils.\u0026lt;function-name\u0026gt;(\u0026lt;params\u0026gt;), for example Utils.addDate(report.reported_date, 10).\n   Name Description     isTimely(date, event) Returns true if the given date is after the start date and before the end date of the event.   addDate(date, days) Returns a new Date set to midnight the given number of days after the given date. If no date is given the date defaults to today.   getLmpDate(doc) Attempts to work out the LMP from the given doc. If no LMP is given it defaults to four weeks before the reported_date.   getSchedule(name) Returns the task schedule with the given name from the configuration.   getMostRecentTimestamp(reports, form) Returns the reported_date of the most recent of the reports with form ID matching the given form.   getMostRecentReport(reports, form) Like getMostRecentTimestamp but returns the report, not just the reported_date.   isFormSubmittedInWindow(reports, form, start, end) Returns true if any of the given reports are for the given form and were reported after start and before end.   isFirstReportNewer(firstReport, secondReport) Returns true if the firstReport was reported before the secondReport.   isDateValid(date) Returns true if the given date is a validate JavaScript Date.   now() Returns the current Date.   MS_IN_DAY A constant for the number of milliseconds in a day.    Note Please open an issue if you\u0026rsquo;d like other functions included.  Nools Extras Helper variables and functions can be defined in nools-extras.js, which is shared by both tasks.js and targets.js. The following are global variables that can be used:\n   Variable Description     c.contact The contact\u0026rsquo;s doc. All contacts have type of either person or place.   c.reports An array of all the reports submitted about the contact.   console Useful for outputting debugging statements. Should not be used in production code.   Utils Useful functions across projects are available, and describe in the Utils section.    Contact Summary Extras Helper variables and functions for the contact summary can be defined in contact-summary-extras.js. There are several variables available to inspect to generate the summary information:\n   Variable Description     contact The currently selected contact. This has minimal stubs for the contact.parent, so if you want to refer to a property on the parent use lineage below.   reports An array of reports for the contact.   lineage An array of the contact\u0026rsquo;s parents (2.13+), eg lineage[0] is the parent, lineage[1] is the grandparent, etc. Each lineage entry has full information for the contact, so you can use lineage[1].contact.phone.    ","excerpt":"Utils Utility functions in the Core Framework can make common tasks much easier. These are available …","ref":"/beta/apps/reference/functions/","title":""},{"body":"Interaction with SMS providers Medic can use medic-gateway and third party aggregators to send and receive SMS messages.\nWhen an SMS report comes in from a user, medic-sentinel adds the appropriate list of scheduled messages (to be sent at a future date) to the report doc.\nPeriodically, sentinel checks for messages that need to be sent, and sets their state to pending if their scheduled sending time has been reached or passed.\nPeriodically, the aggregator checks for messages that need to be sent (i.e. that are in pending state).\nThe aggregator also reports on the status of the messages it\u0026rsquo;s sending.\nMessage statuses/states Both webapp and the aggregator store states/statuses of the messages to keep track of the exchange. They each have their set of statuses, which sometimes are called the same but do not mean the same thing. Watch out.\nMessage statuses in medic-gateway See https://github.com/medic/medic-gateway#content\nMessage states in medic    State Description     scheduled Not yet due. Messages as part of a configured schedule start in this state and are changed to pending when due.   pending Due to be sent. The SMS gateway should pick this up for sending. Auto replies and instant messages start in this state.   forwarded-to-gateway Message has been sent to gateway.   received-by-gateway Has been received by the gateway.   forwarded-by-gateway Gateway has tried sending the message.   sent Successfully delivered to the sms network.   delivered Successfully received by the recipient\u0026rsquo;s device.   failed The sending attempt failed. Sending will not be retried without user intervention.   denied This will not be sent. The recipient phone number is configured to be denied via outgoing_deny_list, outgoing_deny_with_alphas, or outgoing_deny_shorter_than.   cleared This will not be sent as a report has triggered an event to stop it. This can happen if a patient visit has occurred before the visit reminder is sent.   muted This will not be sent as the task has been deliberately stopped. Messages in this state can be unmuted by user action.    Timeline of the medic-gateway protocol for webapp-originating message Read the table below like a vertical timeline : each time an event happens, the states/statuses corresponding to the message get updated.\nNote 1 : Gateway only sends a status update for a message only if the \u0026ldquo;needs forwarding\u0026rdquo; flag for the message status is true, and then sets it back to false. So it only sends status updates once.\nNote 2 : If api sends the same WO message again, then gateway sets its needs forwarding flag to true, and so sends the status at the next poll.\nNote 3 : not all of the events below happen every time : this is assuming only one step of SMS-sending happens between each poll. If several steps happened, then some of the events below are skipped. If several status changes have happened between polls, Gateway will report the multiple new statuses at the next poll.\n   number Event webapp state gateway status gateway \u0026ldquo;Needs forwarding\u0026rdquo; flag     1 Due date to send the message passes pending \u0026mdash;    2 Gateway polls and gets a new WO message forwarded-to-gateway \u0026mdash; \u0026mdash;   3 Gateway saves message in its DB forwarded-to-gateway UNSENT true   4 Gateway reports UNSENT status for the message received-by-gateway UNSENT false   5 Gateway sends the message received-by-gateway PENDING true   6 Gateway reports PENDING status for the message forwarded-by-gateway PENDING false   7 Gateway gets confirmation the message left forwarded-by-gateway SENT true   8 Gateway reports SENT status for the message sent SENT false   9 Gateway gets confirmation the message arrived sent DELIVERED true   10 Gateway reports DELIVERED status for the message delivered DELIVERED false    ","excerpt":"Interaction with SMS providers Medic can use medic-gateway and third party aggregators to send and …","ref":"/beta/apps/reference/sms-states/","title":""},{"body":"In version 2.13.0 and higher, you can configure app forms to generate additional docs upon submission. You can create one or more docs using variations on the configuration described below. One case where this can be used is to register a newborn from a delivery report, as shown below. First, here is an overview of what you can do and how the configuration should look in XML:\nExtra Docs  Extra docs can be added by defining structures in the model with the attribute db-doc=\u0026quot;true\u0026rdquo;. Note that you must have lower-case true in your XLSform, even though Excel will default to TRUE.  Example Form Model \u0026lt;data\u0026gt; \u0026lt;root_prop_1\u0026gt;val A\u0026lt;/root_prop_1\u0026gt; \u0026lt;other_doc db-doc=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;type\u0026gt;whatever\u0026lt;/type\u0026gt; \u0026lt;other_prop\u0026gt;val B\u0026lt;/other_prop\u0026gt; \u0026lt;/other_doc\u0026gt; \u0026lt;/data\u0026gt; Resulting Docs Report (as before):\n{ _id: '...', _rev: '...', type: 'report', _attachments: { xml: ... ], fields: { root_prop_1: 'val A', } } Other doc:\n{ \u0026#34;_id\u0026#34;: \u0026#34;...\u0026#34;, \u0026#34;_rev\u0026#34;: \u0026#34;...\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;whatever\u0026#34;, \u0026#34;other_prop\u0026#34;: \u0026#34;val B\u0026#34; } Linked Docs  Linked docs can be referred to using the doc-ref attribute, with an xpath. This can be done at any point in the model, e.g.:  Example Form Model \u0026lt;sickness\u0026gt; \u0026lt;sufferer db-doc-ref=\u0026#34;/sickness/new\u0026#34;\u0026gt; \u0026lt;new db-doc=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;type\u0026gt;person\u0026lt;/type\u0026gt; \u0026lt;name\u0026gt;Gómez\u0026lt;/name\u0026gt; \u0026lt;original_report db-doc-ref=\u0026#34;/sickness\u0026#34;/\u0026gt; \u0026lt;/new\u0026gt; \u0026lt;/sickness\u0026gt; Resulting Docs Report:\n{ \u0026#34;_id\u0026#34;: \u0026#34;abc-123\u0026#34;, \u0026#34;_rev\u0026#34;: \u0026#34;...\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;report\u0026#34;, \u0026#34;fields\u0026#34;: { \u0026#34;sufferer\u0026#34;: \u0026#34;def-456\u0026#34; } } Other doc:\n{ \u0026quot;_id\u0026quot;: \u0026quot;def-456\u0026quot;, \u0026quot;_rev\u0026quot;: \u0026quot;...\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;person\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Gómez\u0026quot;, \u0026quot;original_report\u0026quot;: \u0026quot;abc-123\u0026quot; } Repeated Docs  Can have references to other docs, including the parent These currently cannot be linked from other docs, as no provision is made for indexing these docs  Example Form \u0026lt;thing\u0026gt; \u0026lt;name\u0026gt;Ab\u0026lt;/name\u0026gt; \u0026lt;related db-doc=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;type\u0026gt;relative\u0026lt;/type\u0026gt; \u0026lt;name\u0026gt;Bo\u0026lt;/name\u0026gt; \u0026lt;parent db-doc-ref=\u0026#34;/thing\u0026#34;/\u0026gt; \u0026lt;/related\u0026gt; \u0026lt;related db-doc=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;type\u0026gt;relative\u0026lt;/type\u0026gt; \u0026lt;name\u0026gt;Ca\u0026lt;/name\u0026gt; \u0026lt;parent db-doc-ref=\u0026#34;/thing\u0026#34;/\u0026gt; \u0026lt;/related\u0026gt; \u0026lt;/artist\u0026gt; Resulting Docs Report:\n{ \u0026#34;_id\u0026#34;: \u0026#34;abc-123\u0026#34;, \u0026#34;_rev\u0026#34;: \u0026#34;...\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;report\u0026#34;, \u0026#34;fields\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;Ab\u0026#34; } } Other docs:\n{ \u0026#34;_id\u0026#34;: \u0026#34;...\u0026#34;, \u0026#34;_rev\u0026#34;: \u0026#34;...\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;relative\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Bo\u0026#34;, \u0026#34;parent\u0026#34;: \u0026#34;abc-123\u0026#34;, } { \u0026#34;_id\u0026#34;: \u0026#34;...\u0026#34;, \u0026#34;_rev\u0026#34;: \u0026#34;...\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;relative\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Ch\u0026#34;, \u0026#34;parent\u0026#34;: \u0026#34;abc-123\u0026#34;, } Linked Docs Example This example shows how you would register a single newborn from a delivery report.\nFirst, the relevant section of the delivery report XLSForm file: Here is the corresponding portion of XML generated after converting the form:\n\u0026lt;repeat\u0026gt; \u0026lt;child_repeat db-doc=\u0026#34;true\u0026#34; jr:template=\u0026#34;\u0026#34;\u0026gt; \u0026lt;child_name/\u0026gt; \u0026lt;child_gender/\u0026gt; \u0026lt;child_doc db-doc-ref=\u0026#34; /delivery/repeat/child_repeat \u0026#34;/\u0026gt; \u0026lt;created_by_doc db-doc-ref=\u0026#34;/delivery\u0026#34;/\u0026gt; \u0026lt;name/\u0026gt; \u0026lt;sex/\u0026gt; \u0026lt;date_of_birth/\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;_id/\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;_id/\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;_id/\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;type\u0026gt;person\u0026lt;/type\u0026gt; \u0026lt;/child_repeat\u0026gt; \u0026lt;/repeat\u0026gt; If you\u0026rsquo;ve done your configuration correctly, all you should see when you click on the submitted report from the Reports tab is the child_doc field with an _id that corresponds to the linked doc. In this case, you could look for that _id on the People tab or in the DB itself to confirm that the resulting doc looks correct.\nRepeated Docs Example This example extends the above example to show how you would register one or multiple newborns from a delivery report. This allows you to handle multiple births.\nFirst, the relevant section of the delivery report XLSForm file: Here is the corresponding portion of XML generated after converting the form:\n\u0026lt;repeat\u0026gt; \u0026lt;child_repeat db-doc=\u0026#34;true\u0026#34; jr:template=\u0026#34;\u0026#34;\u0026gt; \u0026lt;child_name/\u0026gt; \u0026lt;child_gender/\u0026gt; \u0026lt;created_by_doc db-docs-ref=\u0026#34;/delivery\u0026#34;/\u0026gt; \u0026lt;name/\u0026gt; \u0026lt;sex/\u0026gt; \u0026lt;date_of_birth/\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;_id/\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;_id/\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;_id/\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;type\u0026gt;person\u0026lt;/type\u0026gt; \u0026lt;/child_repeat\u0026gt; \u0026lt;/repeat\u0026gt; If you\u0026rsquo;ve done your configuration correctly, all you should see when you click on the submitted report from the Reports tab is that there will be no information on the children created. You will find the created docs as siblings to the subject of the previously submitted report. Each of these child docs will have a field created_by_doc whose value is the _id of the report that created them. You can also look in the DB itself to confirm that the resulting docs look correct.\n","excerpt":"In version 2.13.0 and higher, you can configure app forms to generate additional docs upon …","ref":"/beta/apps/guides/forms/additional-docs/","title":"Creating Additional Docs from App Forms"},{"body":"As of v3.6.0, SMS messages can be sent and received using the Africa\u0026rsquo;s Talking service.\nAfrica\u0026rsquo;s Talking configuration First generate a long unique key to use as the medic-api-key.\nLog on to the Africa\u0026rsquo;s Talking Dashboard and configure your callback URLs as follows.\n Delivery Reports: https://\u0026lt;hostname\u0026gt;/api/v1/sms/africastalking/delivery-reports?key=\u0026lt;medic-api-key\u0026gt; Incoming Messages: https://\u0026lt;hostname\u0026gt;/api/v1/sms/africastalking/incoming-messages?key=\u0026lt;medic-api-key\u0026gt;  Then generate an \u0026ldquo;API Key\u0026rdquo; (we\u0026rsquo;ll refer to this as the at-api-key) and save this in your Medic configuration covered below.\nMedic configuration API keys The API keys should be treated as securely as a password as anyone with access to them will be able to send messages using your account. Therefore we store them in the CouchDB configuration.\nTo add the credentials to the admin config you need to either PUT the value using curl or similar:\ncurl -X PUT https://\u0026lt;user\u0026gt;:\u0026lt;pass\u0026gt;@\u0026lt;domain\u0026gt;/_node/couchdb@127.0.0.1/_config/medic-credentials/africastalking.com:incoming -d \u0026#39;\u0026#34;\u0026lt;medic-api-key\u0026gt;\u0026#34;\u0026#39; curl -X PUT https://\u0026lt;user\u0026gt;:\u0026lt;pass\u0026gt;@\u0026lt;domain\u0026gt;/_node/couchdb@127.0.0.1/_config/medic-credentials/africastalking.com:outgoing -d \u0026#39;\u0026#34;\u0026lt;at-api-key\u0026gt;\u0026#34;\u0026#39; (Note that couchdb@127.0.0.1 is the local node name, and may be different for you depending on your setup.)\nYou can also add it via Fauxton:\n Navigate to the Config screen Click Add Option The Section should be medic-credentials, the Name should be africastalking.com:incoming or africastalking.com:outgoing, and the value should be the relevant API key. Click Create You should then be able to see your credential in the list of configuration shown  App settings Update your app settings as follows.\n{ \u0026#34;sms\u0026#34;: { \u0026#34;outgoing_service\u0026#34;: \u0026#34;africas-talking\u0026#34;, \u0026#34;reply_to\u0026#34;: \u0026#34;\u0026lt;africa\u0026#39;s talking shortcode\u0026gt;\u0026#34;, \u0026#34;africas_talking\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;\u0026lt;africa\u0026#39;s talking username\u0026gt;\u0026#34; } } } Testing To test your integration, set your \u0026ldquo;username\u0026rdquo; to \u0026ldquo;sandbox\u0026rdquo;, log in to Africa\u0026rsquo;s Talking, and go to the Sandbox app.\n","excerpt":"As of v3.6.0, SMS messages can be sent and received using the Africa\u0026rsquo;s Talking service. …","ref":"/beta/apps/guides/sms/africas-talking/","title":"Africa's Talking SMS Aggregator"},{"body":"Triggering Calls and SMS When a XForm is loaded on a phone you can start a phone call or trigger the sending of an SMS within the form itself. This can be useful if within a task or assessment you want to tell the user to contact a patient, or perhaps a health worker at a facility.\nTo set up the call or SMS you\u0026rsquo;ll need to create a link with tel: or sms: within a note field. To create the link, use the markdown link format, eg [Call Patient](tel:+2547009875000). You can specify the content of the SMS by using the body parameter, eg [Send SMS](sms://+25470098765000?body=Hello World!).\nThe phone number and message can be generated from fields within the XForm. For instance, if you have patient_name, patient_phone and message fields, you can generate the SMS as follows:\n  XLSForm [Send SMS to ${patient_name}](sms://${patient_phone}?body=${message})\n  XForm [Send SMS to \u0026lt;output value=\u0026quot; /data/patient_name \u0026quot;/\u0026gt;](sms://\u0026lt;output value=\u0026quot; /data/patient_phone \u0026quot;/\u0026gt;?body=\u0026lt;output value=\u0026quot; /data/message \u0026quot;/\u0026gt;)\n  If you want to use a button to make the action more obvious, this can be done using HTML and CSS within the note:\n[\u0026lt;span style='background-color: #CC0000; color:white; padding: 1em; text-decoration: none; '\u0026gt;Call the patient\u0026lt;/span\u0026gt;](tel:${patient_phone}) Note that the SMS link notation can be interpreted differently from one phone to another. Some devices work well with sms:${phone}?body=${message}, others with sms://${phone}?body=${message}. You may find these SMS link tests helpful in determining what works on devices for your deployment.\nSending reports as SMS To define that an XForm should be converted to an SMS, add the field xml2sms to the form\u0026rsquo;s CouchDB doc and assign it a truthy value (either a boolean or a string).\nWhen submitting such a form, along with creating the report document, the app will try to compact the report\u0026rsquo;s content into an SMS that would be sent to the configured Gateway phone number.\nThere are two formats available - either using the ODK\u0026rsquo;s compact record representation for SMS, or Medic\u0026rsquo;s custom format. When the form compaction fails or returns no content, no SMS will be sent.\nODK compact record representation for SMS When xml2sms field value is Boolean true, the app will try to compact the form using this format. To get forms sent in this format, follow the ODK documentation.\nMedic Custom SMS representation To configure a form to send using Medic\u0026rsquo;s custom SMS definition, the value of xml2sms from the form\u0026rsquo;s CouchDB doc should be an string containing an Angular expression. This allows access to the fields property of the data_record doc created when saving the form submission to the database. Extra functions are also provided to make compiling a form submission more simple.\nSpecial Functions concat(...args)   ...args: 0 or more values to be concatenated.\n concat('A', 'bee', 'Sea') =\u0026gt; 'AbeeSea'    spaced(...args)   ...args: 0 or more values to be concatenated with spaces between them.\n spaced('A', 'bee', 'Sea') =\u0026gt; 'A bee Sea'    match(val, matchers)   val: the value to run matches against\n  matchers: a string representing values to match and their corresponding outputs\n match('a', 'a:Hay,b:bzz,c:see') =\u0026gt; 'Hay' match('b', 'a:Hay,b:bzz,c:see') =\u0026gt; 'bzz' match('c', 'a:Hay,b:bzz,c:see') =\u0026gt; 'c'    Examples Form Submission JSON doc.fields = { s_acc_danger_signs: { s_acc_danger_sign_seizure: 'no', s_acc_danger_sign_loss_consiousness: 'yes', s_acc_danger_sign_unable_drink: 'no', s_acc_danger_sign_confusion: 'yes', s_acc_danger_sign_vomit: 'no', s_acc_danger_sign_chest_indrawing: 'yes', s_acc_danger_sign_wheezing: 'no', s_acc_danger_sign_bleeding: 'yes', s_acc_danger_sign_lathargy: 'no', has_danger_sign: 'true', }, };  formDoc.report2sms concat( \u0026quot;U5 \u0026quot;, match(doc.s_acc_danger_signs.has_danger_sign, \u0026quot;true:DANGER, false:NO_DANGER\u0026quot;), \u0026quot; \u0026quot;, match(doc.s_acc_danger_signs.s_acc_danger_sign_seizure, \u0026quot;yes:S\u0026quot;), match(doc.s_acc_danger_signs.s_acc_danger_sign_loss_consiousness, \u0026quot;yes:L\u0026quot;), match(doc.s_acc_danger_signs.s_acc_danger_sign_unable_drink, \u0026quot;yes:D\u0026quot;), match(doc.s_acc_danger_signs.s_acc_danger_sign_confusion, \u0026quot;yes:C\u0026quot;), match(doc.s_acc_danger_signs.s_acc_danger_sign_vomit, \u0026quot;yes:V\u0026quot;), match(doc.s_acc_danger_signs.s_acc_danger_sign_chest_indrawing, \u0026quot;yes:I\u0026quot;), match(doc.s_acc_danger_signs.s_acc_danger_sign_wheezing, \u0026quot;yes:W\u0026quot;), match(doc.s_acc_danger_signs.s_acc_danger_sign_bleeding, \u0026quot;yes:B\u0026quot;), match(doc.s_acc_danger_signs.s_acc_danger_sign_lathargy, \u0026quot;yes:Y\u0026quot;) )  SMS content U5 DANGER LCIB ","excerpt":"Triggering Calls and SMS When a XForm is loaded on a phone you can start a phone call or trigger the …","ref":"/beta/apps/guides/forms/app-form-sms/","title":"Making Calls and Sending SMS from App Forms"},{"body":"Contact forms are used to create person or place types. Prior to version 3.7, CHT Core supported 4 contact types - 3 place types (clinic, health_center, district_hospital) and one person type (person). From version 3.7, an unlimited number of place and person types are supported. Each contact-type should ideally have two forms; one for creation, and another for editing.\nThese forms are stored in the forms/contact subfolder of the project config directory. The naming convention used sould be \u0026lt;contact_type_id-{create|edit}\u0026gt;.xlsx. The contact_type_id prefix should match what\u0026rsquo;s specified in the contact form settings page.\nPerson-type forms These have the simplest structure since we are only creating one thing - the actual contact. Below, we\u0026rsquo;ll look at the structure of the survey and settings sheets since these are critical to ensuring the contact is created correctly at the appropriate part of the hierarchy.\nSurvey sheet Section 1 and 3 are optional. We can pull in details of the logged in user as shown in section 1 and use that to log some metadata on the created documents as shown in section 3.\nSection 2 contains the core components of what will be saved in couchdb. The group name needs to match the contact type id specified in app_settings.json (if using the configurable hierarchy) or person if using the old-style hierarchy. To learn more about setting up configurable hieararchy, review the Hierarchy page. parent, type, contact_type and name attributes are mandatory for things to work correctly.\nSettings sheet We\u0026rsquo;ll need to replace PLACE_NAME with a name that corresponds to the created contact type. We\u0026rsquo;ll also need to replace PLACE_TYPE with the contact-type id specified in app_settings.json (for configurable ones) or person.\nPlace-type forms The main difference between place type and person type forms is that we can optionally create one or more person-type documents one of which can be linked to the created place as a contact.\nWe\u0026rsquo;ll look at a simple structure of a place forms showing all the necessary components\nSection 1 is similar to what has been described earlier for person forms.\nSection 2 specifies the contact that will be linked to the place being created. parent, type and contact_type and name are mandatory. This also applies to the place-type definition in section 4. contact on the other hand is not mandatory for the successful creation of a place. It usually more conventient to create a place and it\u0026rsquo;s primary contact at the same time.\nYou can also create additional contacts linked to the place being created when you have a structure similar to that shown in section 3.\nContact-edit forms The edit forms are much simpler in structure and one can specify only the relevant fields that need editing. The name of the group should match the contact-type being edited and the field names should correspond to what is saved in Couchdb.\nGeneric contact forms If your place forms are similar across all levels of your specified project hiearachy, you can templatise the form creation process. You\u0026rsquo;ll need to create the following files: place-type.json, PLACE_TYPE-create.xlsx and PLACE_TYPE-edit.xlsx.\nplace-type.json maps the place contact-type to a human readable description that will be shown on the app\u0026rsquo;s user interface.\nBoth PLACE_TYPE-create.xlsx and PLACE_TYPE-edit.xlsx will contain two placeholder values PLACE_TYPE and PLACE_NAME which will be replaced by the keys and values specified in place-type.json respectively during form conversion. Also, copies of the different place-type forms will be created (if they don\u0026rsquo;t exist) during the form conversion process with PLACE_TYPE being replaced with the keys specified in place-type.json.\nFor examples on how to structure the above files you can have a look at the sample configurations in CHT-core: default and standard.\n","excerpt":"Contact forms are used to create person or place types. Prior to version 3.7, CHT Core supported 4 …","ref":"/beta/apps/guides/forms/contact-forms/","title":"Contact Forms"},{"body":"Some times when couch2pg is replicating documents to postgres, it encounters very large info docs that are larger than the memory allocation of the document sync array and causes out-of-memory errors. To fix this, we need to delete this document so that couch2pg can proceed. Below are steps to follow to achieve this.\n Reduce the size of the replicated docs to a value of say 4 in the couch2pg.conf file so that you can get within the range of the failing document. Clone the existing couch2pg repo so that you can run couch2pg locally Edit the file lib/importer.js in the couch2pg source code to be able to log the doc-id of the problem doc Edit just logs doc_ids to the console, around line 100 of importer.js console.log(row.doc._id); Get the remote couch2pg environment variable settings and export them into your profile terminal Create an ssh reverse tunnel from the postgres server to your laptop Run couch2pg locally so that you can see the doc-ids on console till it fails From the ids printed on console try loading the docs in the couchdb web access(Futon or Fauxton), the problem doc is usually big and won\u0026rsquo;t load This will help you identify the problem doc Curl the document to your pc and back it up Back up the document for further analysis Delete the document using curl curl --head \u0026quot;\u0026lt;HOST\u0026gt;/\u0026lt;DB\u0026gt;/\u0026lt;DOC_ID\u0026gt;\u0026quot; This returns something like  HTTP/1.1 200 OK Cache-Control: must-revalidate Content-Length: 307 Content-Type: application/json Date: Tue, 25 Jun 2019 11:58:29 GMT ETag: \u0026quot;2-6beeb38da9b096bacfe2fa769e5171be\u0026quot; Server: CouchDB/2.3.1 (Erlang OTP/21) X-Couch-Request-ID: e4aa7a8696 X-CouchDB-Body-Time: 0 The ETag is the rev. Delete document with curl: curl -X DELETE \u0026quot;\u0026lt;HOST\u0026gt;/\u0026lt;DB\u0026gt;/\u0026lt;DOC_ID\u0026gt;?rev=\u0026lt;THE_REV\u0026gt;\u0026quot;\n","excerpt":"Some times when couch2pg is replicating documents to postgres, it encounters very large info docs …","ref":"/beta/apps/guides/database-management/couch2pg-oom-errors/","title":"Fixing couch2pg Memory Errors"},{"body":"To invalidate a session in couchdb, there are two options:  Change the session signing certificate on the server Change the password and/or salt for the user whose session should be invalidated  There are drawbacks to note with each. Option 1 will invalidate all sessions; option 2 will invalidate all sessions for that user, and also their password.\nBecause of the nature of couch\u0026rsquo;s session management, there is no way to see a list of active/open sessions. Invalidating a specific session key could be achieved by blacklisting a cookie value in e.g. nginx or API, but this is unlikely to be of practical value.\n","excerpt":"To invalidate a session in couchdb, there are two options:  Change the session signing certificate …","ref":"/beta/apps/guides/database-management/couchdb-authentication/","title":"CouchDB Authentication"},{"body":"Seeding data with medic-conf Users, contacts, and report data can be specified in comma-separated value (CSV) files, then converted to JavaScript Object Notation (JSON) files and uploaded into your instance using medic-conf. This documentation will cover the CSV notation used, fetching CSV files from Google Sheets, converting the CSV files into JSON docs, and then uploading the data from the JSON files to your instance.\nConverting CSVs Running medic-conf with the csv-to-docs action converts CSV files from the csv folder into JSON docs to be uploaded to your instance. The JSON files are stored in the json_docs folder. Instructions for creating the CSV files are in sections below.\nUploading CSVs Running medic-conf with the upload-docs action will upload the JSON docs that were generated from the CSV files to your instance. For example, running medic-conf --local upload-docs will upload the converted docs into your local instance. The target location --local can be replaced with an instance or URL. See medic-conf for detailed instructions.\nCreating CSV files for Contacts, Reports A separate CSV file is needed for each type of place, person, or report in your project\u0026rsquo;s local csv folder. The name of the file determines the type of doc created for rows contained in the file. The possible types are: report, person, and place. Each of these has a further specifier provided in the filename:\n place.{place_type}.csv: where {place_type} is the type of place specified in the file. By default, the place types are one of clinic, health_center, or district_hospital. As of 3.7 of the Core Framework, the number of place types and their names can be configured — the {place_type} should match with the hierarchy names used. person.{parent_place_type}.csv: where {parent_place_type} is the type of place to which the people in the file will belong. report.{form_id}.csv: where {form_id} is the form ID for all the reports in the file. You will need one file per form ID  Here are some examples:\n File named place.district_hospital.csv adds the property \u0026quot;type\u0026quot;:\u0026quot;district_hospital\u0026quot; File named person.clinic.csv add the property \u0026quot;type\u0026quot;:\u0026quot;person\u0026quot; File named report.immunization_visit.csv add the property \u0026quot;type\u0026quot;:\u0026quot;report\u0026quot;, \u0026quot;form\u0026quot;:\u0026quot;immunization_visit\u0026quot;  In each of these files a header row is used to specify the JSON field names, and each subsequent row specifies the corresponding values for a doc. A _id field is automatically generated with a universally unique identifier.\nHere is an example of a csv/person.clinic.csv file for people belonging to clinics:\nname,sex,date_of_birth Adriana Akiyama,female,1985-12-31 Becky Backlund,female,1987-10-17 Carson Crane,male,2015-01-23 Here is the table representation of the CSV:\n   name sex date_of_birth     Adriana Akiyama female 1985-12-31   Becky Backlund female 1987-10-17   Carson Crane male 2015-01-23    Converting that CSV file to JSON docs with the csv-to-docs action would generate three files, one for each person. Here is one of the corresponding JSON files, json_docs/dbfbc0f0-117a-59ec-9542-3313fb10ef25.doc.json, which was created from the CSV data above:\n{ \u0026#34;type\u0026#34;: \u0026#34;person\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Adriana Akiyama\u0026#34;, \u0026#34;sex\u0026#34;: \u0026#34;female\u0026#34;, \u0026#34;date_of_birth\u0026#34;: \u0026#34;1985-12-31\u0026#34;, \u0026#34;_id\u0026#34;: \u0026#34;dbfbc0f0-117a-59ec-9542-3313fb10ef25\u0026#34; } Special notations Specifying property type By default, values are parsed as strings. To parse a CSV column as a different JSON type, append the JSON type name to the column definition, e.g.\ncolumn_one,column_two:bool,column_three:int,column_four:float,column_five:date,column_six:timestamp some string,true,1,2.3,2017-12-31,1513255007072  This would create a structure such as:\n{ \u0026#34;_id\u0026#34;: \u0026#34;09efb53f-9cd8-524c-9dfd-f62c242f1817\u0026#34;, \u0026#34;column_one\u0026#34;: \u0026#34;some string\u0026#34;, \u0026#34;column_two\u0026#34;: true, \u0026#34;column_three\u0026#34;: 1, \u0026#34;column_four\u0026#34;: 2.3, \u0026#34;column_five\u0026#34;: \u0026#34;2017-12-31T00:00:00.000Z\u0026#34;, \u0026#34;column_six\u0026#34;: 1513255007072 } Excluding column A special column type, excluded, is used for excluding a column from the final JSON data:\nmy_column_that_will_not_be_a_property:excluded  This can be useful if using a column for doc references.\nIncluding another doc Often times database documents need to include or refer to other documents in the database. This can be achieved with queries across CSV files, which is done by specifying a query in the column header. The query specifies the doc type (person or place) and matching condition.\nFor instance, to include the parent district\u0026rsquo;s doc in a health center\u0026rsquo;s doc, the parent:place WHERE reference_id=COL_VAL column header is used. The COL_VAL is a special notation for that column\u0026rsquo;s value for the row, and it will be used to match against the reference_id field in all other places. Given these example CSVs, you can see the corresponding JSON structure:\nplace.district.csv:\n   reference_id:excluded is_name_generated name reported_date:timestamp     district_1 false D1 1544031155715   district_2 false D2 1544031155715   district_3 false D3 1544031155715    place.health_center.csv:\n   reference_id:excluded parent:place WHERE reference_id=COL_VAL is_name_generated name reported_date:timestamp     health_center_1 district_1 false HC1 1544031155715   health_center_2 district_2 false HC2 1544031155715   health_center_3 district_3 false HC3 1544031155715    480d0cd0-c021-5d55-8c63-d86576d592fc.doc.json:\n{ \u0026#34;type\u0026#34;: \u0026#34;health_center\u0026#34;, \u0026#34;parent\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;district_hospital\u0026#34;, \u0026#34;parent\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;is_name_generated\u0026#34;: \u0026#34;false\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;D2\u0026#34;, \u0026#34;external_id\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;notes\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;geolocation\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;reported_date\u0026#34;: 1544031155715, \u0026#34;_id\u0026#34;: \u0026#34;f223f240-5d6a-5a7a-91d4-46d3c59de73e\u0026#34; }, \u0026#34;is_name_generated\u0026#34;: \u0026#34;false\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;HC7\u0026#34;, \u0026#34;external_id\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;notes\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;geolocation\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;reported_date\u0026#34;: 1544031155715, \u0026#34;_id\u0026#34;: \u0026#34;480d0cd0-c021-5d55-8c63-d86576d592fc\u0026#34; } Including value from another doc Similar to including another doc, it is also possible to get the value of a specific field in another doc. For instance, if parent:GET _id OF place WHERE reference_id=COL_VAL were used in the example above, the parent field\u0026rsquo;s value would have been set to the _id of the refered to doc instead of including the whole doc. Note that _id is a generated value included in all generated docs.\n   reference_id:excluded parent:GET _id OF place WHERE reference_id=COL_VAL is_name_generated name reported_date:timestamp     health_center_1 district_1 false HC1 1544031155715   health_center_2 district_2 false HC2 1544031155715   health_center_3 district_3 false HC3 1544031155715    The resulting doc would be as follows, with the _id from district_1 as the parent value:\n{ \u0026#34;type\u0026#34;: \u0026#34;health_center\u0026#34;, \u0026#34;parent\u0026#34;: \u0026#34;0c31056a-3a80-54dd-b136-46145d451a66\u0026#34;, \u0026#34;is_name_generated\u0026#34;: \u0026#34;false\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;HC3\u0026#34;, \u0026#34;external_id\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;notes\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;geolocation\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;reported_date\u0026#34;: 1544031155715, \u0026#34;_id\u0026#34;: \u0026#34;45293356-353c-5eb1-9a41-baa3427b4f69\u0026#34; } Creating CSV files for users To create user accounts from CSV files, a users.csv file will be needed in the csv folder. The users.csv file requires columns for username and password. Additional columns can be used for any additional fields needed on the user\u0026rsquo;s doc, for example roles, phone. Running the csv-to-docs upload-docs create-users actions in that order will generate the necessary JSON docs with a users.csv file in your working directory, and then create the people, places, and users.\nThe following sections describe the different ways to associate the new users to contacts.\nCreating new users with existing contacts When creating users that are associated to existing contacts, contact and place columns should be created. Each row should have the UUID of an existing person for contact, and an existing place for place.\nCreating new users with new contacts To create new contacts for each new user provide values for contact.name, place.name, and place.parent (can be existing place), as seen in this example CSV:\nusername,password,roles,name,phone,contact.name,place.c_prop,place.type,place.name,place.parent alice,Secret_1,district-admin,Alice Example,+123456789,Alice,p_val_a,health_center,alice area, district_uuid bob,Secret_1,district-admin,bob Example,+123456789,bob,p_val_a,health_center,bob area,disctrict_uuid The username, password, contact.name, place.type, place.name columns are required to have functional users with new places.\nCreating new users linked to contacts in CSV files To associate the new users to contacts that will also be created with the csv-to-docs action, use reference queries to the contacts. For instance, the column header for the person would be contact:person WHERE reference_id=COL_VAL, and for the place would be place:GET _id OF place WHERE reference_id=COL_VAL.\nHere is a example of how the three CSV files need to be configured to setup a user linked to existing place and contact.\ncsv/place.health_center.csv:\nreference_id:excluded,parent:place WHERE reference_id=COL_VAL,is_name_generated,name,reported_date:timestamp health_center_1,district_1,FALSE,HC1,1544031155715 Generated JSON doc for the health center:\n{ \u0026#34;type\u0026#34;: \u0026#34;health_center\u0026#34;, \u0026#34;parent\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;district_hospital\u0026#34;, \u0026#34;parent\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;is_name_generated\u0026#34;: \u0026#34;false\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;District1\u0026#34;, \u0026#34;external_id\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;notes\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;geolocation\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;reported_date\u0026#34;: 1544031155715, \u0026#34;_id\u0026#34;: \u0026#34;e8f9739a-5d37-5b1e-be3c-a571b2c2409b\u0026#34; }, \u0026#34;is_name_generated\u0026#34;: \u0026#34;FALSE\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;HC1\u0026#34;, \u0026#34;reported_date\u0026#34;: 1544031155715, \u0026#34;_id\u0026#34;: \u0026#34;8606a91a-f454-56e3-a089-0b686af3c6b7\u0026#34; } csv/person.csv:\nreference_id:excluded,parent:place WHERE reference_id=COL_VAL,name,phone,sex,role,reported_date,patient_id p_hc1,health_center_1,Bob Johnson 1,+16143291527,male,manager,1552494835669,60951 p_hc2,health_center_1,Bob Johnson 2,+16143291528,male,manager,1552494835669,60951 Generated JSON doc for the person:\n{ \u0026#34;type\u0026#34;: \u0026#34;person\u0026#34;, \u0026#34;parent\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;health_center\u0026#34;, \u0026#34;parent\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;district_hospital\u0026#34;, \u0026#34;parent\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;is_name_generated\u0026#34;: \u0026#34;false\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;District1\u0026#34;, \u0026#34;external_id\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;notes\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;geolocation\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;reported_date\u0026#34;: 1544031155715, \u0026#34;_id\u0026#34;: \u0026#34;e8f9739a-5d37-5b1e-be3c-a571b2c2409b\u0026#34; }, \u0026#34;is_name_generated\u0026#34;: \u0026#34;FALSE\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;HC1\u0026#34;, \u0026#34;reported_date\u0026#34;: 1544031155715, \u0026#34;_id\u0026#34;: \u0026#34;8606a91a-f454-56e3-a089-0b686af3c6b7\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;Bob Johnson 1\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;+16143291527\u0026#34;, \u0026#34;sex\u0026#34;: \u0026#34;male\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;manager\u0026#34;, \u0026#34;reported_date\u0026#34;: \u0026#34;1552494835669\u0026#34;, \u0026#34;patient_id\u0026#34;: \u0026#34;60951\u0026#34;, \u0026#34;_id\u0026#34;: \u0026#34;65c52076-84c5-53a2-baca-88e6ec6e0875\u0026#34; } csv/users.csv:\nusername,password,roles,phone,contact:person WHERE reference_id=COL_VAL,place:GET _id OF place WHERE reference_id=COL_VAL ac1,Secret_1,district_admin:red1,+123456789,p_hc1,health_center_1 ac2,Secret_1,district_admin:supervisor,+123456789,p_hc2,health_center_1 ac3,Secret_1,district_admin,+123456789,p_hc3,health_center_1 ac4,Secret_1,district_admin,+123456789,p_hc4,health_center_1 This will generate the users.csv file in the working directory which is used by the create-users action. The contact and place fields should be resolved to the actual UUIDs.\np_hc1\u0026quot;username\u0026quot;,\u0026quot;password\u0026quot;,\u0026quot;roles\u0026quot;,\u0026quot;contact\u0026quot;,\u0026quot;phone\u0026quot;,\u0026quot;place\u0026quot; \u0026quot;ac1\u0026quot;,\u0026quot;Secret_1\u0026quot;,\u0026quot;district_admin:red1\u0026quot;,\u0026quot;65c52076-84c5-53a2-baca-88e6ec6e0875\u0026quot;,\u0026quot;+123456789\u0026quot;,\u0026quot;8606a91a-f454-56e3-a089-0b686af3c6b7\u0026quot; \u0026quot;ac2\u0026quot;,\u0026quot;Secret_1\u0026quot;,\u0026quot;district_admin:supervisor\u0026quot;,\u0026quot;b7d0dbd5-beeb-52a8-8e4c-513d0baece8e\u0026quot;,\u0026quot;+123456789\u0026quot;,\u0026quot;8606a91a-f454-56e3-a089-0b686af3c6b7\u0026quot; Using CSV files on Google Drive Individual Google Sheets can be used for each CSV file, which can be exported manually to CSV file format, or linked to your project to be downloaded by medic-conf.\nTo fetch the files from Google Drive run the fetch-csvs-from-google-drive action in medic-conf. This will download the CSV files specified in the csvs-on-google-drive.json file, and place them into the csv folder.\nLinking to Google Drive The file csvs-on-google-drive.json in your project\u0026rsquo;s home directory will consist of a key value pair for each CSV file. The keys must be the filename where the CSV will be stored locally — see the CSV file documentation for the notation. The value of each key must be the ID of the corresponding file in Google Drive — the ID can be obtained from the URL eg https://docs.google.com/spreadsheets/d/{FILE_ID}/edit.\n{ \u0026#34;person.clinic.csv\u0026#34;:\u0026#34;google_drive_ID\u0026#34;, } Google Drive authentication Medic-conf leverages Google authentication to access Google Drive. You will need to create a client_secrets file named .gdrive.secrets.json and place it in your working directory, and create a token.\nCreate the .gdrive.secrets.json file by downloading the client_secrets.json from Google. You will need a CLIENT_ID, CLIENT_SECRET and REDIRECT_URL. You can find these pieces of information by going to the Developer Console, clicking your project \u0026ndash;\u0026gt; APIs \u0026amp; auth \u0026ndash;\u0026gt; credentials \u0026ndash;\u0026gt; Download JSON. This will download the credentials but will need modified to be in this structure.\n{ \u0026#34;client_id\u0026#34;: \u0026#34;\u0026lt;client_id\u0026gt;.apps.googleusercontent.com\u0026#34;, \u0026#34;project_id\u0026#34;: \u0026#34;proj_id\u0026#34;, \u0026#34;auth_uri\u0026#34;: \u0026#34;https://accounts.google.com/o/oauth2/auth\u0026#34;, \u0026#34;token_uri\u0026#34;: \u0026#34;https://accounts.google.com/o/oauth2/token\u0026#34;, \u0026#34;auth_provider_x509_cert_url\u0026#34;: \u0026#34;https://www.googleapis.com/oauth2/v1/certs\u0026#34;, \u0026#34;client_secret\u0026#34;: \u0026#34;client_secret\u0026#34;, \u0026#34;redirect_uris\u0026#34;: [\u0026#34;urn:ietf:wg:oauth:2.0:oob\u0026#34;,\u0026#34;http://localhost\u0026#34;] } See Google\u0026rsquo;s docs here on Oauth2\n","excerpt":"Seeding data with medic-conf Users, contacts, and report data can be specified in comma-separated …","ref":"/beta/apps/guides/data-management/csv-to-docs/","title":"CSV to Docs"},{"body":"Conflicts are a natural and unavoidable part of working in a distributed system.\nConflicts occur when one client (eg PouchDB) attempts to replicate to another (eg CouchDB), and the document that the first has does not have the same tree of changes that the second one has.\nAn example To make it clear what\u0026rsquo;s happening, let\u0026rsquo;s walk through an example. If you already understand conflicts feel free to skip this section.\nLet\u0026rsquo;s say you register a pregnancy in the UI. And then you notice that you got the LMP wrong, so you hit edit and quickly make the change.\nMeanwhile, sentinel notices that you registers a pregnancy, and before you have a chance to change the LMP, sets up a bunch of recurring messages, editing the document.\nSentinel has now made a change to the first version of your document, and you\u0026rsquo;re trying to also make a change to the first version. These conflict.\nHow to manage conflicts Conflicts will appear on the #downtime Slack channel, along with the other alerts. If a server you manage has a conflict, you should do the following:\nIdentify why conflicts are occuring Take a look at the conflicts view, at https://yourserver/medic/_design/medic-conflicts/_view/conflicts. Each entry in that view looks like this:\n{ \u0026#34;id\u0026#34;: \u0026#34;1B7922A6-A6D6-C956-BBAE-DE5EB5A2E6C8\u0026#34;, \u0026#34;key\u0026#34;: [ \u0026#34;1-82d9a42305a79e403d9eca6a9a9daae9\u0026#34; ], \u0026#34;value\u0026#34;: null }, The id is the _id of the conflicting document, and the key is a list of conflicting _revs.\nFor each conflicting document, download that document, as well as all the _revs indicated in the key above. To download a document with a specific _rev, pass the rev parameter.\ncurl \u0026#39;https://yourserver/medic/1B7922A6-A6D6-C956-BBAE-DE5EB5A2E6C8\u0026#39; \u0026gt; doc.json curl \u0026#39;https://yourserver/medic/1B7922A6-A6D6-C956-BBAE-DE5EB5A2E6C8?rev=1-82d9a42305a79e403d9eca6a9a9daae9\u0026#39; \u0026gt; doc-conflict1.json Now you have all versions of the document, you can diff them and try to determine what went wrong.\nA common problem, for example, might be sentinel hitting a document really quickly between you creating it and editing it.\nA less common problem that requires some special attention, is UUID collisions (see below).\nIf you get stuck feel free to escalate to a developer, who can take a look.\nIf appropriate, raise a bug If you determine (or just suspect) that the problem could be in our code or data structures, feel free to raise a bug to development. For example, historically read status has been stored against the document, which can easily cause conflicts if you create a document and then instantly view it with sentinel processing in the background.\nWhile some conflicts are inevitable, we want to architect away from them as much as possible. Ideally tech leads would never have to resolve conflicts.\nRegardless, resolve the conflicts Now that you\u0026rsquo;ve diagnosed the problem, and perhaps reported a bug, you should resolve the conflict.\nThis is extremely important. Conflicts cause saved changes to not appear against documents silently, and could cause important document changes (eg fixing someone\u0026rsquo;s EDD) to not occur.\nFor a document to no longer be conflicted, there must only be one active _rev. You would do this by picking one rev and updating it with the changes you want to make, and then updating the others with the _deleted: true property.\nYou can tell that a document is no longer conflicted if they don\u0026rsquo;t appear in the view, or if when you request the document with ?conflicts=true the _conflicts property either doesn\u0026rsquo;t appear or is empty:\nhttps://yourserver/medic/yourdocid?conflicts=true { \u0026quot;_id\u0026quot;: \u0026quot;yourdocid\u0026quot;, \u0026quot;_rev\u0026quot;: \u0026quot;2-the-current-rev\u0026quot; \u0026quot;_conflicts\u0026quot;: [ \u0026quot;2-a-conflicting-rev\u0026quot; ] } In the above example, yourdocid has two revisions that conflict with each other. Here you would need to update one of the revs (it doesn\u0026rsquo;t matter which) with the other\u0026rsquo;s changes, then delete the other rev. You would then see:\nhttps://yourserver/medic/yourdocid?conflicts=true { \u0026quot;_id\u0026quot;: \u0026quot;yourdocid\u0026quot;, \u0026quot;_rev\u0026quot;: \u0026quot;3-the-new-rev\u0026quot; } A trivial example Let\u0026rsquo;s say that you have two documents, and the diff between them looks something like this:\n=================================================================== --- 277533E3-A41B-3C46-909F-BCA038197C1E___2-2fff60be1557fdfef9915aa09e1b5119.json +++ 277533E3-A41B-3C46-909F-BCA038197C1E___2-d2a7186380b72306d75cd64b64402575.json @@ -1,7 +1,7 @@  { \u0026#34;_id\u0026#34;: \u0026#34;277533E3-A41B-3C46-909F-BCA038197C1E\u0026#34;, - \u0026#34;_rev\u0026#34;: \u0026#34;2-2fff60be1557fdfef9915aa09e1b5119\u0026#34;, + \u0026#34;_rev\u0026#34;: \u0026#34;2-d2a7186380b72306d75cd64b64402575\u0026#34;,  \u0026#34;data\u0026#34;: \u0026#34;some shared data\u0026#34;, \u0026#34;read\u0026#34;: [ - \u0026#34;some_user\u0026#34; + \u0026#34;admin\u0026#34;  ] } The problem here is clear: some_user and admin read the document at the same time. To solve this, we could add some_user to the revision with admin already in it, and then delete the some_user revision:\n{ \u0026#34;_id\u0026#34;: \u0026#34;277533E3-A41B-3C46-909F-BCA038197C1E\u0026#34;, \u0026#34;_rev\u0026#34;: \u0026#34;2-d2a7186380b72306d75cd64b64402575\u0026#34;, \u0026#34;data\u0026#34;: \u0026#34;some shared data\u0026#34;, \u0026#34;read\u0026#34;: [ \u0026#34;admin\u0026#34;, \u0026#34;some_user\u0026#34; ] } { \u0026#34;_id\u0026#34;: \u0026#34;277533E3-A41B-3C46-909F-BCA038197C1E\u0026#34;, \u0026#34;_rev\u0026#34;: \u0026#34;2-2fff60be1557fdfef9915aa09e1b5119\u0026#34;, \u0026#34;_deleted\u0026#34;: true, \u0026#34;data\u0026#34;: \u0026#34;some shared data\u0026#34;, \u0026#34;read\u0026#34;: [ \u0026#34;some_user\u0026#34; ] } Resolving UUID collisions A UUID collision is a rare event where two clients (eg two android phones running our application) generate the same UUID ID for two completely different documents.\nYou can tell when your conflict is a UUID collision as there is no common root between the two conflicting versions. For example, one might be of type person and one might of type data_record.\nThese situations are more complicated, and require that you essentially recreate all conflicting versions as new documents, and fix any linkages that exist in the database.\nLet\u0026rsquo;s say you find the following situation:\n{ \u0026#34;_id\u0026#34;: \u0026#34;7FADDF76-55E4-4E50-9444-5E468E61EA83\u0026#34; - \u0026#34;_rev\u0026#34;: \u0026#34;1-e4da228c29dc4ebc8b156967bbf48bd1\u0026#34;, + \u0026#34;_rev\u0026#34;: \u0026#34;1-ce40d1dc470643e2b9be9368ea9ff240\u0026#34;, - \u0026#34;type\u0026#34;: \u0026#34;person\u0026#34; + \u0026#34;type\u0026#34;: \u0026#34;data_record\u0026#34; \u0026lt;snip a bunch more stuff that doesn\u0026#39;t relate to each other\u0026gt; } You will want to do four things:\n Download the _rev for the person and create a new document, with a new uuid, for that document (you can do this by uploadig the document without an _id or _rev parameter and let CouchDB generate them for you) Do the same for the data_record version Delete the main conflicting document 7FADDF76-55E4-4E50-9444-5E468E61EA83  And finally, find any references to 7FADDF76-55E4-4E50-9444-5E468E61EA83, work out which doc they were supposed to point to, and then edit those UUIDs to be the correct UUID _id from the docs you created above.\nBecause this should be a rare event and a generic view would be enormous, we do not ship a view that helps you find this out.\nHowever, you can create your own view! You\u0026rsquo;re going to want to create a DDOC specifically for this view. You can follow the following template to create what you want:\n{ \u0026#34;_id\u0026#34;: \u0026#34;_design/docs-by-reference\u0026#34;, \u0026#34;views\u0026#34;: { \u0026#34;docs-by-reference\u0026#34;: { \u0026#34;map\u0026#34;: \u0026#34;function(doc) {\\n var KEYS = [];\\n\\n // TODO: consider switching this around to whitelist doc types\\n if (doc._id.match(/-info$/) ||\\n doc._id.match(/^_local/)) {\\n return;\\n }\\n\\n var goDeeper = function(obj, path) {\\n Object.keys(obj).forEach(function(key) {\\n if (typeof obj[key] === \u0026#39;string\u0026#39; \u0026amp;\u0026amp;\\n KEYS.indexOf(obj[key]) !== -1) {\\n emit(obj[key], path + \u0026#39;.\u0026#39; + key);\\n }\\n\\n if (obj[key] \u0026amp;\u0026amp; typeof obj[key] === \u0026#39;object\u0026#39;) {\\n goDeeper(obj[key], path + \u0026#39;.\u0026#39; + key);\\n }\\n });\\n };\\n\\n goDeeper(doc, doc._id);\\n}\u0026#34; } } } In this, add any IDs you want to be found in the KEYS variable at the top of the function. So in our case, we would change KEYS to look like this:\nvar KEYS = [\u0026#39;7FADDF76-55E4-4E50-9444-5E468E61EA83\u0026#39;] Upload this document to CouchDB (do not just add the view to an existing DDOC, as you will force all views on that DDOC to regenerate) and then warm up the views by querying it once (it may take a long time to run).\nOnce it is complete you can query the view again to return a list of documents that reference the ids you hard-coded above.\nThis will help you to identify which documents are affected by this change. Usually the only change needed is to change the ID located to the new ones you generated.\n{ \u0026#34;total_rows\u0026#34;: 2, \u0026#34;offset\u0026#34;: 0, \u0026#34;rows\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;1B7922A6-A6D6-C956-BBAE-DE5EB5A2E6C8\u0026#34;, \u0026#34;key\u0026#34;: [ \u0026#34;7FADDF76-55E4-4E50-9444-5E468E61EA83\u0026#34; ], \u0026#34;value\u0026#34;: \u0026#34;1B7922A6-A6D6-C956-BBAE-DE5EB5A2E6C8.fields.inputs.contact._id\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;1B7922A6-A6D6-C956-BBAE-DE5EB5A2E6C8\u0026#34;, \u0026#34;key\u0026#34;: [ \u0026#34;7FADDF76-55E4-4E50-9444-5E468E61EA83\u0026#34; ], \u0026#34;value\u0026#34;: \u0026#34;1B7922A6-A6D6-C956-BBAE-DE5EB5A2E6C8.fields.patient_id\u0026#34; } ] } In this example, there are two references to 7FADDF76-55E4-4E50-9444-5E468E61EA83, both in the 1B7922A6-A6D6-C956-BBAE-DE5EB5A2E6C8 document, one at fields.inputs.contact._id and one at fields.patient_id.\nIf you get stuck, feel free to contact a developer (either a specific one, or just post in #development) and they can help you out.\n","excerpt":"Conflicts are a natural and unavoidable part of working in a distributed system.\nConflicts occur …","ref":"/beta/apps/guides/database-management/database-conflicts/","title":"Database Conflicts"},{"body":"One of the first things you’ll need to do is identify the specific DHIS2 data set that you plan to implement. You’ll need a list of all the data elements on that data set, a detailed understanding of how each is calculated, the frequency in which the data set is submitted (weekly, monthly, etc…), and for which organisation units the data set applies. You’ll also want to identify and engage the appropriate DHIS2 stakeholders to get access to DHIS2 metadata, test environments, and discuss workflows. The DHIS2 documentation site provides additional background and advice here.\nDesign Considerations There are a few very important considerations related to how you design workflows and set up your CHT application to make sure you will be able to integrate with DHIS2. The main areas are:\n Hierarchies Fields and calculations Workflows and user access.  These considerations are summarized below.\nHierarchies The CHT relies on your Place hierarchy to determine how data should be aggregated for DHIS2. As such, it’s important that you consider how organization units are configured in the DHIS2 instance that you need to integrate data into. If your CHT Place hierarchy does not align with the DHIS2 organisation unit structure, the CHT will not be able to aggregate data in the way DHIS2 needs it.\nTIP: There should be a one-to-one relationship between DHIS2 organistion units and CHT places.\nSee Also: Hierarchies\nFields and calculations It’s important to understand each data element on the DHIS2 data set you want to integrate data into and how each data element is calculated. When you are designing your forms in the CHT, you will need to make sure you are capturing information in your forms so that every data element on the chosen DHIS2 data set can be calculated within the CHT.\nTIP: Once you obtain the list of data elements on the data set, be sure to go through them one by one and figure out how to calculate each one using information available in your CHT forms.\nSee Also: Forms\nWorkflows and User Access The aggregate data workflow is really designed around 3 key user personas. You’ll need to make sure that your context can support those assumptions and will be able to have access to the appropriate features in the CHT and DHIS2.\nMoving data from the CHT to DHIS2 can be done in three main ways.\n Manually downloading from the CHT Building an app in DHIS2 and calling an API in the CHT Orchestrating the steps using an interoperability layer such as OpenHIM, OpenFn, etc\u0026hellip;  Configuration Once you have designed your hierarchies, forms, calculations, and workflows, there are a few key configurations that need to be made.\nData sets For the CHT to be able to export the file for DHIS2, it needs to know the specific name and ID of the data set in DHIS2. You will need to obtain the ID from the test or production DHIS2 environment.\nConfigure the data set in app_settings.json.\nOrganisation units Aggregation in the CHT is based on your Place hierarchy. As mentioned in the Hierarchies Design Considerations above, your Places must align with DHIS2 organisation units. You will need to specify the DHIS2 organisation unit\u0026rsquo;s ID on the Place document in the CHT.\nUpdate the contact document of each place you wish to map to an organisation unit. Add a dhis.orgUnit attribute.\n{ \u0026#34;_id\u0026#34;: \u0026#34;my_place\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;health_center\u0026#34;, \u0026#34;dhis\u0026#34;: { \u0026#34;orgUnit\u0026#34;: \u0026#34;HJiPOcmziQA\u0026#34; } } Data elements Calculations for DHIS2 indicators are done using CHT Target functionality. For each DHIS2 data element, you will need to configure a corresponding CHT Target and specify the ID of the DHIS2 data set and data element. If you do not include the data set, this data element will be included in every data set.\nIn targets.js, configure one or more data elements by setting the dhis.dataSet and dhis.dataElement attributes in the target schema.\nSee Also: Targets\nmodule.export = [ { id: \u0026#39;births-this-month\u0026#39;, type: \u0026#39;count\u0026#39;, icon: \u0026#39;icon-infant\u0026#39;, translation_key: \u0026#39;targets.births.title\u0026#39;, subtitle_translation_key: \u0026#39;targets.this_month.subtitle\u0026#39;, goal: -1, appliesTo: \u0026#39;contacts\u0026#39;, appliesToType: [\u0026#39;person\u0026#39;], appliesIf: contact =\u0026gt; !!contact, date: (contact) =\u0026gt; contact.contact.date_of_birth, dhis: { dataSet: \u0026#39;VMuFODsyWaO\u0026#39;, dataElement: \u0026#39;kB0ZBFisE0e\u0026#39; } }, ]; Users For the HRIO role, create a new user role and a new user with that role; or update an existing user role. To export DHIS2 metrics, users need to have the following permissions: can_configure, can_export_all, and can_export_dhis.\nSee Also: Users\nUser experience Once your CHT project is configured to integrate with DHIS2, follow these steps to export the data from CHT and import it into DHIS:\nExport data  Login to the CHT instance using a user account with the required permissions. You should be automatically navigated to the Admin Console. Select \u0026ldquo;Import \u0026amp; export data\u0026rdquo; from the side Select \u0026ldquo;DHIS2\u0026rdquo; from the header along the top Select the data set, org unit, and time period that you\u0026rsquo;d like to send to DHIS2. Click \u0026ldquo;Export\u0026rdquo; A file should download in your browser. This file contains a dataValueSet with aggregated user\u0026rsquo;s data.  Import data  Login to DHIS2 using a user account with permission to manage the relevant dataset and organisation units. Select the \u0026ldquo;import/export\u0026rdquo; application inside DHIS2. Select \u0026ldquo;import data\u0026rdquo;. Upload the file you downloaded in Step 5. Click \u0026ldquo;Import\u0026rdquo;  Check the UI for any errors. If you get errors you don\u0026rsquo;t understand or are unable to resolve an error, you can always ask for assistance on the CHT Forum. If there are no errors, you can review the numbers that resulted by reviewing the data set in DHIS2.\nKnown limitations  Data for each user is aggregated based on the contents of the user\u0026rsquo;s target document. Note that if your users don\u0026rsquo;t login and synchronize, their data won\u0026rsquo;t be represented in the exported data. Integrations are limited to monthly DHIS2 data sets. Integrations are limited to numeric data-types. To support other data types, consider making a DHIS2 App for your project.  ","excerpt":"One of the first things you’ll need to do is identify the specific DHIS2 data set that you plan to …","ref":"/beta/apps/guides/dhis2-aggregate/","title":"DHIS2 Aggregate"},{"body":"This document helps to quickly install the necessary tools to download and run the public docker image for CHT applications.\nDownload Docker Ubuntu:\n Note: Install both below Docker CE Docker-Compose  Mac OSX:\n Docker for Mac  Windows:\n Note: If you have Hyper-V Capability, please ensure it is enabled in order to run Linux Containers on Windows. If you are running your Windows Server in cloud services, please ensure it is running on bare-metal. You will not be able to run Linux Containers in Windows if the previous comments are not adhered due to nested virtualization. Docker for Windows Note: If you do not have Hyper-V capability, but your server still supports virtualization, ensure that is enabled in your BiOS, and install the following package: Docker Toolbox using VirtualBox  Run the installation and follow the instructions.\nLaunch Docker.\nPerformance Settings that can be changed: Memory: 4 GiB CPUs: 2\nUse Docker-Compose: In the location you would like to host your configuration files, create a file titled \u0026lt;project_name\u0026gt;-medic-os-compose.yml with the following contents:\nversion: '3.7' services: medic-os: container_name: medic-os image: medicmobile/medic-os:cht-3.7.0-rc.1 volumes: - medic-data:/srv ports: - 80:80 - 443:443 working_dir: /srv depends_on: - haproxy networks: - medic-net environment: - DOCKER_NETWORK_NAME=haproxy - DOCKER_COUCHDB_ADMIN_PASSWORD=$DOCKER_COUCHDB_ADMIN_PASSWORD haproxy: container_name: haproxy image: medicmobile/haproxy:rc-1.16 volumes: - medic-data:/srv environment: - COUCHDB_HOST=medic-os - HA_PASSWORD=$DOCKER_COUCHDB_ADMIN_PASSWORD networks: - medic-net volumes: medic-data: name: medic-data networks: medic-net: name: medic-net Export a password for admin user named medic:\nexport DOCKER_COUCHDB_ADMIN_PASSWORD=\u0026lt;random_pw\u0026gt; Launch docker-compose containers Inside the directory that you saved the above \u0026lt;project_name\u0026gt;-medic-os-compose.yml, run:\n$ docker-compose -f \u0026lt;project_name\u0026gt;-medic-os-compose.yml up Note In certain shells, docker-compose may not interpolate the admin password that was exported above. In that case, your admin user had a password automatically generated. Note the New CouchDB Administrative User and New CouchDB Administrative Password in the output terminal. You can retrieve these via running docker logs medic-os and searching the terminal.\nOnce containers are setup, please run the following command from your host terminal:\n$ docker exec -it medic-os /bin/bash -c \u0026quot;sed -i 's/--install=3.7.0/--complete-install/g' /srv/scripts/horticulturalist/postrun/horticulturalist\u0026quot; $ docker exec -it medic-os /bin/bash -c \u0026quot;/boot/svc-stop medic-core openssh \u0026amp;\u0026amp; /boot/svc-stop medic-rdbms \u0026amp;\u0026amp; /boot/svc-stop medic-couch2pg\u0026quot; The first command fixes a postrun script for horticulturalist to prevent unique scenarios of re-install. The second command stops extra services that you will not need.\nVisit your project Open a browser to: https://localhost\nYou will have to click to through the SSL Security warning. Click Advanced -\u0026gt; Continue to site.\nDelete \u0026amp; Re-Install Stop containers:\n docker-compose down or docker stop medic-os \u0026amp;\u0026amp; docker stop haproxy  Remove containers:\n docker-compose rm or docker rm medic-os \u0026amp;\u0026amp; docker rm haproxy  Clean data volume:\n docker volume rm medic-data  After following the above three commands, you can re-run docker-compose up and create a fresh install (no previous data present)\nUse Kitematic (GUI for Docker tools) Port Conflicts In case you are already running services on HTTP(80) and HTTPS(443), you will have to map new ports to the medic-os container.\nTurn down and remove all existing containers that were started:\n docker-compose down \u0026amp;\u0026amp; docker-compose rm  To find out which service is using a conflicting port: On Linux:\nsudo netstat -plnt | grep ':\u0026lt;port\u0026gt;' On Mac (10.10 and above):\nsudo lsof -iTCP -sTCP:LISTEN -n -P | grep ':\u0026lt;port\u0026gt;' You can either kill the service which is occupying HTTP/HTTPS ports, or run the container with forwarded ports that are free. In your compose file, change the ports under medic-os:\nservices: medic-os: container_name: medic-os image: medicmobile/medic-os:cht-3.7.0-rc.1 volumes: - medic-data:/srv ports: - 8080:80 - 444:443 Note: You can substitute 8080, 444 with whichever ports are free on your host. You would now visit https://localhost:444 to visit your project.\nHelpful Docker commands ssh into container/application \u0026amp; view specific service logs  ssh: docker exec -it medic-os /bin/bash  Once inside container:  view couchdb logs:  #less /srv/storage/medic-core/couchdb/logs/startup.log   view medic-api logs:  #less /srv/storage/medic-api/logs/medic-api.log   view medic-sentinel logs:  #less /srv/storage/medic-sentinel/logs/medic-sentinel.log    View container stderr/stdout logs:  docker logs medic-os docker logs haproxy  Clean Up # list running containers docker ps # list all available docker containers with their status sudo docker ps -a # stop container docker stop \u0026lt;container_id\u0026gt; # start container docker start \u0026lt;container_id\u0026gt; # list all stoped containers docker ps -f \u0026quot;status=exited\u0026quot; Prune entire Docker system Use this prune command when unable to launch the containers and you\u0026rsquo;d like to restart from a clean slate. WARNING: This will delete all your unused images, containers, networks and volumes including those not related to CHT. docker system prune -a --volumes\n","excerpt":"This document helps to quickly install the necessary tools to download and run the public docker …","ref":"/beta/core/guides/docker-setup/","title":"Docker Image Setup"},{"body":"Configure self-hosting 1. Create EC2 (use security best practices) Be sure to change the file permissions to 0600 or lower for the .pem file: sudo chmod 0600 ~/Downloads/name_of_file.pem  Create Elastic IP and Associate EIP to EC2  Goal: SSH into instance\n2. Create or Restore EBS Volume   Create EBS Volume\n Be sure to tag appropriately    Restore EBS Volume\n  Attach volume to EC2 instance\n  (Optional): Increase disk size\n  If you are using a newly created EBS Volume, you will have to format the disk approriately:\n SSH into instance Follow the instructions here: Using EBS Volumes Use sudo mkfs -t ext4 \u0026lt;location\u0026gt; in step 4 Mount disk to /srv    Goal: Mount EBS volume to /srv\n3. Provision Docker server  Follow README \u0026amp; Run scripts: Prepare Self-Hosting System A zip will be shared via Slack until the scripts are moved to a public repo  Goal: CHT Application bootstraps and comes online\n4. DNS configuration  Point A records to Elastic IP given to Docker server  5. Review SSL certs  Location of certs is /srv/settings/medic-core/nginx/private/ Name the key file as default.key and the certificate file as default.crt Restarting nginx with new certs: svc-restart medic-core nginx  6. Configure couch2pg  Basic configuration: https://github.com/medic/medic-couch2pg/blob/master/README.md Supervision/monitoring/notification  7. Setup postgres to work with couch2pg  Creating the database, setting up permissions, exploring the tables and what they store  8.Debugging couch2pg/postgres  Understanding the log and what the entries mean  Troubleshooting 1. Restarting processes  https://github.com/medic/medic-docs/blob/master/installation/self-hosting.md#how-to-access-container-retrieve-logs-isolate-security-groups https://github.com/medic/medic-os#service-management-scripts  2. Investigating logs  Log into container: https://docs.docker.com/engine/reference/commandline/exec/ Helpful docker commands: https://github.com/medic/medic-docs/blob/master/installation/public-docker-image-setup.md#helpful-docker-commands Inside container, all appropriate logs can be found in: /srv/storage/\u0026lt;service_name\u0026gt;/logs/*.log  3.Upgrading the container  Backup all data (EBS) Log into container and stop all services DO NOT REMOVE /srv/storage/medic-core/, /srv/settings/medic-core/couchdb/local.ini, wipe all other files in /srv [Note: Make script publicly accessibile] Change the image tag to the newest image release version: https://github.com/medic/medic-docs/blob/master/installation/public-docker-image-setup.md#download-medic-mobile-image--setup-custom-docker-network Change image tag in docker-compose file: https://github.com/medic/medic-docs/blob/master/installation/public-docker-image-setup.md#use-docker-compose Launch new containers with appropriate COUCHDB_ADMIN_PASSWORD \u0026amp; HA_PASSWORD environment variables  4.Upgrading the webapp  Use Admin GUI page CLI via horticulturalist: https://github.com/medic/medic-docs/blob/master/installation/self-hosting.md#links-to-medic-documentation-for-horticulturalist-for-upgrades  4a. RDS help  https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html  Restore from backup and monitoring 1. Configure backups  EBS Snapshot Lifecycle Manager: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html  2. Restoring from backup  Create volume from snapshot Tag appropriately for backups Mount volume to docker server  3. Process supervison  supvisorctl /boot/supervisor-inspect  4. Monitoring  https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html  Own Infrastructure Setup 1. Team to set up own infrastructure based on best-practices and recommendations above ","excerpt":"Configure self-hosting 1. Create EC2 (use security best practices) Be sure to change the file …","ref":"/beta/apps/guides/hosting/ec2-setup-guide/","title":"EC2 Setup"},{"body":"","excerpt":"","ref":"/beta/apps/guides/forms/","title":"Forms"},{"body":"","excerpt":"","ref":"/beta/apps/guides/gateway/","title":"Gateway"},{"body":"With Android 4.1 (aka Jelly Bean) and upwards the full system log is only visible if you have root.\nTo get logs, you have to use adb logcat via a computer.\nThese are the instructions for getting logs using ADB:\n Download adb for the below platforms   Windows Mac Linux   Copy zip to folder and extract it\n  Navigate to the folder you have extracted it to. You should see files like adb, AdbWinApi, etc1tool etc. Open the Command prompt/terminal in the current folder(In Windows, press Alt + D and write \u0026lsquo;cmd\u0026rsquo;)\n  Enable USB debugging on your phone by going to Settings \u0026gt; Developer Options \u0026gt; USB Debugging (this varies from phone to phone, check on the internet if the phone doesn\u0026rsquo;t fit this)\n  Connect your phone by USB to the computer\n  You will see a popup : \u0026ldquo;Allow USB debugging. The computer\u0026rsquo;s RSA fingerprint\u0026hellip;..\u0026quot;. Click OK\n   Open the command which was opened previously and write the following command: adb start-server\n  To check if your phone is properly connected, write the command adb devices. This will list the devices connected. Something like\n   Followup with command: adb logcat \u0026gt; gateway.txt. This stores the android logs in the file gateway.txt.\n  Now it is taking android logs. This is the time to to try to reproduce the error. Check some of the messages that are \u0026lsquo;WAITING\u0026rsquo; and click retry Do this for as many times as you deem necessary to capture logs for that event. Wait about 15 minutes to enable capture of sufficient android device environment logs\n  Disconnect the phone from the computer\n  Open the folder which has the adb executable, you will see a file called gateway.txt Send that file to the concerned person (PM or techlead)\n  NB. If you get this error command not found in steps 7, 8 or 9 this means adb is not in your PATH. This is where the shell looks for executables. You\u0026rsquo;ll have to append ./ before any adb command so that you can use the adb in the current folder you\u0026rsquo;re on.\nEx. ./adb logcat \u0026gt; gateway.txt. The dot is your current directory, and this tells Bash to use adb from there.\n","excerpt":"With Android 4.1 (aka Jelly Bean) and upwards the full system log is only visible if you have root. …","ref":"/beta/core/guides/get-android-logs/","title":"Get Android Logs"},{"body":"You may encounter a dreaded case when reports coming in to a Medic Webapp instance have a red indicator instead of the green indicator.\nThis may be caused by:\n Missing forms in the app_settings config. -Missing or incorrect fields in the input form. e.g Missing patient ID, or Patient ID with letters Extra fields in the input form. This happens when you don\u0026rsquo;t configure for some fields in the app_settings.json of the webapp Configuring some forms in the wrong section of the app_settings i.e registrations and patient_reports. Forms that don\u0026rsquo;t have a patient_id field because it is generated afterwards, e.g ANCR, IMMR, go to the registrations section, while form that have a patient_id field e.g ANCP, ANCV, IMMV; go to the patient_reports section  How to solve To revalidate an invalid report, we need to clear the errors field on the doc (set it to []). Updating this field from Futon will not work and will result in an endless update process. The recommended way to do it is to download the doc, update it and then upload it. This will also ensure propagation and replication in couchdb.\nTo download a doc, use:\ncurl 'https://\u0026lt;username\u0026gt;:\u0026lt;password\u0026gt;@\u0026lt;instance\u0026gt;.app.medicmobile.org/medic/\u0026lt;doc id\u0026gt;' \u0026gt; filename.json filename.json is the local file in your computer you have stored the doc json\nUpdate filename.json: Set \u0026ldquo;errors\u0026rdquo; to [] and remove \u0026ldquo;accept_patient_reports\u0026rdquo; transition so that sentinel can revalidate the report.\nUpload filename.json with:\ncurl -X PUT hhttps://\u0026lt;username\u0026gt;:\u0026lt;password\u0026gt;@\u0026lt;instance\u0026gt;.app.medicmobile.org/medic/\u0026lt;doc id\u0026gt; -d @filename.json --header \u0026quot;Content-Type: application/json\u0026quot; ","excerpt":"You may encounter a dreaded case when reports coming in to a Medic Webapp instance have a red …","ref":"/beta/apps/guides/invalid-reports/","title":"Revalidate invalid reports"},{"body":"Endless messaging loops can between the webapp and a mobile number via the gateway due to autoreplies from the webapp.\nSee the Github Issue.\nSolution: Add the offending number(e.g 800 or SAFARICOM) to the Outgoing Deny List in the webapp\u0026rsquo;s app_settings configuration file.\n \u0026quot;multipart_sms_limit\u0026quot;: 10, \u0026quot;outgoing_deny_list\u0026quot;: \u0026quot;800, SAFARICOM\u0026quot;, \u0026quot;contact_summary\u0026quot;: \u0026quot;\u0026quot; ","excerpt":"Endless messaging loops can between the webapp and a mobile number via the gateway due to …","ref":"/beta/apps/guides/sms/message-loops/","title":"Message Loops"},{"body":"Contacts are organized into a hierarchy. It is not straight-forward to move contacts from one position in the hierarchy to another because many copies of this hierarchy exist. Use the move-contacts action in medic-conf to assign a new parent to contacts. This command will move the specified contact, all the contacts under that contact, and all reports created by any of those contacts. This action will download all documents that need to be updated, update the lineages within those documents, and then save the updated documents on your local disk. To commit those changes to the database, run the upload-docs action.\nOffline users who have contacts removed from their visible hierarchy will not automatically see those contacts disappear. The contact remains on the user\u0026rsquo;s device. Any updates made to the contact (or any reports created for that contact) will silently fail to sync (medic/medic/#5701). These users must be encouraged to clear cache and resync!\nAlso impactful, but less serious - this script can cause significant amounts of changes to the database and offline users who have contacts moved into their visible hierarchy may experience lengthy and bandwidth-intensive synchronizations.\n   Parameter Description Required     contacts Comma delimited list of contact IDs which will be moved Yes   parent ID of the new parent which will be assigned to the provided contacts Yes   docDirectoryPath This action outputs files to local disk at this destination No. Default json-docs    Some constraints when moving contacts:\n Allowed Parents - When moving contacts on WebApp \u0026gt;v3.7, your chosen parent must be listed as a valid parent for the contact as defined in the configuration for place hierarchy. For WebApp \u0026lt;v3.7, the default hierarchy is enforced. Circular Hierarchy - Nobody\u0026rsquo;s parent can ever be themself or their child. Primary Contacts - Primary contacts must be a descendant of the place for which they are the primary contact. You may need to select a new primary contact for a place through the WebApp if you\u0026rsquo;d like to move a primary contact to a new place in the hierarchy. Minification - Due to contact \u0026ldquo;minification\u0026rdquo; (#2635) which was implemented in v2.13, this script should not be used for versions prior to v2.13.  Examples Move the contacts with the id contact_1 and contact_2 to have the parent parent_id. The changes will be in the local folder my_folder only for review. Run the second command to upload the changes after review.\nmedic-conf --instance= move-contacts -- --contacts=contact_1,contact_2 --parent=parent_id --docDirectoryPath=my_folder medic-conf --local upload-docs -- --docDirectoryPath=my_folder  Move the contact with the id contact_1 to the top of the hierarchy (no parent).\nmedic-conf --local move-contacts upload-docs -- --contacts=contact_1 --parent=root  ","excerpt":"Contacts are organized into a hierarchy. It is not straight-forward to move contacts from one …","ref":"/beta/apps/guides/moving-contacts/","title":"Moving Contacts within the Hierarchy"},{"body":"Multimedia Formats There are many supported formats for video, audio, and images. We recommend using h.264(mpeg) for video, jpeg for images, and mp3 for audio. When creating videos or images keep in mind the dimensions and storage capabilities on phones that may be used. Lower end phones have smaller storage and screen sizes. When rendering images, video, and audio the CHT uses the browser\u0026rsquo;s built in rendering tools. This means you can render any media format that is supported by the minimum version of Chrome.\nList of Supported formats video/audio images\nConfiguration To play multimedia from forms you need to add elements to your xml and upload the corresponding multimedia to couchdb as an attachment to your form.\nForm Config Add an xml element of text and another element of value. Set form equal to the type of multimedia being used(video, audio, image). The value element must contain jr://file_name.suffix where file_name.suffix is the name of your multimedia file uploaded to couchdb.\nExample:\n\u0026lt;text id=\u0026quot;somevideo\u0026quot;\u0026gt; \u0026lt;value form=\u0026quot;video\u0026quot;\u0026gt;jr://video.mp4\u0026lt;/value\u0026gt; \u0026lt;/text\u0026gt; Display Example:\n\u0026lt;input ref=\u0026quot;q2\u0026quot;\u0026gt; \u0026lt;label ref=\u0026quot;jr:itext('somevideo')\u0026quot;/\u0026gt; \u0026lt;/input\u0026gt; Here is a sample form that will display a video and/or image. When this form is opened a video player will be displayed so the user can watch the video. Forms support displaying of images and playing of audio files.\n\u0026lt;h:html xmlns=\u0026#34;http://www.w3.org/2002/xforms\u0026#34; xmlns:h=\u0026#34;http://www.w3.org/1999/xhtml\u0026#34; xmlns:ev=\u0026#34;http://www.w3.org/2001/xml-events\u0026#34; xmlns:xsd=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; xmlns:jr=\u0026#34;http://openrosa.org/javarosa\u0026#34;\u0026gt; \u0026lt;h:head\u0026gt; \u0026lt;h:title\u0026gt;Multimedia - Demo Form\u0026lt;/h:title\u0026gt; \u0026lt;model\u0026gt; \u0026lt;itext\u0026gt; \u0026lt;translation lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;!-- Attach sample media files to form doc --\u0026gt; \u0026lt;!-- https://sample-videos.com --\u0026gt; \u0026lt;text id=\u0026#34;somevideo\u0026#34;\u0026gt; \u0026lt;value form=\u0026#34;video\u0026#34;\u0026gt;jr://video.mp4\u0026lt;/value\u0026gt; \u0026lt;/text\u0026gt; \u0026lt;text id=\u0026#34;someimage\u0026#34;\u0026gt; \u0026lt;value form=\u0026#34;image\u0026#34;\u0026gt;jr://image.jpg\u0026lt;/value\u0026gt; \u0026lt;/text\u0026gt; \u0026lt;text id=\u0026#34;someaudio\u0026#34;\u0026gt; \u0026lt;value form=\u0026#34;audio\u0026#34;\u0026gt;jr://audio.mp3\u0026lt;/value\u0026gt; \u0026lt;/text\u0026gt; \u0026lt;/translation\u0026gt; \u0026lt;/itext\u0026gt; \u0026lt;instance\u0026gt; \u0026lt;media id=\u0026#34;multimedia\u0026#34;\u0026gt; \u0026lt;meta\u0026gt; \u0026lt;instanceID/\u0026gt; \u0026lt;/meta\u0026gt; \u0026lt;/media\u0026gt; \u0026lt;/instance\u0026gt; \u0026lt;/model\u0026gt; \u0026lt;/h:head\u0026gt; \u0026lt;h:body class=\u0026#34;pages\u0026#34;\u0026gt; \u0026lt;group appearance=\u0026#34;field-list\u0026#34; ref=\u0026#34;g\u0026#34;\u0026gt; \u0026lt;input ref=\u0026#34;q2\u0026#34;\u0026gt; \u0026lt;label ref=\u0026#34;jr:itext(\u0026#39;somevideo\u0026#39;)\u0026#34;/\u0026gt; \u0026lt;/input\u0026gt; \u0026lt;input ref=\u0026#34;q3\u0026#34;\u0026gt; \u0026lt;label ref=\u0026#34;jr:itext(\u0026#39;someimage\u0026#39;)\u0026#34;/\u0026gt; \u0026lt;/input\u0026gt; \u0026lt;input ref=\u0026#34;q3\u0026#34;\u0026gt; \u0026lt;label ref=\u0026#34;jr:itext(\u0026#39;someaudio\u0026#39;)\u0026#34;/\u0026gt; \u0026lt;/input\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/h:body\u0026gt; \u0026lt;/h:html\u0026gt; Couchdb Config The file needs to be added as an attachment with a name that matches what is defined in the form. This can be added by using curl or fauxton. Here is the structure of the curl command.\ncurl -vX PUT https://user:pass@server_name/medic/\u0026lt;form_doc_id\u0026gt;/\u0026lt;attachment_name.suffix\u0026gt;?rev=\u0026lt;latest_form_revision\u0026gt; --data-binary @\u0026lt;local_file_name\u0026gt; -H \u0026quot;Content-Type: \u0026lt;expected_mime_type\u0026gt;\u0026quot;\nHere is an example of how it would look uploading a sample video for the form above.\ncurl -vX PUT https://user:pass@localhost/medic/form:multimedia/video.mp4?rev=11-a2ebf09cb9678c031859cd2c1da4b603 -k --data-binary @sample.mp4 -H \u0026quot;Content-Type: video/mp4\u0026quot;\nTo use fauxton.\n Navigate to fauxton. https://\u0026lt;server_name\u0026gt;/_utils Click on the medic database. Locate the form document. Click add attachment Upload the multimedia file and ensure the name matches what has been defined in the form.  ","excerpt":"Multimedia Formats There are many supported formats for video, audio, and images. We recommend using …","ref":"/beta/apps/guides/forms/multimedia/","title":"Including Multimedia in Forms"},{"body":"There are many places where useful logs reside. This details all those places, and the easiest way to get a hold of them.\nBrowser logs To check if there are relevant logs open up the developer console. The shortcut is probably COMMAND+ALT+I on MacOS, or CTRL+ALT+I on Linux and Windows. Click the console tab and copy out any errors or logging that you think is relevant.\nServer logs The easiest way is to use medic-logs, a tool that comes with medic-conf:\nmedic-logs anInstance gardener See medic-logs documentation for more details.\nThis will download logs to your current directory. You will need to look through these logs to work out what is relevant.\n","excerpt":"There are many places where useful logs reside. This details all those places, and the easiest way …","ref":"/beta/apps/guides/obtaining-logs/","title":"Obtaining Logs"},{"body":"Sometimes there will be a production problem that you need to dig into locally to solve. This guide explains how to:\n Copy the data from an instance to a local CouchDB database Run a local webapp instance with that data  First, a note about data safety Production data is medical data. It\u0026rsquo;s HIV statuses and pregnancies. It\u0026rsquo;s important, and it\u0026rsquo;s not yours. If you\u0026rsquo;re downloading it, do so on an encrypted drive and delete it once you\u0026rsquo;re done with it.\nStep 1: Get the data First thing is to get the data onto your local CouchDB. It\u0026rsquo;s advisable to create a new DB for this, so that you have a fresh untouched collection of data that isn\u0026rsquo;t mixed in with anything you have locally.\nSmall production instances If there isn\u0026rsquo;t much data you can replicate the entire DB locally. You can initiate this either from your local Fauxton, or from the command line. You must use an administrator username and password for this at both the source and destination.\nFor Fauxton, navigate to http://localhost:5984/_utils/#/replication/_create For command line, see: http://docs.couchdb.org/en/2.1.1/api/server/common.html#post--_replicate\nNote that replication may stall on one document, and you may end up with your local DB having one less document than the source. This is due to how our URLs are setup: the replicator gets confused and considers login (ie https://url/login) to be a document. You can safely ignore this difference - you\u0026rsquo;re good to go once your destination database has one less document than the source.\nLarge production instances If the instance is too large to replicate locally (or you are too impatient), you can replicate the data accessible to a single user. This process downloads a user\u0026rsquo;s data into a browser and then copies that data into a CouchDB database.\n Open Firefox and navigate to about:config. Set security.csp.enable to false to disable Content Security Policies. Navigate to the instance and login as the user with the data you want. (If you want more data, like an entire district, you could consider logging in as a new user with a contact document at your desired place in the contact hierarchy. But that is an exercise for the reader) Wait for the data to replicate. You know this is done once the app lets you interact with it. (If you want to get the user\u0026rsquo;s data before purging, consider disabling purging. Another exercise for the reader) Make sure your local CouchDB has CORS enabled: http://docs.couchdb.org/en/2.1.1/config/http.html?highlight=CORs. Consider using add-cors-to-couchdb or its recommended settings. Allow your CouchDB to be accessible via https. One way is to run ngrok http 5984 to make your CouchDB accessible via a url like https://abcd1234.ngrok.io. Open the console in Firefox and run await PouchDB.replicate('medic-user-XXX', 'https://your:admin@abcd1234.ngrok.io/YYY');. Here XXX is the name you logged in as, and YYY is the name of a database in which to store the data.  Note: If you get 401s make sure that: your CouchDB credentials are right; and you don\u0026rsquo;t have a local session in the same browser already (session cookies can take precedence over basic auth); and if you\u0026rsquo;re running CouchDB in Docker you have exposed both 5984 and 5986 to localhost.   Wait for the replication to complete. In Fauxton you should see the database YYY with the same number of documents reported during the user\u0026rsquo;s initial replication. Log out of the instance and clear your data from the developer console (Application -\u0026gt; Clear storage). Navigate to about:config. Set security.csp.enable to true to re-enable Content Security Policies.  Regardless, do this too To log in as a specific prod user you need to also copy them from the prod _users database into your own local _users database. The simplest way to do this is to just open the DB in Fauxton, find the document and copy it on your clipboard, then create a new document in your local _users DB and paste it in, deleting the _rev property.\nYou could also use this opportunity to change the password to something easier to work with locally. To do this, add a password property into the document with the password you want in plain text. CouchDB will convert this to a properly hashed password on save.\nStep 2, run it locally First you need to decide if you need a local development environment (unless you already have one, in which case you might as well use it), or are happy to just use Horticulturalist.\nA local development environment will be useful to you if:\n You want to change code locally You want to see useful, non-minified stack traces, or otherwise browse / step through non-minified code in the browser You want to deploy a version of the code older than 2.14.0, as they are not available in Horticulturalist\u0026rsquo;s repos.  Option 1, local development environment If you don\u0026rsquo;t already have a local dev env, follow the instructions on the development setup instructions.\nThen you need to:\n Push the code you want to run via COUCH_URL=http://your:admin@localhost:5984/YYY grunt deploy. Start API and Sentinel by running COUCH_URL=http://your:admin@localhost:5984/YYY node api/server.  Once you\u0026rsquo;ve done all of that you should be able to log in with your user.\nOption 2, horticulturalist Follow the instructions on the horticulturalist repo to get it installed. Then:\n Make sure that the medic DB doesn\u0026rsquo;t exist, so that you have a fresh database. Replicate your local PROD DB into a new medic database using the Fauxton console. Run horti --local --bootstrap=XXX, where XXX is the version you want to use (maybe the same one as production?)  You should now be able to log in as that user locally!\n","excerpt":"Sometimes there will be a production problem that you need to dig into locally to solve. This guide …","ref":"/beta/apps/guides/replicating-production-data-locally/","title":"Replicating Production Data Locally"},{"body":"Only available in 3.7.0 and above\nPurging is a tool that allows you to increase performance and available disk space for offline users (eg CHWs) by removing unneeded documents from their device.\nAs users continually generate new reports their performance may naturally degrade as a result. You can use purging to remove older documents that are no longer relevant from their devices. Purging only removes documents from user\u0026rsquo;s devices: these reports are still available for online analytics and impact metrics.\nPurging is disabled by default, and is enabled if a purge function is specified in app_settings.json, along with a run schedule.\nThe following example would purge all reports that were created more than a year ago:\n{ \u0026#34;//\u0026#34;: \u0026#34;other app_settings settings\u0026#34;, \u0026#34;purge\u0026#34;: { \u0026#34;fn\u0026#34;: \u0026#34;function(userCtx, contact, reports, messages) { const old = Date.now() - (1000 * 60 * 60 * 24 * 365); return reports.filter(r =\u0026gt; r.reported_date \u0026lt; old).map(r =\u0026gt; r._id);}\u0026#34;, \u0026#34;text_expression\u0026#34;: \u0026#34;at 12 am on Sunday\u0026#34; } } Purging is both very powerful and also very dangerous. Read the rest of this document carefully to make sure you completely understand how to purge and the ramifications of doing so, before using purging in your project.\nServer-side Purging runs on the server on a configurable schedule.\nIt will iterate over all users to generate a list of unique roles groups that represent every user. Each group will have their purged docs saved in an individual database.\nThen, it will iterate over all existent contacts, collecting all reports about that contact along with all sms messages that the contact has sent or received. This is similar to the scoping you may have encountered when configuring tasks and targets.\nThe configured purge function runs over all combinations of purge scope (contact + reports + messages) and user context (unique list of roles) to determine which docs should be purged.\nThe resulting list of docs to be purged is compared to the existent purged docs so that only the differences are saved (old purges are reverted and new purges are added).\nA document is considered purged for a user if a document with the same id, prefixed by purge, exists in the corresponding purge database. The following user:\n{ \u0026#34;name\u0026#34;: \u0026#34;org.couchdb.user:\u0026lt;your user\u0026gt;\u0026#34;, \u0026#34;roles\u0026#34;: [ \u0026#34;district_admin\u0026#34;, \u0026#34;supervisor\u0026#34; ] } would get their purges from a medic-purged-role-\u0026lt;role_hash\u0026gt; where role_hash is an md5 hash of the user\u0026rsquo;s roles.\nWhen users sync (includes initial sync), they will only download documents that are not purged for their roles.\nClient-side Purging runs on the user\u0026rsquo;s device at startup, before the application booting, when any of these conditions are met:\n The device was just setup and so initial sync just occurred. The user\u0026rsquo;s roles list has changed It has been more than 7 days since the user has purged.  Purging will not run on startup if purge is not configured, if last purge occurred recently or if the user doesn\u0026rsquo;t have an internet connection.\nWhen purging runs, the device calls an API endpoint that returns batches of doc ids that have been purged since last time the same device has run purge. The system is similar to CouchDB replication, in the sense that a checkpointer document is saved in the corresponding server-side database, that stores the last_seq that the device has downloaded and is used to get the next batch of ids. After receiving a batch of ids, the device simply deletes the indicated docs locally, marking them with a purged flag.\nConfiguration To enable purging, write your purge configuration to purge.js in your project root:\nmodule.exports = { text_expression: \u0026#39;at 9 am on Sunday\u0026#39;, run_every_days: 7, cron: \u0026#39;0 1 * * SUN\u0026#39;, fn: function(userCtx, contact, reports, messages) { const old = Date.now() - (1000 * 60 * 60 * 24 * 365); const oldMessages = Date.now() - (1000 * 60 * 60 * 24 * 90); const reportsToPurge = reports .filter(r =\u0026gt; r.reported_date \u0026lt; old) .map(r =\u0026gt; r._id); const messagesToPurge = messages .filter(m =\u0026gt; m.reported_date \u0026lt; oldMessages) .map(m =\u0026gt; m._id); return [...reportsToPurge, ...messagesToPurge]; } }; Purge configuration As shown above, you should be exporting a property fn defining a self contained function: it should have no outside dependencies - like used variables, required modules or call outside functions.\nThis function takes four parameters:\n userCtx, an object with the user\u0026rsquo;s roles as fields. For more information read the documentation for the User Context Object. contact, the contact document of a patient or other contact who has reports about them. reports, an array of all reports for that patient that are present on the server. messages, an array of sms messages that the contact has sent or received  And should return an array of _id values for docs you would like to be purged (or undefined / nothing if you don\u0026rsquo;t wish to purge anything). Only ids of docs that were passed to the function are valid for purging: you are not allowed to purge other documents.\nIn the cases of reports that do not have patients or their patients are not found, the purge function will receive an empty object as contact. In the cases of reports about deleted patients, the purge function will receive a { _deleted: true } object as the contact.\nSchedule configuration You must set a schedule for purging to run server-side. Depending on the size of the database and server capacity, purging could be a lengthy and resource intensive operation, so it is recommended you run purge on a schedule that your server can sustain (for example at nighttime in the weekends).\nYou can also change the frequency of local purge downloads (default being every 7 days).\n   property description required     fn Self-contained purge function yes   run_every_days The interval (in days) at which purges will be downloaded client-side. Default 7. no   text_expression Any valid text expression to describe the interval of running purge server-side. For more information, see LaterJS no if cron provided   cron Any valid Cron expression to describe the interval of running purge server-side. For more information, see LaterJS no if text_expression provided    Example of purge configured in your app_settings:\n\u0026#34;//\u0026#34;: \u0026#34;other app_settings settings\u0026#34;, \u0026#34;purge\u0026#34;: { \u0026#34;fn\u0026#34;: \u0026#34;function(userCtx, contact, reports, messages) { return []; }\u0026#34;, \u0026#34;cron\u0026#34;: \u0026#34;0 1 * * SUN\u0026#34;, \u0026#34;text_expression\u0026#34;: \u0026#34;at 1:00 am on Sun\u0026#34;, \u0026#34;run_every_days\u0026#34;: 5 } Considerations Purged documents server-side Purging is run as a scheduled task in Sentinel.\nPurging does not touch documents in the medic database, everything is done in separate purge databases (medic-purged-roles-\u0026lt;roles-hash\u0026gt;).\nThe purge databases names contain an md5 of the JSON representation of a list of unique roles. They also contain a _local/info doc where the roles are listed in clear text.\nA purgelog document is saved in medic-sentinel after every purge. The purgelog has a meaningful ID: purgelog:\u0026lt;timestamp\u0026gt;, where timestamp represents the moment when purge was completed. The doc also contains a property roles with the collection of roles purge has run for, and a duration property representing the time it took to run purge, in ms. You can retrieve a list of all your purge logs, descending from newest to oldest, with this request:\nhttps(s)://\u0026lt;host\u0026gt;/medic-sentinel/_all_docs?end_key=\u0026quot;purgelog:\u0026quot;\u0026amp;start_key=\u0026quot;purgelog:\\ufff0\u0026quot;\u0026amp;descending=true\nPurging is reversible. If you update your purge function, when running purge the old invalid purges will be deleted. This does not mean that devices will automatically re-download documents that become unpurged. In order for the user to re-download a previously purged document, the document either needs to be updated in the medic database on the server or the user has to download all data again.\nRunning purge will not remove old purge databases, even if they don\u0026rsquo;t correspond to any existent users. Their removal is a manual process.\nPurge does not run when adding new roles or adding said new roles to users. It also does not run when an existent user is updated to have a new unique list of roles (one that purge has not run over yet). This means that roles need to be planned carefully in order to take advantage of serverside purge. If purge has not run for the user\u0026rsquo;s list of roles at the moment of initial replication, the user will download all documents - only to be purged later.\nPurged documents client-side The key thing to keep in mind while purging is that documents that you purge are deleted on user\u0026rsquo;s device. This sounds obvious, but it\u0026rsquo;s important to understand how this affects the running of the application:\n Any rules you have written that presume that the document exists may break. For example, if the document completes a task, purging it will reopen that task, unless you also purge the document that created the task in the first place (while making sure that purging that report doesn\u0026rsquo;t break more things!) Similarly targets won\u0026rsquo;t be able to use the report to generate values, so counts may go down or become inaccurate Additionally, the contact summary will also lose out on being able to use that report Changing the user\u0026rsquo;s roles list (adding/removing roles) will cause the user to download all purged docs ids from the purge database corresponding to their new roles list.  More subtly, you may also confuse your users!\nIf you purge documents too quickly, they may get confused as to whether they created the report or not, and may create it again, causing data problems. Users are not told that purging is occurring in a very obvious way: the expectation is that purging will naturally occur as documents become irrelevant, and so users should never really notice.\nUsers may search for their own documents, and use data from them in novel ways you may not anticipate. It\u0026rsquo;s important to work with your users to ensure documents are only removed once there are no uses for them.\nIt is key then, that you test your purge rules thoroughly!\n","excerpt":"Only available in 3.7.0 and above\nPurging is a tool that allows you to increase performance and …","ref":"/beta/apps/guides/data-management/purging/","title":"Purging"},{"body":"Connecting to RDBMS, the PostgreSQL server, is pretty stratightforward in nix systems. In Windows there are a couple of things you need to do to get it up and running.\nSSH Key Generation and Importing   Download Puttygen from here\n  Run Puttygen Go to Windows Start menu → All Programs → PuTTY→ PuTTYgen.\n  Create a new key pair for your computer.\n  Convert the key generated from ssh2 format to openssh. Puttygen supports this. Guide here  1. Open PuttyGen 2. Click Load 3. Load your private key 4. Go to Conversions-\u0026gt;Export OpenSSH and export your private key 5. Copy your private key to ~/.ssh/id_dsa (or id_rsa). 6. Create the RFC 4716 version of the public key using ssh-keygen ssh-keygen -e -f ~/.ssh/id_dsa \u0026gt; ~/.ssh/id_dsa_com.pub 6. Convert the RFC 4716 version of the public key to the OpenSSH format: ssh-keygen -i -f ~/.ssh/id_dsa_com.pub \u0026gt; ~/.ssh/id_dsa.pub Import the file using PuTTYgen:  Save it as PuTTY Private Key File .ppk:  Add the key (.ppk) to Pageant (PuTTY authentication agent):  Now you can connect to RDBMS using PuTTY:  If you are connecting to rdbms in order to use a posgres client. You may not need to tunnel the connection. The client can do it for you.\n","excerpt":"Connecting to RDBMS, the PostgreSQL server, is pretty stratightforward in nix systems. In Windows …","ref":"/beta/apps/guides/database-management/rdbms-in-windows/","title":"Conncting to RDBMS in Windows"},{"body":"To do over the air Medic Collect form updates via HTTP rather than sending APKs which have a long manual install process, follow the steps below:\n Have your xls forms ready in the folder.   They should use underscore as name separators. e.g form_name.xlsx They should have form_id and name properties in the settings   Upload the forms to the instance using Medic-Conf Using the upload-collect-forms action as shown below.  medic-conf --instance=user:pass@instancename.app.medicmobile.org upload-collect-forms Go to the Collect App. Delete All forms then go to Get Blank Form and select all the forms you need.  Troubleshooting When you go to Get Blank Forms and instead of getting a list of the forms available, you get a pop-up error which has a portion of this message instead\n...OpenRosa Version 1.0 standard: Forms list entry 1 is missing one or more tags: formId, name or downloadUrl This means you probably uploaded a XLS file without a name or form_id property. To find out which form is missing that, use this command:\ncurl -vvvv -H \u0026quot;x-openrosa-version: 1\u0026quot; http://user:pass@host:port/api/v1/forms Should bring a list like this one\nGo through the list and see which form has a missing \u0026lt;name\u0026gt; or \u0026lt;formID\u0026gt; property. Add it and reuploadthe forms using medic-conf again.\n","excerpt":"To do over the air Medic Collect form updates via HTTP rather than sending APKs which have a long …","ref":"/beta/apps/guides/collect-forms-update/","title":"Update Collect Forms Remotely"},{"body":"Replication is what we call it when users download a copy of the data on to their device.\nRestricting replication If the user has an online role they can access all the data, otherwise they will get restricted access to the data.\nRestriction by place The most common restriction is by place. This is where we check the user\u0026rsquo;s facility_id property, and allow access to all contacts that are descendants of that place, and all reports and messages that are about one of those descendants.\nFor example, if a CHP\u0026rsquo;s facility_id property is set to the ID of the Maori Hill clinic, then they will be able to see all patients and all reports about patients at that clinic.\nDepth Sometimes though you want to only access contacts near the top of the hierarchy. This may be because returning all contacts would be too much data to be practical, or for patient privacy, or because it\u0026rsquo;s just not part of your workflow. In this case you can configure a replication depth for a specific role under replication_depth in the app settings.\nFor example:\n{ \u0026#34;replication_depth\u0026#34;: [ { \u0026#34;role\u0026#34;: \u0026#34;district_manager\u0026#34;, \u0026#34;depth\u0026#34;: 1 }, { \u0026#34;role\u0026#34;: \u0026#34;national_manager\u0026#34;, \u0026#34;depth\u0026#34;: 2 } ] } Supervisor signoff Some reports need to be signed off by a supervisor even though that supervisor doesn\u0026rsquo;t have the depth to see the patient the report is about. To achieve this the report needs a field named needs_signoff with a value of true.\nSensitive documents We won\u0026rsquo;t replicate documents that are about the user when the sender is someone the user can\u0026rsquo;t access. For example, if a supervisor submits a report about one of their CHPs, that CHP won\u0026rsquo;t be able to see it.\n","excerpt":"Replication is what we call it when users download a copy of the data on to their device. …","ref":"/beta/apps/guides/replication/","title":"CouchDB replication"},{"body":"Added in 3.9.0\nBy default the CHT shows the name of the subject of the report in the reports list. This can be overridden by configuring the subject_key property with a translation key in the form document.\nThe translation uses a summary of the report as the evaluation context so you can include report fields in your value, for example: Case registration {{case_id}}. Useful properties available in the summary include: from (the phone number of the sender), phone (the phone number of the report contact), form (the form code), subject.name (the name of the subject), and case_id (the generated case id).\nCode Sample \u0026#34;internalId\u0026#34;: \u0026#34;signal\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Signal signoff\u0026#34;, \u0026#34;subject_key\u0026#34;: \u0026#34;signal.list.subject\u0026#34;, ","excerpt":"Added in 3.9.0\nBy default the CHT shows the name of the subject of the report in the reports list. …","ref":"/beta/apps/guides/report-titles/","title":"Customizing Titles in the Reports List"},{"body":"To secure an android device you should enable at least a pin code lock on the device, enable FDE (full disc encryption) and setup remote wiping capabilities by enabling mobile device management.\nPIN Setup and FDE Instructions are slightly different per device. Enabling FDE has the added benefit that you must also lock the device with a pin code or password.\nAndroid 5.0 or later Open the Security menu under settings. On unmodified versions of Android, this can be found under Settings \u0026gt; Personal \u0026gt; Security. Choose Encrypt Phone, Encrypt Tablet, or Encrypt Device. If you haven\u0026rsquo;t already set a PIN or passcode for the lock screen, you will be prompted to do so. Remember this PIN and do not write it down.\nAndroid 4.4 or earlier First, you\u0026rsquo;ll need to set up a PIN. Navigate to Settings \u0026gt; Security \u0026gt; Screen Lock, and set a numeric PIN for the device of at least four digits. Remember this PIN and do not write it down.\nThen, open the Security menu under settings. On unmodified versions of Android, this can be found under Settings \u0026gt; Personal \u0026gt; Security. On some devices, the exact menu layout may have been modified by the hardware manufacturer. Choose Encrypt Phone or Encrypt Tablet.\nAndroid Versions before 3.0 Android does not support disk encryption in versions earlier than 3.0 (Honeycomb). If you have one of these devices, we recommend that you do not use it.\nMobile device management Setting up mobile device management that if a phone gets lost or stolen you can ensure the data on it is deleted safely.\nYou can enable this if the Google accounts used on the phones are part of a paid-for plan of Google\u0026rsquo;s G Suite.\nUp to date instructions for enabling mobile device management can be found here: https://support.google.com/a/answer/7400753\nIf you need to remotely wipe a device, see instructions here: https://support.google.com/a/answer/173390\n","excerpt":"To secure an android device you should enable at least a pin code lock on the device, enable FDE …","ref":"/beta/apps/guides/securing-android/","title":"Securing Android Devices"},{"body":"Self Hosting How to access container, retrieve logs, isolate security groups  How to restart services: Link to medic-os documentation https://github.com/medic/medic-os#service-management-scripts /boot/svc-\u0026lt;start/stop/restart\u0026gt; \u0026lt;service-name/medic-api/medic-sentinel/medic-core couchdb/medic-core nginx\u0026gt;  AWS docs for increasing disk size:  Stop medic: sudo supervisorctl stop medic Go to EBS in AWS and take a snapshot of the volume. Modify the volume size (Increase it by 2x preferably). Wait until the modification succeeds. Follow the following link to make the instance recognize the additional space: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/recognize-expanded-volume-linux.html Turn medic back on: sudo supervisorctl start medic  Links to medic documentation for horticulturalist for upgrades:  log into container \u0026amp; run: COUCH_NODE_NAME=couchdb@127.0.0.1 COUCH_URL=http://medic:\u0026lt;pw\u0026gt;@localhost:5984/medic /srv/software/horticulturalist/node_modules/.bin/horti --medic-os --install=\u0026lt;version\u0026gt;  Monitoring \u0026amp; Backup  AWS CloudWatch and monitoring tab. Enable detailed monitoring (This costs more money) Set up Lifecycle Management for EBS snapshots: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html#snapshot-lifecycle-console Steps to mounting a backup snapshot to the instance and restarting the application Please see the second-half of “Increasing disk size” reference above Setup a TLS cert \u0026amp; DNS registration  ","excerpt":"Self Hosting How to access container, retrieve logs, isolate security groups  How to restart …","ref":"/beta/apps/guides/hosting/self-hosting/","title":"Self Hosting"},{"body":"Shortcodes used for SMS messaging are generated on doc.patient_id against any document of type person. By default, these shortcodes start at 5 numeric digits long, and will increase in length as deemed necessary by the generation algorithm.\nIf the length is increased, this increase is stored in a CouchDB documented called shortcode-id-length:\n{ \u0026#34;_id\u0026#34;: \u0026#34;shortcode-id-length\u0026#34;, \u0026#34;current_length\u0026#34;: 6 } Configuring a minimum length If you wish to change the minimum length to of ids to generate, create or edit the shortcode-id-length document in CouchDB. For example, if you wish for the minimum length to be 7:\n{ \u0026#34;_id\u0026#34;: \u0026#34;shortcode-id-length\u0026#34;, \u0026#34;current_length\u0026#34;: 7 } NB: If this file already exists be sure to include the existing _rev property.\nNB: If you are changing this document and want to make it relevant straight away, you must restart Sentinel. Otherwise there may be a collection of cached already accepted ids of the previous length that Sentinel will work through first.\nConfiguring a maximum length, locking down an exact length etc It is not possible to either alter the maximum length of ids, to stop it automatically increasing or to tweak when it decides to automatically increase. IDs automatically increasing in length when required is important to the continual correct functioning of Sentinel.\nValid sizes Shortcodes can be between 5 and 13 digits long. Due to the last digit being a checksum digit, there are at most 10,000 5 digit ids, and at most 1,000,000,000,000 13 digit ids.\n","excerpt":"Shortcodes used for SMS messaging are generated on doc.patient_id against any document of type …","ref":"/beta/apps/guides/sms/shortcodes/","title":"Shortcode identifiers"},{"body":"","excerpt":"","ref":"/beta/apps/guides/sms/","title":"SMS"},{"body":" Work out the name of the AWS instance your Docker container is running in, eg: \u0026ldquo;development-2a-1\u0026rdquo;   Log in to AWS Select the availability zone (likely to be London) Go to EC2 instances and select the instance Check the tags for the name  ssh in to the Docker instance: ssh -J admin@gateway.dev.medicmobile.org admin@\u0026lt;instance_name\u0026gt; Work out the name of the Docker container you want to connect to, eg: \u0026ldquo;alpha-dev\u0026rdquo;. Get a list of available containers with: sudo docker ps Connect to the container: sudo docker exec -it \u0026lt;container-name\u0026gt; /bin/bash  ","excerpt":"Work out the name of the AWS instance your Docker container is running in, eg: …","ref":"/beta/apps/guides/hosting/ssh-into-docker/","title":"SSH into a Docker image"},{"body":"Requirements  Installed CHT-Core 3.x via docker-compose Your own SSL certifications (Let\u0026rsquo;s Encrypt)  Copy certs into medic-os container Inside your server (you may need to use sudo before each command): $ docker ps $ docker cp /path/to/ssl.cert medic-os:/srv/settings/medic-core/nginx/private/ssl.crt $ docker cp /path/to/ssl.key medic-os:/srv/settings/medic-core/nginx/private/ssl.key Edit nginx configuration file Inside the medic-os docker container: $ docker exec -it medic-os /bin/bash # sed -i \u0026quot;s|default.crt|ssl.crt|\u0026quot; /srv/settings/medic-core/nginx/nginx.conf # sed -i \u0026quot;s|default.key|ssl.key|\u0026quot; /srv/settings/medic-core/nginx/nginx.conf Restart services Inside medic-os container: $ docker exec -it medic-os /bin/bash # /boot/svc-restart medic-core nginx View Nginx Logs Inside container: # cd /srv/storage/medic-core/nginx/logs/ access.log error-ssl.log error.log startup.og ","excerpt":"Requirements  Installed CHT-Core 3.x via docker-compose Your own SSL certifications (Let\u0026rsquo;s …","ref":"/beta/apps/guides/hosting/ssl-cert-install/","title":"SSL Cert Install"},{"body":"Introduced in v3.4.0\nThe app collects performance data on certain user actions which is then aggregated over each calendar month and replicated to the server. This can be used to evaluate the performance of the code and configuration and to evaluate where improvements can be made.\nThe aggregate doc for the previous month is created when the first telemetry item is recorded each month. This is stored in the medic-user-\u0026lt;username\u0026gt;-meta database on the device and replicated to the server when an internet connection is available. This user specific server db is then replicated into the medic-users-meta database which holds all aggregate telemetry docs for all users.\nThe aggregate docs\u0026rsquo; IDs follow the pattern telemetry-\u0026lt;year\u0026gt;-\u0026lt;month\u0026gt;-\u0026lt;username\u0026gt;-\u0026lt;uuid\u0026gt;.\nPerformance data Each aggregate data point has the following fields.\n   Field Description     sum A sum of all the recorded times in milliseconds.   min The smallest time recorded in milliseconds.   max The largest time recorded in milliseconds.   count The number of times recorded.   sumsqr The sum of squares of the times recorded in milliseconds.    The telemetry data gathered changes with different versions of the framework. Currently, the data points collected are:\n   Field Description     boot_time The overall boot time including loading the code, purging, and accessing the database.   boot_time:1:to_first_code_execution The time between the page loading and the JavaScript starting to run.   boot_time:2:to_bootstrap The time between JavaScript starting and the bootstrapping (purging, initial replication, etc) to complete.   boot_time:3:to_angular_bootstrap The time between bootstrapping completing and the webapp being ready to use.   boot_time:4:to_db_warmed The time between the webapp being ready to use and the database being ready to use.   enketo:reports:\u0026lt;form\u0026gt;:\u0026lt;action\u0026gt;:\u0026lt;component\u0026gt; The time taken to fill in Enketo forms. The action can either be \u0026ldquo;add\u0026rdquo; or \u0026ldquo;edit\u0026rdquo;. The component is one of: \u0026ldquo;render\u0026rdquo; covers getting the form and rendering it on screen; \u0026ldquo;user_edit_time\u0026rdquo; is the time the user took to fill in and submit the form; or \u0026ldquo;save\u0026rdquo; is about converting the form into a report and saving it.   enketo:contacts:\u0026lt;form\u0026gt;:add:\u0026lt;component\u0026gt; As above but for Contact creation forms.   enketo:tasks:\u0026lt;form\u0026gt;:\u0026lt;action\u0026gt;:\u0026lt;component\u0026gt; As above but for forms on the Tasks tab.   search:contacts The time taken to list all contacts.   search:contacts:\u0026lt;filter[:filter]\u0026gt; The time taken to search all contacts using the given filters.   search:reports The time taken to list all reports.   search:reports:\u0026lt;filter[:filter]\u0026gt; The time taken to search all reports using the given filters.   client-date-offset The difference between the client datetime and the server datetime. Only recorded if the difference is large enough that it may cause issues.   analytics:targets:load The time taken to load the targets page. Added in 3.9   tasks:load The time taken to load the tasks page. Added in 3.9   tasks:refresh The time taken to refresh tasks on the tasks page. Added in 3.9   rules-engine:initialize The time taken to initialize the rules-engine . Added in 3.9   rules-engine:update-emissions The time taken to update emissions in the rules-engine, when receiving a change. Added in 3.9   rules-engine:tasks:all-contacts The time taken to fetch tasks for all contacts in rules-engine. Added in 3.9   rules-engine:tasks:some-contacts The time taken to fetch tasks for some specific contacts in rules-engine. Added in 3.9   rules-engine:targets Time taken for the rules-engine to fetch targets. Added in 3.9   rules-engine:targets:dirty-contacts Number of \u0026ldquo;dirty\u0026rdquo; contacts[1] when fetching targets in the rules-engine. Added in 3.9   rules-engine:tasks:dirty-contacts Number of \u0026ldquo;dirty\u0026rdquo; contacts[1] when fetching tasks in the rules-engine. Added in 3.9   rules-engine:ensureTaskFreshness:cancel The time taken to cancel the automated task freshness thread in the rules-engine. This event is only recorded when the thread is cancelled before executing the refresh. Added in 3.9   rules-engine:ensureTargetFreshness:cancel The time taken to cancel the automated target freshness thread in the rules-engine. This event is only recorded when the thread is cancelled before executing the refresh. Added in 3.9    [1] \u0026ldquo;Dirty\u0026rdquo; indicates that the contact\u0026rsquo;s task documents are not up to date. They will be refreshed before being used.\nMetadata When the aggregate doc is created the Telemetry service also includes a snapshot of some metadata.\n   Field Description     year The year the data was collected.   month The month the data was collected.   user The username of the logged in user.   deviceId A unique key for this device.   versions.app The version of the webapp.   versions.forms.\u0026lt;form\u0026gt; The version of each form.   userAgent The userAgent string from the user\u0026rsquo;s browser.   hardwareConcurrency The number of cores reported from the browser.   screen.width The width of the screen in pixels.   screen.height The height of the screen in pixels.   deviceInfo.app.version The version of the Android app.   deviceInfo.software.androidVersion The version of Android OS.   deviceInfo.software.osApiLevel The API of the Android OS.   deviceInfo.software.osVersion The version of Android OS (detailed).   deviceInfo.hardware.device The Android device name.   deviceInfo.hardware.model The Android model name.   deviceInfo.hardware.manufacturer The Android device manufacturer.   deviceInfo.hardware.hardware The Android device hardware.   deviceInfo.hardware.cpuInfo The Android device CPU information.   deviceInfo.storage.free The available storage on the device.   deviceInfo.storage.total The total storage on the device.   deviceInfo.ram.free The available RAM on the device.   deviceInfo.ram.total The total RAM on the device.   deviceInfo.ram.threshold The level of RAM at which certain services will be killed by Android.   deviceInfo.network.downSpeed The reported download speed of the network.   deviceInfo.network.upSpeed The reported upload speed of the network.   dbInfo.doc_count The number of docs in the local database.   dbInfo.update_seq The update sequence of the local database.   dbInfo.idb_attachment_format The format of database attachments.   dbInfo.db_name The name of the local database.   dbInfo.auto_compaction Whether or not auto compaction is set.   dbInfo.adapter The database adapter being used.    ","excerpt":"Introduced in v3.4.0\nThe app collects performance data on certain user actions which is then …","ref":"/beta/apps/guides/telemetry/","title":"User telemetry"}]