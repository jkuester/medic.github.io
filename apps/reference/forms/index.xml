<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Community Health Toolkit – forms</title><link>https://docs.communityhealthtoolkit.org/beta/apps/reference/forms/</link><description>Recent content in forms on Community Health Toolkit</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.communityhealthtoolkit.org/beta/apps/reference/forms/index.xml" rel="self" type="application/rss+xml"/><item><title>Apps: app</title><link>https://docs.communityhealthtoolkit.org/beta/apps/reference/forms/app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/beta/apps/reference/forms/app/</guid><description>
&lt;p>App forms are used for care guides within the web app, whether accessed in browser or via the Android app. When a user completes an app form, the contents are saved in the database with the type &lt;code>data_record&lt;/code>. These docs are known in the app as &lt;a href="https://docs.communityhealthtoolkit.org/beta/apps/features/reports/">Reports&lt;/a>.&lt;/p>
&lt;p>App forms are defined by the following files:&lt;/p>
&lt;ul>
&lt;li>A XML form definition using a CHT-enhanced ODK XForm format&lt;/li>
&lt;li>A XLSForm form definition, easier to write and converts to the XForm (optional)&lt;/li>
&lt;li>Meta information in the &lt;code>{form_name}.properties.json&lt;/code> file (optional)&lt;/li>
&lt;li>Media files in the &lt;code>{form_name}-media&lt;/code> directory (optional)&lt;/li>
&lt;/ul>
&lt;h2 id="xform">XForm&lt;/h2>
&lt;p>A CHT-enhanced version of the ODK XForm standard is supported.&lt;/p>
&lt;p>Data needed during the completion of the form (eg patient&amp;rsquo;s name, prior information) is passed into the &lt;code>inputs&lt;/code> group. Reports that have at least one of &lt;code>place_id&lt;/code>, &lt;code>patient_id&lt;/code>, and &lt;code>patient_uuid&lt;/code> at the top level will be associated with that contact.&lt;/p>
&lt;p>A typical form ends with a summary group (eg &lt;code>group_summary&lt;/code>, or &lt;code>group_review&lt;/code>) where important information is shown to the user before they submit the form.&lt;/p>
&lt;p>In between the &lt;code>inputs&lt;/code> and the closing group is the form flow - a collection of questions that can be grouped into pages. All data fields submitted with a form are stored, but often important information that will need to be accessed from the form is brought to the top level. To make sure forms are properly associated to a contact, make sure at least one of &lt;code>place_id&lt;/code>, &lt;code>patient_id&lt;/code>, and &lt;code>patient_uuid&lt;/code> is stored at the top level of the form.&lt;/p>
&lt;p>&lt;em>See Also:&lt;/em> &lt;a href=https://docs.communityhealthtoolkit.org/beta/design/apps/#content-and-layout>Content and Layout&lt;/a>&lt;/p>
&lt;h2 id="xlsform">XLSForm&lt;/h2>
&lt;p>Since writing raw XML can be tedious, we suggest creating the forms using the &lt;a href="http://xlsform.org/">XLSForm standard&lt;/a>, and using the &lt;a href="https://github.com/medic/medic-conf">medic-conf&lt;/a> command line configurer tool to &lt;a href="#build">convert them to XForm format&lt;/a>.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>type&lt;/th>
&lt;th>name&lt;/th>
&lt;th>label&lt;/th>
&lt;th>relevant&lt;/th>
&lt;th>appearance&lt;/th>
&lt;th>calculate&lt;/th>
&lt;th>&amp;hellip;&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>begin group&lt;/td>
&lt;td>inputs&lt;/td>
&lt;td>Inputs&lt;/td>
&lt;td>./source = &amp;lsquo;user&amp;rsquo;&lt;/td>
&lt;td>field-list&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>hidden&lt;/td>
&lt;td>source&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>hidden&lt;/td>
&lt;td>source_id&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>begin group&lt;/td>
&lt;td>contact&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>db:person&lt;/td>
&lt;td>_id&lt;/td>
&lt;td>Patient ID&lt;/td>
&lt;td>&lt;/td>
&lt;td>db-object&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>string&lt;/td>
&lt;td>patient_id&lt;/td>
&lt;td>Medic ID&lt;/td>
&lt;td>&lt;/td>
&lt;td>hidden&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>string&lt;/td>
&lt;td>name&lt;/td>
&lt;td>Patient Name&lt;/td>
&lt;td>&lt;/td>
&lt;td>hidden&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>end group&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>end group&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>calculate&lt;/td>
&lt;td>_id&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>../inputs/contact/_id&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>calculate&lt;/td>
&lt;td>patient_id&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>../inputs/contact/patient_id&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>calculate&lt;/td>
&lt;td>name&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>../inputs/contact/name&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>begin group&lt;/td>
&lt;td>group_summary&lt;/td>
&lt;td>Summary&lt;/td>
&lt;td>&lt;/td>
&lt;td>field-list summary&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>note&lt;/td>
&lt;td>r_patient_info&lt;/td>
&lt;td>**${patient_name}** ID: ${r_patient_id}&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>note&lt;/td>
&lt;td>r_followup&lt;/td>
&lt;td>Follow Up &amp;lt;i class=&amp;quot;fa fa-flag&amp;rdquo;&amp;gt;&amp;lt;/i&amp;gt;&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>note&lt;/td>
&lt;td>r_followup_note&lt;/td>
&lt;td>${r_followup_instructions}&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>end group&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="cht-xform-widgets">CHT XForm Widgets&lt;/h2>
&lt;p>Some XForm widgets have been added or modified for use in the app:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Bikram Sambat Datepicker&lt;/strong>: Calendar widget using Bikram Sambat calendar. Used by default for appropriate languages.&lt;/li>
&lt;li>&lt;strong>Countdown Timer&lt;/strong>: A visual timer widget that starts when tapped/clicked, and has an audible alert when done. To use it create a &lt;code>string&lt;/code> field with an &lt;code>appearance&lt;/code> set to &lt;code>countdown-timer&lt;/code>. The duration of the timer is the field&amp;rsquo;s value, which can be set in the XLSForm&amp;rsquo;s &lt;code>default&lt;/code> column. If this value is not set, the timer will be set to 60 seconds.&lt;/li>
&lt;li>&lt;strong>Contact Selector&lt;/strong>: Select a contact, such as a person or place, and save their UUID in the report. To use create a field of type &lt;code>db:{{contact_type}}&lt;/code> (eg &lt;code>db:person&lt;/code>, &lt;code>db:clinic&lt;/code>) with appearance &lt;code>db-object&lt;/code>.&lt;/li>
&lt;li>&lt;strong>Rapid Diagnostic Test capture&lt;/strong>: Take a picture of a Rapid Diagnotistic Test and save it with the report. Works with &lt;a href="https://github.com/medic/rdt-capture/">rdt-capture Android application&lt;/a>. To use create a string field with appearance &lt;code>mrdt-verify&lt;/code>.&lt;/li>
&lt;li>&lt;strong>Simprints registration&lt;/strong>: Register a patient with the Simprints biometric tool. To include in a form create a &lt;code>string&lt;/code> field with &lt;code>appearance&lt;/code> of &lt;code>simprints-reg&lt;/code>. Requires the Simprints app connected with hardware, or &lt;a href="https://github.com/medic/mocksimprints">mock app&lt;/a>. Demo only, not ready for production since API key is hardcoded.&lt;/li>
&lt;/ul>
&lt;p>The code for these widgets can be found in the &lt;a href="https://github.com/medic/medic/tree/master/webapp/src/js/enketo/widgets">Medic repo&lt;/a>.&lt;/p>
&lt;h3 id="contact-selector">Contact Selector&lt;/h3>
&lt;p>Using a contact selector allows you to get data off the selected contact(person or place) or search for an existing contact.&lt;/p>
&lt;p>When using with the appearance column set to &lt;code>db-object&lt;/code>. The contact selector will display as a search box allowing you to search for the type of contact specified when building the report. EX: &lt;code>db-person&lt;/code> will only search for contacts with type of person.&lt;/p>
&lt;p>When used as a field you can pull the current contact. This is can be used to link reports to a person or place where you started the form from. Getting the data of &lt;code>_id&lt;/code> or &lt;code>patient_id&lt;/code> and setting those to &lt;code>patient_id&lt;/code> or &lt;code>patient_uuid&lt;/code> on the final report will link that report so it displays on their contact summary page.&lt;/p>
&lt;p>Example of getting the data from the contact and assigning it to the fields neccessary to link the report.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>type&lt;/th>
&lt;th>name&lt;/th>
&lt;th>label&lt;/th>
&lt;th>relevant&lt;/th>
&lt;th>appearance&lt;/th>
&lt;th>calculate&lt;/th>
&lt;th>&amp;hellip;&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>begin group&lt;/td>
&lt;td>contact&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>db:person&lt;/td>
&lt;td>_id&lt;/td>
&lt;td>Patient ID&lt;/td>
&lt;td>&lt;/td>
&lt;td>db-object&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>string&lt;/td>
&lt;td>patient_id&lt;/td>
&lt;td>Medic ID&lt;/td>
&lt;td>&lt;/td>
&lt;td>hidden&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>string&lt;/td>
&lt;td>name&lt;/td>
&lt;td>Patient Name&lt;/td>
&lt;td>&lt;/td>
&lt;td>hidden&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>end group&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>calculate&lt;/td>
&lt;td>patient_uuid&lt;/td>
&lt;td>Patient UUID&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>../contact/_id&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>calculate&lt;/td>
&lt;td>patient_id&lt;/td>
&lt;td>Patient ID&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>../contact/patient_id&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="cht-xpath-functions">CHT XPath Functions&lt;/h2>
&lt;h3 id="difference-in-months">&lt;code>difference-in-months&lt;/code>&lt;/h3>
&lt;p>Calculates the number of whole calendar months between two dates. This is often used when determining a child&amp;rsquo;s age for immunizations or assessments.&lt;/p>
&lt;h3 id="z-score">&lt;code>z-score&lt;/code>&lt;/h3>
&lt;p>In Enketo forms you have access to an XPath function to calculate the z-score value for a patient.&lt;/p>
&lt;h2 id="uploading-binary-attachments">Uploading Binary Attachments&lt;/h2>
&lt;p>Forms can include arbitrary binary data which is submitted and included in the doc as an attachment. If this is an image type it&amp;rsquo;ll then be displayed inline in the report UI.&lt;/p>
&lt;p>To mark an element as having binary data add an extra column in the XLSForm called &lt;code>instance::type&lt;/code> and specify &lt;code>binary&lt;/code> in the element&amp;rsquo;s row.&lt;/p>
&lt;h2 id="properties">Properties&lt;/h2>
&lt;p>The meta information in the &lt;code>{form_name}.properties.json&lt;/code> file defines the form&amp;rsquo;s title and icon, as well as when and where the form should be available.&lt;/p>
&lt;h3 id="formsappform_namepropertiesjson">&lt;code>forms/app/{form_name}.properties.json&lt;/code>&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>property&lt;/th>
&lt;th>description&lt;/th>
&lt;th>required&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>title&lt;/code>&lt;/td>
&lt;td>The form&amp;rsquo;s title seen in the app. Uses a localization array using the 2-letter code, not the translation keys discussed in the &lt;a href="#localization">Localization section&lt;/a>.&lt;/td>
&lt;td>yes&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>icon&lt;/code>&lt;/td>
&lt;td>Icon associated with the form. The value is the image&amp;rsquo;s key in the &lt;code>resources.json&lt;/code> file, as described in the &lt;a href="#icons">Icons section&lt;/a>&lt;/td>
&lt;td>yes&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>context&lt;/code>&lt;/td>
&lt;td>The context defines when and where the form should be available in the app&lt;/td>
&lt;td>no&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>context.person&lt;/code>&lt;/td>
&lt;td>Boolean determining if the form can be seen in the Action list for a person&amp;rsquo;s profile. This is still subject to the &lt;code>expression&lt;/code>.&lt;/td>
&lt;td>no&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>context.place&lt;/code>&lt;/td>
&lt;td>Boolean determining if the form can be seen in the Action list for a person&amp;rsquo;s profile. This is still subject to the &lt;code>expression&lt;/code>.&lt;/td>
&lt;td>no&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>context.expression&lt;/code>&lt;/td>
&lt;td>A JavaScript expression which is evaluated when a contact profile or the reports tab is viewed. If the expression evaluates to true, the form will be listed as an available action. The inputs &lt;code>contact&lt;/code>, &lt;code>user&lt;/code>, and &lt;code>summary&lt;/code> are available. By default, forms are not shown on the reports tab, use &lt;code>&amp;quot;expression&amp;quot;: &amp;quot;!contact&amp;quot;&lt;/code> to show the form on the Reports tab since there is no contact for this scenario.&lt;/td>
&lt;td>no&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="code-sample">Code sample&lt;/h3>
&lt;p>In this sample properties file, the associated form would only show on a person&amp;rsquo;s page, and only if their sex is unspecified or female and they are between 10 and 65 years old:&lt;/p>
&lt;h4 id="formsapppregnancypropertiesjson">&lt;code>forms/app/pregnancy.properties.json&lt;/code>&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json"> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;title&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;locale&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;en&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;content&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;New Pregnancy&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;locale&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;hi&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;content&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;नई गर्भावस्था&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;icon&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;pregnancy-1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;context&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;person&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;place&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;expression&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;contact.type === &amp;#39;person&amp;#39; &amp;amp;&amp;amp; (!contact.sex || contact.sex === &amp;#39;female&amp;#39;) &amp;amp;&amp;amp; (!contact.date_of_birth || (ageInYears(contact) &amp;gt;= 10 &amp;amp;&amp;amp; ageInYears(contact) &amp;lt; 65))&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="build">Build&lt;/h2>
&lt;p>Convert and build the app forms into your application using the &lt;code>convert-app-forms&lt;/code> and &lt;code>upload-app-forms&lt;/code> actions in &lt;code>medic-conf&lt;/code>.&lt;/p>
&lt;pre>&lt;code>medic-conf --local convert-app-forms upload-app-forms
&lt;/code>&lt;/pre></description></item><item><title>Apps: collect</title><link>https://docs.communityhealthtoolkit.org/beta/apps/reference/forms/collect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/beta/apps/reference/forms/collect/</guid><description>
&lt;p>ODK XForms are used to render forms in the Medic Collect Android app. These forms cannot use any Medic-specific XForm notations. All Medic Collect forms are processed as SMS (even when submitted over a wifi) therefore a corresponding JSON form with matching fields is used to interpret the incoming report.&lt;/p>
&lt;p>Collect forms must be in the &lt;code>forms/collect&lt;/code> folder to be processed by &lt;a href="https://github.com/medic/medic-conf">&lt;code>medic-conf&lt;/code>&lt;/a>&amp;lsquo;s &lt;code>convert-collect-forms&lt;/code> and &lt;code>upload-collect-forms&lt;/code> actions. Once uploaded to the server, they can be downloaded by the Medic Collect app. These forms can also be included in Medic Collect builds for users without a data connection to get forms.&lt;/p>
&lt;p>XForms require a couple minor changes to be compatible with Medic Collect so that they can properly be received by a Medic instance. The changes can be done either manually in the XForm&amp;rsquo;s XML, or automatically with XLSForm forms using &lt;code>medic-conf&lt;/code>.&lt;/p>
&lt;h3 id="automatic-changes-with-xlsforms">Automatic changes with XLSForms&lt;/h3>
&lt;p>If using a &lt;a href="http://xlsform.org/">XLSForm&lt;/a> and using &lt;a href="https://github.com/medic/medic-conf">&lt;code>medic-conf&lt;/code>&lt;/a> to convert to XForm, the necessary fields will be automatically added to the resulting XForm. You can override the default prefix and separator by declaring &lt;code>sms_keyword&lt;/code> and &lt;code>sms_seperator&lt;/code> respectively in the Settings tab.&lt;/p>
&lt;h3 id="manual-changes-in-xform">Manual changes in XForm&lt;/h3>
&lt;p>Collect forms need &lt;code>prefix&lt;/code> and &lt;code>delimiter&lt;/code> values added to the XForm&amp;rsquo;s XML. This is done where the form ID is declared in the instance&amp;rsquo;s data model. For example, the following:&lt;/p>
&lt;pre>&lt;code>&amp;lt;instance&amp;gt;
&amp;lt;data id=&amp;quot;myform&amp;quot; &amp;gt;
...
&lt;/code>&lt;/pre>&lt;p>becomes:&lt;/p>
&lt;pre>&lt;code>&amp;lt;instance&amp;gt;
&amp;lt;data id=&amp;quot;myform&amp;quot; prefix=&amp;quot;J1!FORM_CODE!&amp;quot; delimiter=&amp;quot;#&amp;quot;&amp;gt;
...
&lt;/code>&lt;/pre>&lt;p>Note that &lt;code>FORM_CODE&lt;/code> should be replaced with the form code as defined in the JSON forms version of the form. If the form code is &lt;code>ABCD&lt;/code> the prefix value would be &lt;code>J1!ABCD!&lt;/code>, resulting in &lt;code>prefix=&amp;quot;J1!ABCD!&amp;quot;&lt;/code>. In case you are curious, the &lt;code>J1&lt;/code> lets the Medic Mobile server know that version 1 of the JavaRosa parser should be used on the incoming SMS.&lt;/p></description></item><item><title>Apps: contact</title><link>https://docs.communityhealthtoolkit.org/beta/apps/reference/forms/contact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.communityhealthtoolkit.org/beta/apps/reference/forms/contact/</guid><description>
&lt;p>Contact forms are used for the creation and editing of each contact. The type associated to people is &lt;code>person&lt;/code>, and there are three types of places corresponding to levels in the app: &lt;code>district_hospital&lt;/code> &amp;gt; &lt;code>health_center&lt;/code> &amp;gt; &lt;code>clinic&lt;/code>. The display names for the place levels can be changed via &lt;a href="https://docs.communityhealthtoolkit.org/beta/apps/reference/translations/">custom translations&lt;/a>, and wherever they are defined in the contact forms. Each contact type has its own XForm where it defines the fields that it wants to store/edit for the contact:&lt;/p>
&lt;pre>&lt;code>- /forms/contact/person-create.xml
- /forms/contact/person-edit.xml
- /forms/contact/clinic-create.xml
- /forms/contact/clinic-edit.xml
- /forms/contact/health_center-create.xml
- /forms/contact/health_center-edit.xml
- /forms/contact/district_hospital-create.xml
- /forms/contact/district_hospital-edit.xml
&lt;/code>&lt;/pre>
&lt;p>To create the above XForm files it is recommended to use XLSForms. Also, if the contact forms will be similar for all places, you can use a &lt;code>PLACE_TYPE-create.xlsx&lt;/code> file for creation, a &lt;code>PLACE_TYPE-edit.xlsx&lt;/code> for editing, and have &lt;code>medic-conf&lt;/code> generate the individual forms. For this you would also need &lt;code>forms/contact/places.json&lt;/code>, where you would define the place names. From the XLSForm you can refer to the place type with &lt;code>PLACE_TYPE&lt;/code>, and the place name with &lt;code>PLACE_NAME&lt;/code>. You can even use the place type for conditional behaviour in the form. The base files needed would therefore be:&lt;/p>
&lt;pre>&lt;code>- /forms/contact/person-create.xlsx
- /forms/contact/person-edit.xlsx
- /forms/contact/PLACE_TYPE-create.xlsx
- /forms/contact/PLACE_TYPE-edit.xlsx
- /forms/contact/places.json
&lt;/code>&lt;/pre>
&lt;p>Here is an example of a &lt;code>places.json&lt;/code> files:&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;clinic&amp;quot;: &amp;quot;Village Clinic&amp;quot;,
&amp;quot;health_center&amp;quot;: &amp;quot;Health Center&amp;quot;,
&amp;quot;district_hospital&amp;quot;: &amp;quot;District Hospital&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>Convert and build the contact forms into your application using the &lt;code>convert-contact-forms&lt;/code> and &lt;code>upload-contact-forms&lt;/code> actions in &lt;code>medic-conf&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>medic-conf --local convert-contact-forms upload-contact-form&lt;/code>&lt;/p>
&lt;/blockquote></description></item></channel></rss>